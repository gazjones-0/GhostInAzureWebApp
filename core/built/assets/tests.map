{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ghost-admin/tests/acceptance/authentication-test.js","ghost-admin/tests/acceptance/content-test.js","ghost-admin/tests/acceptance/custom-post-templates-test.js","ghost-admin/tests/acceptance/editor-test.js","ghost-admin/tests/acceptance/error-handling-test.js","ghost-admin/tests/acceptance/members-test.js","ghost-admin/tests/acceptance/password-reset-test.js","ghost-admin/tests/acceptance/settings/amp-test.js","ghost-admin/tests/acceptance/settings/code-injection-test.js","ghost-admin/tests/acceptance/settings/design-test.js","ghost-admin/tests/acceptance/settings/general-test.js","ghost-admin/tests/acceptance/settings/integrations-test.js","ghost-admin/tests/acceptance/settings/labs-test.js","ghost-admin/tests/acceptance/settings/slack-test.js","ghost-admin/tests/acceptance/settings/tags-test.js","ghost-admin/tests/acceptance/settings/unsplash-test.js","ghost-admin/tests/acceptance/settings/zapier-test.js","ghost-admin/tests/acceptance/setup-test.js","ghost-admin/tests/acceptance/signin-test.js","ghost-admin/tests/acceptance/signup-test.js","ghost-admin/tests/acceptance/staff-test.js","ghost-admin/tests/acceptance/subscribers-test.js","ghost-admin/tests/helpers/adapter-error.js","ghost-admin/tests/helpers/data-transfer.js","ghost-admin/tests/helpers/drag-drop.js","ghost-admin/tests/helpers/ember-drag-drop.js","ghost-admin/tests/helpers/ember-power-calendar.js","ghost-admin/tests/helpers/ember-power-select.js","ghost-admin/tests/helpers/ember-simple-auth.js","ghost-admin/tests/helpers/file-upload.js","ghost-admin/tests/helpers/find.js","ghost-admin/tests/helpers/mock-event.js","ghost-admin/tests/helpers/resolver.js","ghost-admin/tests/helpers/visit.js","ghost-admin/tests/integration/adapters/tag-test.js","ghost-admin/tests/integration/adapters/user-test.js","ghost-admin/tests/integration/components/gh-alert-test.js","ghost-admin/tests/integration/components/gh-alerts-test.js","ghost-admin/tests/integration/components/gh-basic-dropdown-test.js","ghost-admin/tests/integration/components/gh-cm-editor-test.js","ghost-admin/tests/integration/components/gh-download-count-test.js","ghost-admin/tests/integration/components/gh-feature-flag-test.js","ghost-admin/tests/integration/components/gh-file-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-test.js","ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test.js","ghost-admin/tests/integration/components/gh-member-avatar-test.js","ghost-admin/tests/integration/components/gh-navitem-test.js","ghost-admin/tests/integration/components/gh-navitem-url-input-test.js","ghost-admin/tests/integration/components/gh-notification-test.js","ghost-admin/tests/integration/components/gh-notifications-test.js","ghost-admin/tests/integration/components/gh-profile-image-test.js","ghost-admin/tests/integration/components/gh-psm-tags-input-test.js","ghost-admin/tests/integration/components/gh-psm-template-select-test.js","ghost-admin/tests/integration/components/gh-search-input-test.js","ghost-admin/tests/integration/components/gh-tag-settings-form-test.js","ghost-admin/tests/integration/components/gh-task-button-test.js","ghost-admin/tests/integration/components/gh-theme-table-test.js","ghost-admin/tests/integration/components/gh-timezone-select-test.js","ghost-admin/tests/integration/components/gh-trim-focus-input-test.js","ghost-admin/tests/integration/components/gh-unsplash-photo-test.js","ghost-admin/tests/integration/components/gh-unsplash-test.js","ghost-admin/tests/integration/components/gh-uploader-test.js","ghost-admin/tests/integration/components/gh-validation-status-container-test.js","ghost-admin/tests/integration/components/modal-transfer-owner-test.js","ghost-admin/tests/integration/helpers/background-image-style-test.js","ghost-admin/tests/integration/helpers/clean-basic-html-test.js","ghost-admin/tests/integration/helpers/sanitize-html-test.js","ghost-admin/tests/integration/services/ajax-test.js","ghost-admin/tests/integration/services/config-test.js","ghost-admin/tests/integration/services/feature-test.js","ghost-admin/tests/integration/services/lazy-loader-test.js","ghost-admin/tests/integration/services/slug-generator-test.js","ghost-admin/tests/integration/services/store-test.js","ghost-admin/tests/lint/app.lint-test.js","ghost-admin/tests/lint/tests.lint-test.js","ghost-admin/tests/test-helper.js","ghost-admin/tests/unit/authenticators/cookie-test.js","ghost-admin/tests/unit/components/gh-alert-test.js","ghost-admin/tests/unit/components/gh-app-test.js","ghost-admin/tests/unit/components/gh-navitem-url-input-test.js","ghost-admin/tests/unit/components/gh-notification-test.js","ghost-admin/tests/unit/components/gh-post-settings-menu-test.js","ghost-admin/tests/unit/components/gh-url-preview-test.js","ghost-admin/tests/unit/components/gh-user-active-test.js","ghost-admin/tests/unit/components/gh-user-invited-test.js","ghost-admin/tests/unit/controllers/editor-test.js","ghost-admin/tests/unit/controllers/settings/design-test.js","ghost-admin/tests/unit/controllers/subscribers-test.js","ghost-admin/tests/unit/helpers/gh-count-characters-test.js","ghost-admin/tests/unit/helpers/gh-count-down-characters-test.js","ghost-admin/tests/unit/helpers/gh-format-post-time-test.js","ghost-admin/tests/unit/helpers/gh-user-can-admin-test.js","ghost-admin/tests/unit/helpers/highlighted-text-test.js","ghost-admin/tests/unit/helpers/is-equal-test.js","ghost-admin/tests/unit/helpers/is-not-test.js","ghost-admin/tests/unit/mixins/validation-engine-test.js","ghost-admin/tests/unit/models/api-key-test.js","ghost-admin/tests/unit/models/integration-test.js","ghost-admin/tests/unit/models/invite-test.js","ghost-admin/tests/unit/models/member-test.js","ghost-admin/tests/unit/models/navigation-item-test.js","ghost-admin/tests/unit/models/post-test.js","ghost-admin/tests/unit/models/role-test.js","ghost-admin/tests/unit/models/setting-test.js","ghost-admin/tests/unit/models/subscriber-test.js","ghost-admin/tests/unit/models/tag-test.js","ghost-admin/tests/unit/models/user-test.js","ghost-admin/tests/unit/models/webhook-test.js","ghost-admin/tests/unit/serializers/api-key-test.js","ghost-admin/tests/unit/serializers/integration-test.js","ghost-admin/tests/unit/serializers/notification-test.js","ghost-admin/tests/unit/serializers/post-test.js","ghost-admin/tests/unit/serializers/role-test.js","ghost-admin/tests/unit/serializers/setting-test.js","ghost-admin/tests/unit/serializers/subscriber-test.js","ghost-admin/tests/unit/serializers/tag-test.js","ghost-admin/tests/unit/serializers/user-test.js","ghost-admin/tests/unit/serializers/webhook-test.js","ghost-admin/tests/unit/services/event-bus-test.js","ghost-admin/tests/unit/services/notifications-test.js","ghost-admin/tests/unit/services/resize-detector-test.js","ghost-admin/tests/unit/services/ui-test.js","ghost-admin/tests/unit/services/unsplash-test.js","ghost-admin/tests/unit/services/upgrade-status-test.js","ghost-admin/tests/unit/transforms/facebook-url-user-test.js","ghost-admin/tests/unit/transforms/json-string-test.js","ghost-admin/tests/unit/transforms/navigation-settings-test.js","ghost-admin/tests/unit/transforms/slack-settings-test.js","ghost-admin/tests/unit/transforms/twitter-url-user-test.js","ghost-admin/tests/unit/transforms/unsplash-settings-test.js","ghost-admin/tests/unit/utils/ghost-paths-test.js","ghost-admin/tests/unit/validators/nav-item-test.js","ghost-admin/tests/unit/validators/post-test.js","ghost-admin/tests/unit/validators/slack-integration-test.js","ghost-admin/tests/unit/validators/subscriber-test.js","ghost-admin/tests/unit/validators/tag-settings-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"ghost-admin/tests/acceptance/authentication-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\"], function (_setupMirage, _windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Authentication', function () {\n    let originalReplaceLocation;\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.describe)('setup redirect', function () {\n      (0, _mocha.beforeEach)(function () {\n        // ensure the /users/me route doesn't error\n        this.server.create('user');\n        this.server.get('authentication/setup', function () {\n          return {\n            setup: [{\n              status: false\n            }]\n          };\n        });\n      });\n      (0, _mocha.it)('redirects to setup when setup isn\\'t complete', async function () {\n        await (0, _testHelpers.visit)('settings/labs');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/setup/one');\n      });\n    });\n    (0, _mocha.describe)('general page', function () {\n      let newLocation;\n      (0, _mocha.beforeEach)(function () {\n        originalReplaceLocation = _windowProxy.default.replaceLocation;\n\n        _windowProxy.default.replaceLocation = function (url) {\n          url = url.replace(/^\\/ghost\\//, '/');\n          newLocation = url;\n        };\n\n        newLocation = undefined;\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n      });\n      (0, _mocha.afterEach)(function () {\n        _windowProxy.default.replaceLocation = originalReplaceLocation;\n      });\n      (0, _mocha.it)('invalidates session on 401 API response', async function () {\n        // return a 401 when attempting to retrieve users\n        this.server.get('/users/', () => new _emberCliMirage.Response(401, {}, {\n          errors: [{\n            message: 'Access denied.',\n            type: 'UnauthorizedError'\n          }]\n        }));\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/staff'); // running `visit(url)` inside windowProxy.replaceLocation breaks\n        // the async behaviour so we need to run `visit` here to simulate\n        // the browser visiting the new page\n\n        if (newLocation) {\n          await (0, _testHelpers.visit)(newLocation);\n        }\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after 401').to.equal('/signin');\n      });\n      (0, _mocha.it)('doesn\\'t show navigation menu on invalid url when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _testHelpers.visit)('/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n        await (0, _testHelpers.visit)('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after invalid url').to.equal('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)(), 'path after invalid url').to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(0);\n      });\n      (0, _mocha.it)('shows nav menu on invalid url when authenticated', async function () {\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after invalid url').to.equal('/signin/invalidurl/');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)(), 'path after invalid url').to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.findAll)('nav.gh-nav').length, 'nav menu presence').to.equal(1);\n      });\n    }); // TODO: re-enable once modal reappears correctly\n\n    _mocha.describe.skip('editor', function () {\n      let origDebounce = Ember.run.debounce;\n      let origThrottle = Ember.run.throttle; // we don't want the autosave interfering in this test\n\n      (0, _mocha.beforeEach)(function () {\n        Ember.run.debounce = function () {};\n\n        Ember.run.throttle = function () {};\n      });\n      (0, _mocha.it)('displays re-auth modal attempting to save with invalid session', async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        }); // simulate an invalid session when saving the edited post\n\n        this.server.put('/posts/:id/', function (_ref, _ref2) {\n          let posts = _ref.posts;\n          let params = _ref2.params;\n          let post = posts.find(params.id);\n          let attrs = this.normalizedRequestAttrs();\n\n          if (attrs.mobiledoc.cards[0][1].markdown === 'Edited post body') {\n            return new _emberCliMirage.Response(401, {}, {\n              errors: [{\n                message: 'Access denied.',\n                type: 'UnauthorizedError'\n              }]\n            });\n          } else {\n            return post.update(attrs);\n          }\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _testHelpers.visit)('/editor'); // create the post\n\n        await (0, _testHelpers.fillIn)('#entry-title', 'Test Post');\n        await (0, _testHelpers.fillIn)('.__mobiledoc-editor', 'Test post body');\n        await (0, _testHelpers.click)('.js-publish-button'); // we shouldn't have a modal at this point\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.modal-container #login').length, 'modal exists').to.equal(0); // we also shouldn't have any alerts\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'no of alerts').to.equal(0); // update the post\n\n        await (0, _testHelpers.fillIn)('.__mobiledoc-editor', 'Edited post body');\n        await (0, _testHelpers.click)('.js-publish-button'); // we should see a re-auth modal\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal #login').length, 'modal exists').to.equal(1);\n      }); // don't clobber debounce/throttle for future tests\n\n      (0, _mocha.afterEach)(function () {\n        Ember.run.debounce = origDebounce;\n        Ember.run.throttle = origThrottle;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/content-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"ember-power-select/test-support/helpers\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\"], function (_setupMirage, _testSupport, _mocha, _helpers, _testHelpers, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Content', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _testHelpers.visit)('/posts');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('as admin', function () {\n      let admin, editor, publishedPost, scheduledPost, draftPost, authorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        admin = this.server.create('user', {\n          roles: [adminRole]\n        });\n        let editorRole = this.server.create('role', {\n          name: 'Editor'\n        });\n        editor = this.server.create('user', {\n          roles: [editorRole]\n        });\n        publishedPost = this.server.create('post', {\n          authors: [admin],\n          status: 'published',\n          title: 'Published Post'\n        });\n        scheduledPost = this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Scheduled Post'\n        });\n        draftPost = this.server.create('post', {\n          authors: [admin],\n          status: 'draft',\n          title: 'Draft Post'\n        });\n        authorPost = this.server.create('post', {\n          authors: [editor],\n          status: 'published',\n          title: 'Editor Published Post'\n        }); // pages shouldn't appear in the list\n\n        this.server.create('page', {\n          authors: [admin],\n          status: 'published',\n          title: 'Published Page'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('displays and filters posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // Not checking request here as it won't be the last request made\n        // Displays all posts + pages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'all posts count').to.equal(4); // show draft posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Draft posts'); // API request is correct\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            lastRequest = _this$server$pretende2[0];\n\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"drafts\" request status filter').to.have.string('status:draft'); // Displays draft post\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'drafts count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(draftPost.id, \"\\\"]\")), 'draft post').to.exist; // show published posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Published posts'); // API request is correct\n\n        var _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1);\n\n        var _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1);\n\n        lastRequest = _this$server$pretende4[0];\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"published\" request status filter').to.have.string('status:published'); // Displays three published posts + pages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'published count').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(publishedPost.id, \"\\\"]\")), 'admin published post').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(authorPost.id, \"\\\"]\")), 'author published post').to.exist; // show scheduled posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Scheduled posts'); // API request is correct\n\n        var _this$server$pretende5 = this.server.pretender.handledRequests.slice(-1);\n\n        var _this$server$pretende6 = _slicedToArray(_this$server$pretende5, 1);\n\n        lastRequest = _this$server$pretende6[0];\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"scheduled\" request status filter').to.have.string('status:scheduled'); // Displays scheduled post\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'scheduled count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(scheduledPost.id, \"\\\"]\")), 'scheduled post').to.exist; // show all posts\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'All posts'); // API request is correct\n\n        var _this$server$pretende7 = this.server.pretender.handledRequests.slice(-1);\n\n        var _this$server$pretende8 = _slicedToArray(_this$server$pretende7, 1);\n\n        lastRequest = _this$server$pretende8[0];\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"all\" request status filter').to.have.string('status:[draft,scheduled,published]'); // show all posts by editor\n\n        await (0, _helpers.selectChoose)('[data-test-author-select]', editor.name); // API request is correct\n\n        var _this$server$pretende9 = this.server.pretender.handledRequests.slice(-1);\n\n        var _this$server$pretende10 = _slicedToArray(_this$server$pretende9, 1);\n\n        lastRequest = _this$server$pretende10[0];\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"editor\" request status filter').to.have.string('status:[draft,scheduled,published]');\n        (0, _chai.expect)(lastRequest.queryParams.filter, '\"editor\" request filter param').to.have.string(\"authors:\".concat(editor.slug)); // Displays editor post\n        // TODO: implement \"filter\" param support and fix mirage post->author association\n        // expect(find('[data-test-post-id]').length, 'editor post count').to.equal(1);\n        // expect(find(`[data-test-post-id=\"${authorPost.id}\"]`), 'author post').to.exist;\n        // TODO: test tags dropdown\n        // Double-click on a post opens editor\n\n        await (0, _testHelpers.triggerEvent)(\"[data-test-post-id=\\\"\".concat(authorPost.id, \"\\\"]\"), 'dblclick');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after double-click').to.equal(\"/editor/post/\".concat(authorPost.id));\n      }); // TODO: skipped due to consistently random failures on Travis\n      // options[0] is undefined\n      // https://github.com/TryGhost/Ghost/issues/10308\n\n      _mocha.it.skip('sorts tags filter alphabetically', async function () {\n        this.server.create('tag', {\n          name: 'B - Second',\n          slug: 'second'\n        });\n        this.server.create('tag', {\n          name: 'Z - Last',\n          slug: 'last'\n        });\n        this.server.create('tag', {\n          name: 'A - First',\n          slug: 'first'\n        });\n        await (0, _testHelpers.visit)('/posts');\n        await (0, _helpers.clickTrigger)('[data-test-tag-select]');\n        let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n        (0, _chai.expect)(options[0].textContent.trim()).to.equal('All tags');\n        (0, _chai.expect)(options[1].textContent.trim()).to.equal('A - First');\n        (0, _chai.expect)(options[2].textContent.trim()).to.equal('B - Second');\n        (0, _chai.expect)(options[3].textContent.trim()).to.equal('Z - Last');\n      });\n    });\n    (0, _mocha.describe)('as author', function () {\n      let author, authorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        author = this.server.create('user', {\n          roles: [authorRole]\n        });\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        let admin = this.server.create('user', {\n          roles: [adminRole]\n        }); // create posts\n\n        authorPost = this.server.create('post', {\n          authors: [author],\n          status: 'published',\n          title: 'Author Post'\n        });\n        this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Admin Post'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('only fetches the author\\'s posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // trigger a filter request so we can grab the posts API request easily\n\n        await (0, _helpers.selectChoose)('[data-test-type-select]', 'Published posts'); // API request includes author filter\n\n        let _this$server$pretende11 = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende12 = _slicedToArray(_this$server$pretende11, 1),\n            lastRequest = _this$server$pretende12[0];\n\n        (0, _chai.expect)(lastRequest.queryParams.filter).to.have.string(\"authors:\".concat(author.slug)); // only author's post is shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'post count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(authorPost.id, \"\\\"]\")), 'author post').to.exist;\n      });\n    });\n    (0, _mocha.describe)('as contributor', function () {\n      let contributor, contributorPost;\n      (0, _mocha.beforeEach)(async function () {\n        let contributorRole = this.server.create('role', {\n          name: 'Contributor'\n        });\n        contributor = this.server.create('user', {\n          roles: [contributorRole]\n        });\n        let adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        let admin = this.server.create('user', {\n          roles: [adminRole]\n        }); // Create posts\n\n        contributorPost = this.server.create('post', {\n          authors: [contributor],\n          status: 'draft',\n          title: 'Contributor Post Draft'\n        });\n        this.server.create('post', {\n          authors: [contributor],\n          status: 'published',\n          title: 'Contributor Published Post'\n        });\n        this.server.create('post', {\n          authors: [admin],\n          status: 'scheduled',\n          title: 'Admin Post'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('only fetches the contributor\\'s draft posts', async function () {\n        await (0, _testHelpers.visit)('/posts'); // Ensure the type, tag, and author selectors don't exist\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-type-select]'), 'type selector').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-tag-select]'), 'tag selector').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-author-select]'), 'author selector').to.not.exist; // Trigger a sort request\n\n        await (0, _helpers.selectChoose)('[data-test-order-select]', 'Oldest'); // API request includes author filter\n\n        let _this$server$pretende13 = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende14 = _slicedToArray(_this$server$pretende13, 1),\n            lastRequest = _this$server$pretende14[0];\n\n        (0, _chai.expect)(lastRequest.queryParams.filter).to.have.string(\"authors:\".concat(contributor.slug)); // only contributor's post is shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-post-id]').length, 'post count').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-post-id=\\\"\".concat(contributorPost.id, \"\\\"]\")), 'author post').to.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/custom-post-templates-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\"], function (_ctrlOrCmd, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha) {\n  \"use strict\";\n\n  // keyCodes\n  const KEY_S = 83;\n  (0, _mocha.describe)('Acceptance: Custom Post Templates', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.beforeEach)(async function () {\n      this.server.loadFixtures('settings');\n      let role = this.server.create('role', {\n        name: 'Administrator'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      return await (0, _testSupport.authenticateSession)();\n    });\n    (0, _mocha.describe)('with custom templates', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('theme', {\n          active: true,\n          name: 'example-theme',\n          package: {\n            name: 'Example Theme',\n            version: '0.1'\n          },\n          templates: [{\n            filename: 'custom-news-bulletin.hbs',\n            name: 'News Bulletin',\n            for: ['post', 'page'],\n            slug: null\n          }, {\n            filename: 'custom-big-images.hbs',\n            name: 'Big Images',\n            for: ['post', 'page'],\n            slug: null\n          }, {\n            filename: 'post-one.hbs',\n            name: 'One',\n            for: ['post'],\n            slug: 'one'\n          }, {\n            filename: 'page-about.hbs',\n            name: 'About',\n            for: ['page'],\n            slug: 'about'\n          }]\n        });\n      });\n      (0, _mocha.it)('can change selected template', async function () {\n        let post = this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // template form should be shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-custom-template-form]')).to.exist; // custom template should be selected\n\n        let select = (0, _testHelpers.find)('[data-test-select=\"custom-template\"]');\n        (0, _chai.expect)(select.value, 'selected value').to.equal('custom-news-bulletin.hbs'); // templates list should contain default and custom templates in alphabetical order\n\n        (0, _chai.expect)(select.options.length).to.equal(3);\n        (0, _chai.expect)(select.options.item(0).value, 'default value').to.equal('');\n        (0, _chai.expect)(select.options.item(0).text, 'default text').to.equal('Default');\n        (0, _chai.expect)(select.options.item(1).value, 'first custom value').to.equal('custom-big-images.hbs');\n        (0, _chai.expect)(select.options.item(1).text, 'first custom text').to.equal('Big Images');\n        (0, _chai.expect)(select.options.item(2).value, 'second custom value').to.equal('custom-news-bulletin.hbs');\n        (0, _chai.expect)(select.options.item(2).text, 'second custom text').to.equal('News Bulletin'); // select the default template\n\n        await (0, _testHelpers.fillIn)(select, ''); // save then check server record\n\n        await (0, _testHelpers.triggerKeyEvent)('.gh-app', 'keydown', KEY_S, {\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customTemplate, 'saved custom template').to.equal('');\n      });\n      (0, _mocha.it)('disables template selector if slug matches slug-based template');\n      (0, _mocha.it)('doesn\\'t query themes endpoint unncessarily', async function () {\n        // eslint-disable-next-line\n        let themeRequests = () => {\n          return this.server.pretender.handledRequests.filter(function (request) {\n            return request.url.match(/\\/themes\\//);\n          });\n        };\n\n        this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)(themeRequests().length, 'after first open').to.equal(1);\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // hide\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // show\n\n        (0, _chai.expect)(themeRequests().length, 'after second open').to.equal(1);\n      });\n    });\n    (0, _mocha.describe)('without custom templates', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('theme', {\n          active: true,\n          name: 'example-theme',\n          package: {\n            name: 'Example Theme',\n            version: '0.1'\n          },\n          templates: []\n        });\n      });\n      (0, _mocha.it)('doesn\\'t show template selector', async function () {\n        this.server.create('post', {\n          customTemplate: 'custom-news-bulletin.hbs'\n        });\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // template form should be shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-custom-template-form]')).to.not.exist;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/editor-test\", [\"ember-cli-mirage\", \"moment\", \"ember-cli-mirage/test-support/setup-mirage\", \"sinon\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"ember-power-datepicker/test-support\", \"chai\", \"ember-power-select/test-support\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _moment, _setupMirage, _sinon, _testSupport, _mocha, _testHelpers, _testSupport2, _chai, _testSupport3, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // TODO: update ember-power-datepicker to expose modern test helpers\n  // https://github.com/cibernox/ember-power-datepicker/issues/30\n  (0, _mocha.describe)('Acceptance: Editor', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      let author = this.server.create('user'); // necesary for post-author association\n\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('does not redirect to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      let author = this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('post', {\n        authors: [author]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('displays 404 when post does not exist', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/editor/post/1');\n    });\n    (0, _mocha.it)('when logged in as a contributor, renders a save button instead of a publish menu & hides tags input', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      let author = this.server.create('user', {\n        roles: [role]\n      });\n      this.server.createList('post', 2, {\n        authors: [author]\n      });\n      this.server.loadFixtures('settings');\n      await (0, _testSupport.authenticateSession)(); // post id 1 is a draft, checking for draft behaviour now\n\n      await (0, _visit.visit)('/editor/post/1');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1'); // Expect publish menu to not exist\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]'), 'publish menu trigger').to.not.exist; // Open post settings menu\n\n      await (0, _testHelpers.click)('[data-test-psm-trigger]'); // Check to make sure that tags input doesn't exist\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-token-input]'), 'tags input').to.not.exist; // post id 2 is published, we should be redirected to index\n\n      await (0, _visit.visit)('/editor/post/2');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/posts');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      let author;\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        author = this.server.create('user', {\n          roles: [role]\n        });\n        this.server.loadFixtures('settings');\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('renders the editor correctly, PSM Publish Date and Save Button', async function () {\n        let _this$server$createLi = this.server.createList('post', 2, {\n          authors: [author]\n        }),\n            _this$server$createLi2 = _slicedToArray(_this$server$createLi, 1),\n            post1 = _this$server$createLi2[0];\n\n        let futureTime = (0, _moment.default)().tz('Etc/UTC').add(10, 'minutes'); // post id 1 is a draft, checking for draft behaviour now\n\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1'); // open post settings menu\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // should error, if the publish time is in the wrong format\n\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', 'foo');\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]').textContent.trim(), 'inline error response for invalid time').to.equal('Must be in format: \"15:00\"'); // should error, if the publish time is in the future\n        // NOTE: date must be selected first, changing the time first will save\n        // with the new time\n\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', _moment.default.tz('Etc/UTC').toDate());\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', futureTime.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]').textContent.trim(), 'inline error response for future time').to.equal('Must be in the past'); // closing the PSM will reset the invalid date/time\n\n        await (0, _testHelpers.click)('[data-test-close-settings-menu]');\n        await (0, _testHelpers.click)('[data-test-psm-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-error]'), 'date picker error after closing PSM').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'PSM date value after closing with invalid date').to.equal((0, _moment.default)(post1.publishedAt).tz('Etc/UTC').format('MM/DD/YYYY'));\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'PSM time value after closing with invalid date').to.equal((0, _moment.default)(post1.publishedAt).tz('Etc/UTC').format('HH:mm')); // saves the post with the new date\n\n        let validTime = (0, _moment.default)('2017-04-09 12:00').tz('Etc/UTC');\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', validTime.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]');\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', validTime.toDate()); // hide psm\n\n        await (0, _testHelpers.click)('[data-test-close-settings-menu]'); // checking the flow of the saving button for a draft\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'draft publish button text').to.equal('Publish');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'draft status text').to.equal('Draft'); // click on publish now\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-draft]'), 'draft publish menu is shown').to.exist;\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post schedule button text').to.equal('Schedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-published-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post publish button text').to.equal('Publish'); // Publish the post\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after draft is published').to.equal('Published');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-published]'), 'publish menu is shown after draft published').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'post status updated after draft published').to.equal('Published');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-unpublished-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published post unpublish button text').to.equal('Unpublish'); // post id 2 is a published post, checking for published post behaviour now\n\n        await (0, _visit.visit)('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value).to.equal('12/19/2015');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value).to.equal('16:25'); // saves the post with a new date\n\n        await (0, _testSupport2.datepickerSelect)('[data-test-date-time-picker-datepicker]', (0, _moment.default)('2016-05-10 10:00').toDate());\n        await (0, _testHelpers.fillIn)('[data-test-date-time-picker-time-input]', '10:00');\n        await (0, _testHelpers.blur)('[data-test-date-time-picker-time-input]'); // saving\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published button text').to.equal('Update');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after published post is updated').to.equal('Updated'); // go to settings to change the timezone\n\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-timezone]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL for settings').to.equal('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.find)('#activeTimezone option:checked').textContent.trim(), 'default timezone').to.equal('(GMT) UTC'); // select a new timezone\n\n        (0, _testHelpers.find)('#activeTimezone option[value=\"Pacific/Kwajalein\"]').selected = true;\n        await (0, _testHelpers.triggerEvent)('#activeTimezone', 'change'); // save the settings\n\n        await (0, _testHelpers.click)('.gh-btn.gh-btn-blue');\n        (0, _chai.expect)((0, _testHelpers.find)('#activeTimezone option:checked').textContent.trim(), 'new timezone after saving').to.equal('(GMT +12:00) International Date Line West'); // and now go back to the editor\n\n        await (0, _visit.visit)('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL in editor').to.equal('/editor/post/2');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'date after timezone change').to.equal('05/10/2016');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'time after timezone change').to.equal('22:00'); // unpublish\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-unpublished-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'published post unpublish button text').to.equal('Unpublish');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after published post is unpublished').to.equal('Unpublished');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-draft]'), 'draft menu is shown after unpublished').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'post status updated after unpublished').to.equal('Draft'); // schedule post\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n\n        let newFutureTime = _moment.default.tz('Pacific/Kwajalein').add(10, 'minutes');\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'draft post, schedule button text').to.equal('Schedule');\n        await (0, _testSupport2.datepickerSelect)('[data-test-publishmenu-draft] [data-test-date-time-picker-datepicker]', new Date(newFutureTime.format().replace(/\\+.*$/, '')));\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after draft is scheduled').to.equal('Scheduled');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-scheduled]'), 'publish menu is not shown after closed').to.not.exist; // expect countdown to show warning, that post will go live in x minutes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]').textContent.trim(), 'notification countdown').to.contain('Post will go live in');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'scheduled publish button text').to.equal('Scheduled');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'scheduled post status').to.equal('Scheduled'); // Re-schedule\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'scheduled post button reschedule text').to.equal('Reschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button text for a rescheduled post').to.equal('Rescheduled');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-scheduled]'), 'publish menu is not shown after closed').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'scheduled status text').to.equal('Scheduled'); // unschedule\n\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-draft-option]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after scheduled post is unscheduled').to.equal('Unschedule');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-save]').textContent.trim(), 'publish menu save button updated after scheduled post is unscheduled').to.equal('Unscheduled');\n        await (0, _testHelpers.click)('[data-test-publishmenu-cancel]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'publish button text after unschedule').to.equal('Publish');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-post-status]').textContent.trim(), 'status text after unschedule').to.equal('Draft');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]'), 'scheduled countdown after unschedule').to.not.exist;\n      });\n      (0, _mocha.it)('handles validation errors when scheduling', async function () {\n        this.server.put('/posts/:id/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Error test'\n            }]\n          });\n        });\n        let post = this.server.create('post', 1, {\n          authors: [author],\n          status: 'draft'\n        });\n        let plusTenMin = (0, _moment.default)().utc().add(10, 'minutes');\n        await (0, _visit.visit)(\"/editor/post/\".concat(post.id));\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-scheduled-option]');\n        await (0, _testSupport2.datepickerSelect)('[data-test-publishmenu-draft] [data-test-date-time-picker-datepicker]', plusTenMin.toDate());\n        await (0, _testHelpers.fillIn)('[data-test-publishmenu-draft] [data-test-date-time-picker-time-input]', plusTenMin.format('HH:mm'));\n        await (0, _testHelpers.blur)('[data-test-publishmenu-draft] [data-test-date-time-picker-time-input]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'number of alerts after failed schedule').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent, 'alert text after failed schedule').to.match(/Error test/);\n      });\n      (0, _mocha.it)('handles title validation errors correctly', async function () {\n        this.server.create('post', {\n          authors: [author]\n        }); // post id 1 is a draft, checking for draft behaviour now\n\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        await (0, _testHelpers.fillIn)('[data-test-editor-title-input]', Array(260).join('a'));\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'number of alerts after invalid title').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent, 'alert text after invalid title').to.match(/Title cannot be longer than 255 characters/);\n      }); // NOTE: these tests are specific to the mobiledoc editor\n      // it('inserts a placeholder if the title is blank', async function () {\n      //     this.server.createList('post', 1);\n      //\n      //     // post id 1 is a draft, checking for draft behaviour now\n      //     await visit('/editor/post/1');\n      //\n      //     expect(currentURL(), 'currentURL')\n      //         .to.equal('/editor/post/1');\n      //\n      //     await titleRendered();\n      //\n      //     let title = find('#koenig-title-input div');\n      //     expect(title.data('placeholder')).to.equal('Your Post Title');\n      //     expect(title.hasClass('no-content')).to.be.false;\n      //\n      //     await replaceTitleHTML('');\n      //     expect(title.hasClass('no-content')).to.be.true;\n      //\n      //     await replaceTitleHTML('test');\n      //     expect(title.hasClass('no-content')).to.be.false;\n      // });\n      //\n      // it('removes HTML from the title.', async function () {\n      //     this.server.createList('post', 1);\n      //\n      //     // post id 1 is a draft, checking for draft behaviour now\n      //     await visit('/editor/post/1');\n      //\n      //     expect(currentURL(), 'currentURL')\n      //         .to.equal('/editor/post/1');\n      //\n      //     await titleRendered();\n      //\n      //     let title = find('#koenig-title-input div');\n      //     await replaceTitleHTML('<div>TITLE&nbsp;&#09;&nbsp;&thinsp;&ensp;&emsp;TEST</div>&nbsp;');\n      //     expect(title.html()).to.equal('TITLE      TEST ');\n      // });\n\n      (0, _mocha.it)('renders first countdown notification before scheduled time', async function () {\n        let clock = _sinon.default.useFakeTimers((0, _moment.default)().valueOf());\n\n        let compareDate = (0, _moment.default)().tz('Etc/UTC').add(4, 'minutes');\n        let compareDateString = compareDate.format('MM/DD/YYYY');\n        let compareTimeString = compareDate.format('HH:mm');\n        this.server.create('post', {\n          publishedAt: _moment.default.utc().add(4, 'minutes'),\n          status: 'scheduled',\n          authors: [author]\n        });\n        this.server.create('setting', {\n          activeTimezone: 'Europe/Dublin'\n        });\n        clock.restore();\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-date-input]').value, 'scheduled date').to.equal(compareDateString);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-date-time-picker-time-input]').value, 'scheduled time').to.equal(compareTimeString); // Dropdown menu should be 'Update Post' and 'Unschedule'\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-publishmenu-trigger]').textContent.trim(), 'text in save button for scheduled post').to.equal('Scheduled'); // expect countdown to show warning, that post will go live in x minutes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-schedule-countdown]').textContent.trim(), 'notification countdown').to.contain('Post will go live in');\n      });\n      (0, _mocha.it)('shows author token input and allows changing of authors in PSM', async function () {\n        let adminRole = this.server.create('role', {\n          name: 'Adminstrator'\n        });\n        let authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        let user1 = this.server.create('user', {\n          name: 'Primary',\n          roles: [adminRole]\n        });\n        this.server.create('user', {\n          name: 'Waldo',\n          roles: [authorRole]\n        });\n        this.server.create('post', {\n          authors: [user1]\n        });\n        await (0, _visit.visit)('/editor/post/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/editor/post/1');\n        await (0, _testHelpers.click)('button.post-settings');\n        let tokens = (0, _testHelpers.findAll)('[data-test-input=\"authors\"] .ember-power-select-multiple-option');\n        (0, _chai.expect)(tokens.length).to.equal(1);\n        (0, _chai.expect)(tokens[0].textContent.trim()).to.have.string('Primary');\n        await (0, _testSupport3.selectChoose)('[data-test-input=\"authors\"]', 'Waldo');\n        let savedAuthors = this.server.schema.posts.find('1').authors.models;\n        (0, _chai.expect)(savedAuthors.length).to.equal(2);\n        (0, _chai.expect)(savedAuthors[0].name).to.equal('Primary');\n        (0, _chai.expect)(savedAuthors[1].name).to.equal('Waldo');\n      });\n      (0, _mocha.it)('autosaves when title loses focus', async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          name: 'Admin',\n          roles: [role]\n        });\n        await (0, _visit.visit)('/editor'); // NOTE: there were checks here for the title element having focus\n        // but they were very temperamental whilst running tests in the\n        // browser so they've been left out for now\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url on initial visit').to.equal('/editor/post');\n        await (0, _testHelpers.click)('[data-test-editor-title-input]');\n        await (0, _testHelpers.blur)('[data-test-editor-title-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-editor-title-input]').value, 'title value after autosave').to.equal('(Untitled)');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after autosave').to.equal('/editor/post/1');\n      });\n      (0, _mocha.it)('saves post settings fields', async function () {\n        let post = this.server.create('post', {\n          authors: [author]\n        });\n        await (0, _visit.visit)(\"/editor/post/\".concat(post.id)); // TODO: implement tests for other fields\n\n        await (0, _testHelpers.click)('[data-test-psm-trigger]'); // excerpt has validation\n\n        await (0, _testHelpers.fillIn)('[data-test-field=\"custom-excerpt\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"custom-excerpt\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"custom-excerpt\"]').textContent.trim(), 'excerpt too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customExcerpt, 'saved excerpt after validation error').to.be.null; // changing custom excerpt auto-saves\n\n        await (0, _testHelpers.fillIn)('[data-test-field=\"custom-excerpt\"]', 'Testing excerpt');\n        await (0, _testHelpers.blur)('[data-test-field=\"custom-excerpt\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).customExcerpt, 'saved excerpt').to.equal('Testing excerpt'); // -------\n        // open code injection subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"codeinjection\"]'); // header injection has validation\n\n        let headerCM = (0, _testHelpers.find)('[data-test-field=\"codeinjection-head\"] .CodeMirror').CodeMirror;\n        await headerCM.setValue(Array(65540).join('a'));\n        await (0, _testHelpers.click)(headerCM.getInputField());\n        await (0, _testHelpers.blur)(headerCM.getInputField());\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"codeinjection-head\"]').textContent.trim(), 'header injection too long error').to.match(/cannot be longer than 65535/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionHead, 'saved header injection after validation error').to.be.null; // changing header injection auto-saves\n\n        await headerCM.setValue('<script src=\"http://example.com/inject-head.js\"></script>');\n        await (0, _testHelpers.click)(headerCM.getInputField());\n        await (0, _testHelpers.blur)(headerCM.getInputField());\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionHead, 'saved header injection').to.equal('<script src=\"http://example.com/inject-head.js\"></script>'); // footer injection has validation\n\n        let footerCM = (0, _testHelpers.find)('[data-test-field=\"codeinjection-foot\"] .CodeMirror').CodeMirror;\n        await footerCM.setValue(Array(65540).join('a'));\n        await (0, _testHelpers.click)(footerCM.getInputField());\n        await (0, _testHelpers.blur)(footerCM.getInputField());\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"codeinjection-foot\"]').textContent.trim(), 'footer injection too long error').to.match(/cannot be longer than 65535/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionFoot, 'saved footer injection after validation error').to.be.null; // changing footer injection auto-saves\n\n        await footerCM.setValue('<script src=\"http://example.com/inject-foot.js\"></script>');\n        await (0, _testHelpers.click)(footerCM.getInputField());\n        await (0, _testHelpers.blur)(footerCM.getInputField());\n        (0, _chai.expect)(this.server.db.posts.find(post.id).codeinjectionFoot, 'saved footer injection').to.equal('<script src=\"http://example.com/inject-foot.js\"></script>'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"codeinjection-head\"]').length, 'header injection not present after closing subview').to.equal(0); // -------\n        // open twitter data subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"twitter-data\"]'); // twitter title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-title\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-title\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"twitter-title\"]').textContent.trim(), 'twitter title too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterTitle, 'saved twitter title after validation error').to.be.null; // changing twitter title auto-saves\n        // twitter title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-title\"]', 'Test Twitter Title');\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-title\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterTitle, 'saved twitter title').to.equal('Test Twitter Title'); // twitter description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-description\"]', Array(505).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-description\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"twitter-description\"]').textContent.trim(), 'twitter description too long error').to.match(/cannot be longer than 500/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterDescription, 'saved twitter description after validation error').to.be.null; // changing twitter description auto-saves\n        // twitter description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"twitter-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"twitter-description\"]', 'Test Twitter Description');\n        await (0, _testHelpers.blur)('[data-test-field=\"twitter-description\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).twitterDescription, 'saved twitter description').to.equal('Test Twitter Description'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"twitter-title\"]').length, 'twitter title not present after closing subview').to.equal(0); // -------\n        // open facebook data subview\n\n        await (0, _testHelpers.click)('[data-test-button=\"facebook-data\"]'); // facebook title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-title\"]', Array(302).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"og-title\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"og-title\"]').textContent.trim(), 'facebook title too long error').to.match(/cannot be longer than 300/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogTitle, 'saved facebook title after validation error').to.be.null; // changing facebook title auto-saves\n        // facebook title has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-title\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-title\"]', 'Test Facebook Title');\n        await (0, _testHelpers.blur)('[data-test-field=\"og-title\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogTitle, 'saved facebook title').to.equal('Test Facebook Title'); // facebook description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-description\"]', Array(505).join('a'));\n        await (0, _testHelpers.blur)('[data-test-field=\"og-description\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"og-description\"]').textContent.trim(), 'facebook description too long error').to.match(/cannot be longer than 500/);\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogDescription, 'saved facebook description after validation error').to.be.null; // changing facebook description auto-saves\n        // facebook description has validation\n\n        await (0, _testHelpers.click)('[data-test-field=\"og-description\"]');\n        await (0, _testHelpers.fillIn)('[data-test-field=\"og-description\"]', 'Test Facebook Description');\n        await (0, _testHelpers.blur)('[data-test-field=\"og-description\"]');\n        (0, _chai.expect)(this.server.db.posts.find(post.id).ogDescription, 'saved facebook description').to.equal('Test Facebook Description'); // closing subview switches back to main PSM view\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-psm-subview\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-field=\"og-title\"]').length, 'facebook title not present after closing subview').to.equal(0);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/error-handling-test\", [\"ember-cli-mirage\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ghost-admin/mirage/utils\"], function (_emberCliMirage, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _fileUpload, _emberMocha, _utils) {\n  \"use strict\";\n\n  let htmlErrorResponse = function htmlErrorResponse() {\n    return new _emberCliMirage.default.Response(504, {\n      'Content-Type': 'text/html'\n    }, '<!DOCTYPE html><head><title>Server Error</title></head><body>504 Gateway Timeout</body></html>');\n  };\n\n  (0, _mocha.describe)('Acceptance: Error Handling', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.describe)('VersionMismatch errors', function () {\n      (0, _mocha.describe)('logged in', function () {\n        (0, _mocha.beforeEach)(async function () {\n          let role = this.server.create('role', {\n            name: 'Administrator'\n          });\n          this.server.create('user', {\n            roles: [role]\n          });\n          return await (0, _testSupport.authenticateSession)();\n        });\n        (0, _mocha.it)('displays an alert and disables navigation when saving', async function () {\n          this.server.createList('post', 3); // mock the post save endpoint to return version mismatch\n\n          this.server.put('/posts/:id', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/posts');\n          await (0, _testHelpers.click)('.posts-list li:nth-of-type(2) a'); // select second post\n\n          await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n          await (0, _testHelpers.click)('[data-test-publishmenu-save]'); // \"Save post\"\n          // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/); // try navigating back to the content list\n\n          await (0, _testHelpers.click)('[data-test-link=\"posts\"]');\n          (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('editor.edit');\n        });\n        (0, _mocha.it)('displays alert and aborts the transition when navigating', async function () {\n          await (0, _testHelpers.visit)('/posts'); // mock the tags endpoint to return version mismatch\n\n          this.server.get('/tags/', _utils.versionMismatchResponse);\n          await (0, _testHelpers.click)('[data-test-nav=\"tags\"]'); // navigation is blocked on loading screen\n\n          (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('settings.tags_loading'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n        (0, _mocha.it)('displays alert and aborts the transition when an ember-ajax error is thrown whilst navigating', async function () {\n          this.server.get('/settings/', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/settings/tags');\n          await (0, _testHelpers.click)('[data-test-nav=\"settings\"]'); // navigation is blocked\n\n          (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('settings.general_loading'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n        (0, _mocha.it)('can be triggered when passed in to a component', async function () {\n          this.server.post('/subscribers/csv/', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/subscribers');\n          await (0, _testHelpers.click)('[data-test-link=\"import-csv\"]');\n          await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n            name: 'test.csv'\n          }); // alert is shown\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n      });\n      (0, _mocha.describe)('logged out', function () {\n        (0, _mocha.it)('displays alert', async function () {\n          this.server.post('/session', _utils.versionMismatchResponse);\n          await (0, _testHelpers.visit)('/signin');\n          await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n          await (0, _testHelpers.fillIn)('[name=\"password\"]', 'password');\n          await (0, _testHelpers.click)('.gh-btn-blue'); // has the refresh to update alert\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n          (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/refresh/);\n        });\n      });\n    });\n    (0, _mocha.describe)('CloudFlare errors', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures();\n        let roles = this.server.schema.roles.where({\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('handles Ember Data HTML response', async function () {\n        this.server.put('/posts/1/', htmlErrorResponse);\n        this.server.create('post');\n        await (0, _testHelpers.visit)('/editor/post/1');\n        await (0, _testHelpers.click)('[data-test-publishmenu-trigger]');\n        await (0, _testHelpers.click)('[data-test-publishmenu-save]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.not.match(/html>/);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/Request was rejected due to server error/);\n      });\n      (0, _mocha.it)('handles ember-ajax HTML response', async function () {\n        this.server.del('/themes/foo/', htmlErrorResponse);\n        await (0, _testHelpers.visit)('/settings/design');\n        await (0, _testHelpers.click)('[data-test-theme-id=\"foo\"] [data-test-theme-delete-button]');\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-delete-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.not.match(/html>/);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent).to.match(/Request was rejected due to server error/);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/members-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Members', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/members');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects non-admins to posts', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/members');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"members\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.describe)('as admin', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('configs');\n        let config = this.server.schema.configs.first();\n        config.update({\n          enableDeveloperExperiments: true\n        });\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('redirects to home if developer experiments is disabled', async function () {\n        let config = this.server.schema.configs.first();\n        config.update({\n          enableDeveloperExperiments: false\n        });\n        await (0, _visit.visit)('/members');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"members\"]'), 'sidebar link').to.not.exist;\n      });\n      (0, _mocha.it)('shows sidebar link which navigates to members list', async function () {\n        await (0, _visit.visit)('/settings/labs');\n        await (0, _testHelpers.click)('#labs-members');\n        await (0, _visit.visit)('/');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"members\"]'), 'sidebar link').to.exist;\n        await (0, _testHelpers.click)('[data-test-nav=\"members\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/members');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('members');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]')).to.have.text('Members');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/password-reset-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-simple-auth/test-support\", \"ember-mocha\"], function (_setupMirage, _testHelpers, _mocha, _chai, _testSupport, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Password Reset', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.describe)('request reset', function () {\n      (0, _mocha.it)('is successful with valid data', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _testHelpers.visit)('/signin');\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.click)('.forgotten-link'); // an alert with instructions is displayed\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-blue').length, 'alert count').to.equal(1);\n      });\n      (0, _mocha.it)('shows error messages with invalid data', async function () {\n        await (0, _testHelpers.visit)('/signin'); // no email provided\n\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (no email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (no email)').to.not.match('.error'); // error message shown\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('We need your email address to reset your password!'); // invalid email provided\n\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'test');\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (invalid email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (invalid email)').to.not.match('.error'); // error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('We need your email address to reset your password!'); // unknown email provided\n\n        await (0, _testHelpers.fillIn)('input[name=\"identification\"]', 'unknown@example.com');\n        await (0, _testHelpers.click)('.forgotten-link'); // email field is invalid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"identification\"]').closest('.form-group'), 'email field has error class (unknown email)').to.match('.error'); // password field is valid\n\n        (0, _chai.expect)((0, _testHelpers.find)('input[name=\"password\"]').closest('.form-group'), 'password field has error class (unknown email)').to.not.match('.error'); // error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('p.main-error').textContent.trim(), 'error message').to.equal('There is no user with that email address.');\n      });\n    }); // TODO: add tests for the change password screen\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/amp-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - AMP', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/amp');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it enables or disables AMP properly and saves it', async function () {\n        await (0, _visit.visit)('/settings/integrations/amp'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp'); // AMP is enabled by default\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-save-button]');\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            lastRequest = _this$server$pretende2[0];\n\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'amp').value).to.equal(false); // CMD-S shortcut works\n\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1),\n            newRequest = _this$server$pretende4[0];\n\n        params = JSON.parse(newRequest.requestBody);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n        (0, _chai.expect)(params.settings.findBy('key', 'amp').value).to.equal(true);\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/amp'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp'); // AMP is enabled by default\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox default').to.be.true;\n        await (0, _testHelpers.click)('[data-test-amp-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox after click').to.be.false;\n        await (0, _visit.visit)('/staff');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'unsaved changes modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL after leave without saving').to.equal('/staff');\n        await (0, _visit.visit)('/settings/integrations/amp');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL after return').to.equal('/settings/integrations/amp'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-amp-checkbox]').checked, 'AMP checkbox').to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/code-injection-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Settings - Code-Injection', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/code-injection');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, loads and saves editors correctly', async function () {\n        await (0, _visit.visit)('/settings/code-injection'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/code-injection'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Code injection - Test Blog'); // highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"code-injection\"]'), 'highlights nav menu item').to.have.class('active');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#ghost-head .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('#ghost-head .CodeMirror'), 'ghost head editor theme').to.have.class('cm-s-xq-light');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#ghost-foot .CodeMirror').length, 'ghost head codemirror element').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('#ghost-foot .CodeMirror'), 'ghost head editor theme').to.have.class('cm-s-xq-light');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            lastRequest = _this$server$pretende2[0];\n\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'codeinjection_head').value).to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Saved'); // CMD-S shortcut works\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1),\n            newRequest = _this$server$pretende4[0];\n\n        params = JSON.parse(newRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'codeinjection_head').value).to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Saved');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/design-test\", [\"ember-cli-mirage\", \"ghost-admin/utils/ctrl-or-cmd\", \"ghost-admin/mirage/config/themes\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _ctrlOrCmd, _themes, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _fileUpload, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // simulate jQuery's `:visible` pseudo-selector\n  function withText(elements) {\n    return Array.from(elements).filter(elem => elem.textContent.trim() !== '');\n  }\n\n  (0, _mocha.describe)('Acceptance: Settings - Design', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can visit /settings/design', async function () {\n        await (0, _visit.visit)('/settings/design');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('settings.design.index');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save'); // fixtures contain two nav items, check for three rows as we\n        // should have one extra that's blank\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'navigation items count').to.equal(3);\n      });\n      (0, _mocha.it)('saves navigation settings', async function () {\n        await (0, _visit.visit)('/settings/design');\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"0\"] [data-test-input=\"url\"]', '/test');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n\n        let _this$server$db$setti = this.server.db.settings.where({\n          key: 'navigation'\n        }),\n            _this$server$db$setti2 = _slicedToArray(_this$server$db$setti, 1),\n            navSetting = _this$server$db$setti2[0];\n\n        (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"Test\",\"url\":\"/test/\"},{\"label\":\"About\",\"url\":\"/about\"}]'); // don't test against .error directly as it will pick up failed\n        // tests \"pre.error\" elements\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('span.error').length, 'error messages count').to.equal(0);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'alerts count').to.equal(0);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('[data-test-error]')).length, 'validation errors count').to.equal(0);\n      });\n      (0, _mocha.it)('validates new item correctly on save', async function () {\n        await (0, _visit.visit)('/settings/design');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'number of nav items after saving with blank new item').to.equal(3);\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', '');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', 'http://invalid domain/');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'number of nav items after saving with invalid new item').to.equal(3);\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('[data-test-navitem=\"new\"] [data-test-error]')).length, 'number of invalid fields in new item').to.equal(1);\n      });\n      (0, _mocha.it)('clears unsaved settings when navigating away but warns with a confirmation dialog', async function () {\n        await (0, _visit.visit)('/settings/design');\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]', 'Test');\n        await (0, _testHelpers.blur)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]').value).to.equal('Test');\n        await (0, _visit.visit)('/settings/code-injection');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]'), 'leave without saving';\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/code-injection');\n        await (0, _visit.visit)('/settings/design');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"0\"] [data-test-input=\"label\"]').value).to.equal('Home');\n      });\n      (0, _mocha.it)('can add and remove items', async function () {\n        await (0, _visit.visit)('/settings/design');\n        await (0, _testHelpers.click)('.gh-blognav-add');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'blank label has validation error').to.not.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]', '');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]', 'New');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"label\"]').textContent.trim(), 'label validation is visible after typing').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', '');\n        await (0, _testHelpers.typeIn)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]', '/new');\n        await (0, _testHelpers.blur)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-error=\"url\"]').textContent.trim(), 'url validation is visible after typing').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]').value).to.equal(\"\".concat(window.location.origin, \"/new/\"));\n        await (0, _testHelpers.click)('.gh-blognav-add');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'number of nav items after successful add').to.equal(4);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-input=\"label\"]').value, 'new item label value after successful add').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-navitem=\"new\"] [data-test-input=\"url\"]').value, 'new item url value after successful add').to.equal(\"\".concat(window.location.origin, \"/\"));\n        (0, _chai.expect)(withText((0, _testHelpers.findAll)('[data-test-navitem] [data-test-error]')).length, 'number or validation errors shown after successful add').to.equal(0);\n        await (0, _testHelpers.click)('[data-test-navitem=\"0\"] .gh-blognav-delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-navitem]').length, 'number of nav items after successful remove').to.equal(3); // CMD-S shortcut works\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n\n        let _this$server$db$setti3 = this.server.db.settings.where({\n          key: 'navigation'\n        }),\n            _this$server$db$setti4 = _slicedToArray(_this$server$db$setti3, 1),\n            navSetting = _this$server$db$setti4[0];\n\n        (0, _chai.expect)(navSetting.value).to.equal('[{\"label\":\"About\",\"url\":\"/about\"},{\"label\":\"New\",\"url\":\"/new/\"}]');\n      });\n      (0, _mocha.it)('allows management of themes', async function () {\n        // lists available themes + active theme is highlighted\n        // theme upload\n        // - displays modal\n        // - validates mime type\n        // - validates casper.zip\n        // - handles validation errors\n        // - handles upload and close\n        // - handles upload and activate\n        // - displays overwrite warning if theme already exists\n        // theme activation\n        // - switches theme\n        // theme deletion\n        // - displays modal\n        // - deletes theme and refreshes list\n        this.server.loadFixtures('themes');\n        await (0, _visit.visit)('/settings/design'); // lists available themes (themes are specified in mirage/fixtures/settings)\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'shows correct number of themes').to.equal(3);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"] [data-test-theme-title]').textContent.trim(), 'Blog theme marked as active').to.equal('Blog (default)'); // theme upload displays modal\n\n        await (0, _testHelpers.click)('[data-test-upload-theme-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal=\"upload-theme\"]').length, 'theme upload modal displayed after button click').to.equal(1); // cancelling theme upload closes modal\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-close-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length === 0, 'upload theme modal is closed when cancelling').to.be.true; // theme upload validates mime type\n\n        await (0, _testHelpers.click)('[data-test-upload-theme-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          type: 'text/csv'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .failed').textContent, 'validation error is shown for invalid mime type').to.match(/is not supported/); // theme upload validates casper.zip\n\n        await (0, _testHelpers.click)('[data-test-upload-try-again-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'casper.zip',\n          type: 'application/zip'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .failed').textContent, 'validation error is shown when uploading casper.zip').to.match(/default Casper theme cannot be overwritten/); // theme upload handles upload errors\n\n        this.server.post('/themes/upload/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              message: 'Invalid theme'\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('[data-test-upload-try-again-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'error.zip',\n          type: 'application/zip'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .failed').textContent.trim(), 'validation error is passed through from server').to.equal('Invalid theme'); // reset to default mirage handlers\n\n        (0, _themes.default)(this.server); // theme upload handles validation errors\n\n        this.server.post('/themes/upload/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              message: 'Theme is not compatible or contains errors.',\n              type: 'ThemeValidationError',\n              details: {\n                errors: [{\n                  level: 'error',\n                  rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n                  details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.</p>',\n                  failures: [{\n                    ref: '/assets/javascripts/ui.js'\n                  }]\n                }, {\n                  level: 'error',\n                  rule: 'Templates must contain valid Handlebars.',\n                  failures: [{\n                    ref: 'index.hbs',\n                    message: 'The partial index_meta could not be found'\n                  }, {\n                    ref: 'tag.hbs',\n                    message: 'The partial index_meta could not be found'\n                  }]\n                }]\n              }\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('[data-test-upload-try-again-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'bad-theme.zip',\n          type: 'application/zip'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal h1').textContent.trim(), 'modal title after uploading invalid theme').to.equal('Invalid theme');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.theme-validation-rule-text')[1].textContent, 'top-level errors are displayed').to.match(/Templates must contain valid Handlebars/);\n        await (0, _testHelpers.click)('[data-test-toggle-details]');\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-details').textContent, 'top-level errors do not escape HTML').to.match(/The listed files should be included using the {{asset}} helper/);\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-list ul li').textContent, 'individual failures are displayed').to.match(/\\/assets\\/javascripts\\/ui\\.js/); // reset to default mirage handlers\n\n        (0, _themes.default)(this.server);\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-try-again-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.theme-validation-errors').length, '\"Try Again\" resets form after theme validation error').to.equal(0);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-image-uploader').length, '\"Try Again\" resets form after theme validation error').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal h1').textContent.trim(), '\"Try Again\" resets form after theme validation error').to.equal('Upload a theme'); // theme upload handles validation warnings\n\n        this.server.post('/themes/upload/', function (_ref) {\n          let themes = _ref.themes;\n          let theme = {\n            name: 'blackpalm',\n            package: {\n              name: 'BlackPalm',\n              version: '1.0.0'\n            }\n          };\n          themes.create(theme);\n          theme.warnings = [{\n            level: 'warning',\n            rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n            details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.  For more information, please see the <a href=\"https://docs.ghost.org/api/handlebars-themes/helpers/asset/\">asset helper documentation</a>.</p>',\n            failures: [{\n              ref: '/assets/dist/img/apple-touch-icon.png'\n            }, {\n              ref: '/assets/dist/img/favicon.ico'\n            }, {\n              ref: '/assets/dist/css/blackpalm.min.css'\n            }, {\n              ref: '/assets/dist/js/blackpalm.min.js'\n            }],\n            code: 'GS030-ASSET-REQ'\n          }];\n          return new _emberCliMirage.default.Response(200, {}, {\n            themes: [theme]\n          });\n        });\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'warning-theme.zip',\n          type: 'application/zip'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal h1').textContent.trim(), 'modal title after uploading theme with warnings').to.equal('Upload successful with warnings');\n        await (0, _testHelpers.click)('[data-test-toggle-details]');\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-details').textContent, 'top-level warnings are displayed').to.match(/The listed files should be included using the {{asset}} helper/);\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-list ul li').textContent, 'individual warning failures are displayed').to.match(/\\/assets\\/dist\\/img\\/apple-touch-icon\\.png/); // reset to default mirage handlers\n\n        (0, _themes.default)(this.server);\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-close-button]'); // theme upload handles success then close\n\n        await (0, _testHelpers.click)('[data-test-upload-theme-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'theme-1.zip',\n          type: 'application/zip'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal h1').textContent.trim(), 'modal header after successful upload').to.equal('Upload successful!');\n        (0, _chai.expect)((0, _testHelpers.find)('.modal-body').textContent, 'modal displays theme name after successful upload').to.match(/\"Test 1 - 0\\.1\" uploaded successfully/);\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'number of themes in list grows after upload').to.equal(5);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"] [data-test-theme-title]').textContent.trim(), 'newly uploaded theme is not active').to.equal('Blog (default)');\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-close-button]'); // theme upload handles success then activate\n\n        await (0, _testHelpers.click)('[data-test-upload-theme-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'theme-2.zip',\n          type: 'application/zip'\n        });\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-activate-now-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'number of themes in list grows after upload and activate').to.equal(6);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"] [data-test-theme-title]').textContent.trim(), 'newly uploaded+activated theme is active').to.equal('Test 2'); // theme activation switches active theme\n\n        await (0, _testHelpers.click)('[data-test-theme-id=\"casper\"] [data-test-theme-activate-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-id=\"test-2\"] .apps-card-app').classList.contains('theme-list-item--active'), 'previously active theme is not active').to.be.false;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-id=\"casper\"] .apps-card-app').classList.contains('theme-list-item--active'), 'activated theme is active').to.be.true; // theme activation shows errors\n\n        this.server.put('themes/:theme/activate', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              message: 'Theme is not compatible or contains errors.',\n              type: 'ThemeValidationError',\n              details: {\n                checkedVersion: '2.x',\n                name: 'casper',\n                version: '2.9.7',\n                errors: [{\n                  level: 'error',\n                  rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n                  details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.</p>',\n                  failures: [{\n                    ref: '/assets/javascripts/ui.js'\n                  }]\n                }, {\n                  level: 'error',\n                  fatal: true,\n                  rule: 'Templates must contain valid Handlebars.',\n                  failures: [{\n                    ref: 'index.hbs',\n                    message: 'The partial index_meta could not be found'\n                  }, {\n                    ref: 'tag.hbs',\n                    message: 'The partial index_meta could not be found'\n                  }]\n                }]\n              }\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('[data-test-theme-id=\"test-2\"] [data-test-theme-activate-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-warnings-modal]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-warnings-title]').textContent.trim(), 'modal title after activating invalid theme').to.equal('Activation failed');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-fatal-errors]').textContent, 'top-level errors are displayed in activation errors').to.match(/Templates must contain valid Handlebars/);\n        await (0, _testHelpers.click)('[data-test-theme-errors] [data-test-toggle-details]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-errors] .theme-validation-details').textContent, 'top-level errors do not escape HTML in activation errors').to.match(/The listed files should be included using the {{asset}} helper/);\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-list ul li').textContent, 'individual failures are displayed in activation errors').to.match(/\\/assets\\/javascripts\\/ui\\.js/); // restore default mirage handlers\n\n        (0, _themes.default)(this.server);\n        await (0, _testHelpers.click)('[data-test-modal-close-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-warnings-modal]')).to.not.exist; // theme activation shows warnings\n\n        this.server.put('themes/:theme/activate', function (_ref2, _ref3) {\n          let themes = _ref2.themes;\n          let params = _ref3.params;\n          themes.all().update('active', false);\n          let theme = themes.findBy({\n            name: params.theme\n          }).update({\n            active: true\n          });\n          theme.update({\n            warnings: [{\n              level: 'warning',\n              rule: 'Assets such as CSS & JS must use the <code>{{asset}}</code> helper',\n              details: '<p>The listed files should be included using the <code>{{asset}}</code> helper.  For more information, please see the <a href=\"https://docs.ghost.org/api/handlebars-themes/helpers/asset/\">asset helper documentation</a>.</p>',\n              failures: [{\n                ref: '/assets/dist/img/apple-touch-icon.png'\n              }, {\n                ref: '/assets/dist/img/favicon.ico'\n              }, {\n                ref: '/assets/dist/css/blackpalm.min.css'\n              }, {\n                ref: '/assets/dist/js/blackpalm.min.js'\n              }],\n              code: 'GS030-ASSET-REQ'\n            }]\n          });\n          return {\n            themes: [theme]\n          };\n        });\n        await (0, _testHelpers.click)('[data-test-theme-id=\"test-2\"] [data-test-theme-activate-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-warnings-modal]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-warnings-title]').textContent.trim(), 'modal title after activating theme with warnings').to.equal('Activation successful with warnings');\n        await (0, _testHelpers.click)('[data-test-toggle-details]');\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-details').textContent, 'top-level warnings are displayed in activation warnings').to.match(/The listed files should be included using the {{asset}} helper/);\n        (0, _chai.expect)((0, _testHelpers.find)('.theme-validation-list ul li').textContent, 'individual warning failures are displayed in activation warnings').to.match(/\\/assets\\/dist\\/img\\/apple-touch-icon\\.png/); // restore default mirage handlers\n\n        (0, _themes.default)(this.server);\n        await (0, _testHelpers.click)('[data-test-modal-close-button]'); // reactivate casper to continue tests\n\n        await (0, _testHelpers.click)('[data-test-theme-id=\"casper\"] [data-test-theme-activate-button]'); // theme deletion displays modal\n\n        await (0, _testHelpers.click)('[data-test-theme-id=\"test-1\"] [data-test-theme-delete-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-delete-theme-modal]').length, 'theme deletion modal displayed after button click').to.equal(1); // cancelling theme deletion closes modal\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-cancel-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length === 0, 'delete theme modal is closed when cancelling').to.be.true; // confirming theme deletion closes modal and refreshes list\n\n        await (0, _testHelpers.click)('[data-test-theme-id=\"test-1\"] [data-test-theme-delete-button]');\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-delete-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length === 0, 'delete theme modal closes after deletion').to.be.true;\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'number of themes in list shrinks after delete').to.equal(5);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-title]').textContent, 'correct theme is removed from theme list after deletion').to.not.match(/Test 1/); // validation errors are handled when deleting a theme\n\n        this.server.del('/themes/:theme/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              message: 'Can\\'t delete theme'\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('[data-test-theme-id=\"test-2\"] [data-test-theme-delete-button]');\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-delete-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length === 0, 'delete theme modal closes after failed deletion').to.be.true;\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length, 'alert is shown when deletion fails').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-alert').textContent, 'failed deletion alert has correct text').to.match(/Can't delete theme/); // restore default mirage handlers\n\n        (0, _themes.default)(this.server);\n      });\n      (0, _mocha.it)('can delete then re-upload the same theme', async function () {\n        this.server.loadFixtures('themes'); // mock theme upload to emulate uploading theme with same id\n\n        this.server.post('/themes/upload/', function (_ref4) {\n          let themes = _ref4.themes;\n          let theme = themes.create({\n            name: 'foo',\n            package: {\n              name: 'Foo',\n              version: '0.1'\n            }\n          });\n          return {\n            themes: [theme]\n          };\n        });\n        await (0, _visit.visit)('/settings/design');\n        await (0, _testHelpers.click)('[data-test-theme-id=\"foo\"] [data-test-theme-delete-button]');\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-delete-button]');\n        await (0, _testHelpers.click)('[data-test-upload-theme-button]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'foo.zip',\n          type: 'application/zip'\n        }); // this will fail if upload failed because there won't be an activate now button\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-activate-now-button]');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/general-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ghost-admin/mirage/config/uploads\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-test-helpers/wait\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _uploads, _setupMirage, _wait, _testSupport, _mocha, _testHelpers, _chai, _fileUpload, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Settings - General', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/general');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders, handles image uploads', async function () {\n        await (0, _visit.visit)('/settings/general'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - Test Blog'); // highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"settings\"]'), 'highlights nav menu item').to.have.class('active');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save settings');\n        await (0, _testHelpers.click)('[data-test-toggle-pub-info]');\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'New Blog Title');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - General - New Blog Title'); // blog icon upload\n        // -------------------------------------------------------------- //\n        // has fixture icon\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-icon-img]').getAttribute('src'), 'initial icon src').to.equal('/content/images/2014/Feb/favicon.ico'); // delete removes icon + shows button\n\n        await (0, _testHelpers.click)('[data-test-delete-image=\"icon\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-icon-img]'), 'icon img after removal').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"icon\"]'), 'icon upload button after removal').to.exist; // select file\n\n        (0, _fileUpload.fileUpload)('[data-test-file-input=\"icon\"] input', ['test'], {\n          name: 'pub-icon.ico',\n          type: 'image/x-icon'\n        }); // check progress bar exists during upload\n\n        Ember.run.later(() => {\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-setting=\"icon\"] [data-test-progress-bar]'), 'icon upload progress bar').to.exist;\n        }, 50); // wait for upload to finish and check image is shown\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-icon-img]').getAttribute('src'), 'icon img after upload').to.match(/pub-icon\\.ico$/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"icon\"]'), 'icon upload button after upload').to.not.exist; // failed upload shows error\n\n        this.server.post('/images/upload/', function () {\n          return {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Wrong icon size'\n            }]\n          };\n        }, 422);\n        await (0, _testHelpers.click)('[data-test-delete-image=\"icon\"]');\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"icon\"] input', ['test'], {\n          name: 'pub-icon.ico',\n          type: 'image/x-icon'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"icon\"]').textContent.trim(), 'failed icon upload message').to.equal('Wrong icon size'); // reset upload endpoints\n\n        (0, _uploads.default)(this.server); // blog logo upload\n        // -------------------------------------------------------------- //\n        // has fixture icon\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-logo-img]').getAttribute('src'), 'initial logo src').to.equal('/content/images/2013/Nov/logo.png'); // delete removes logo + shows button\n\n        await (0, _testHelpers.click)('[data-test-delete-image=\"logo\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-logo-img]'), 'logo img after removal').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"logo\"]'), 'logo upload button after removal').to.exist; // select file\n\n        (0, _fileUpload.fileUpload)('[data-test-file-input=\"logo\"] input', ['test'], {\n          name: 'pub-logo.png',\n          type: 'image/png'\n        }); // check progress bar exists during upload\n\n        Ember.run.later(() => {\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-setting=\"logo\"] [data-test-progress-bar]'), 'logo upload progress bar').to.exist;\n        }, 50); // wait for upload to finish and check image is shown\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-logo-img]').getAttribute('src'), 'logo img after upload').to.match(/pub-logo\\.png$/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"logo\"]'), 'logo upload button after upload').to.not.exist; // failed upload shows error\n\n        this.server.post('/images/upload/', function () {\n          return {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Wrong logo size'\n            }]\n          };\n        }, 422);\n        await (0, _testHelpers.click)('[data-test-delete-image=\"logo\"]');\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"logo\"] input', ['test'], {\n          name: 'pub-logo.png',\n          type: 'image/png'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"logo\"]').textContent.trim(), 'failed logo upload message').to.equal('Wrong logo size'); // reset upload endpoints\n\n        (0, _uploads.default)(this.server); // blog cover upload\n        // -------------------------------------------------------------- //\n        // has fixture icon\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-cover-img]').getAttribute('src'), 'initial coverImage src').to.equal('/content/images/2014/Feb/cover.jpg'); // delete removes coverImage + shows button\n\n        await (0, _testHelpers.click)('[data-test-delete-image=\"coverImage\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-coverImage-img]'), 'coverImage img after removal').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"coverImage\"]'), 'coverImage upload button after removal').to.exist; // select file\n\n        (0, _fileUpload.fileUpload)('[data-test-file-input=\"coverImage\"] input', ['test'], {\n          name: 'pub-coverImage.png',\n          type: 'image/png'\n        }); // check progress bar exists during upload\n\n        Ember.run.later(() => {\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-setting=\"coverImage\"] [data-test-progress-bar]'), 'coverImage upload progress bar').to.exist;\n        }, 50); // wait for upload to finish and check image is shown\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-cover-img]').getAttribute('src'), 'coverImage img after upload').to.match(/pub-coverImage\\.png$/);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-image-upload-btn=\"coverImage\"]'), 'coverImage upload button after upload').to.not.exist; // failed upload shows error\n\n        this.server.post('/images/upload/', function () {\n          return {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Wrong coverImage size'\n            }]\n          };\n        }, 422);\n        await (0, _testHelpers.click)('[data-test-delete-image=\"coverImage\"]');\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"coverImage\"] input', ['test'], {\n          name: 'pub-coverImage.png',\n          type: 'image/png'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"coverImage\"]').textContent.trim(), 'failed coverImage upload message').to.equal('Wrong coverImage size'); // reset upload endpoints\n\n        (0, _uploads.default)(this.server); // CMD-S shortcut works\n        // -------------------------------------------------------------- //\n\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'CMD-S Test');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // we've already saved in this test so there's no on-screen indication\n        // that we've had another save, check the request was fired instead\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            lastRequest = _this$server$pretende2[0];\n\n        let params = JSON.parse(lastRequest.requestBody);\n        (0, _chai.expect)(params.settings.findBy('key', 'title').value).to.equal('CMD-S Test');\n      });\n      (0, _mocha.it)('renders timezone selector correctly', async function () {\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-timezone]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.findAll)('#activeTimezone option').length, 'available timezones').to.equal(66);\n        (0, _chai.expect)((0, _testHelpers.find)('#activeTimezone option:checked').textContent.trim()).to.equal('(GMT) UTC');\n        (0, _testHelpers.find)('#activeTimezone option[value=\"Africa/Cairo\"]').selected = true;\n        await (0, _testHelpers.triggerEvent)('#activeTimezone', 'change');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('#activeTimezone option:checked').textContent.trim()).to.equal('(GMT +2:00) Cairo, Egypt');\n      });\n      (0, _mocha.it)('handles private blog settings correctly', async function () {\n        await (0, _visit.visit)('/settings/general'); // handles private blog settings correctly\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'isPrivate checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-private-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'isPrivate checkbox').to.be.true;\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-password-input]').length, 'password input').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-input]').value, 'password default value').to.not.equal('');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', '');\n        await (0, _testHelpers.blur)('[data-test-password-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-error]').textContent.trim(), 'empty password error').to.equal('Password must be supplied');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'asdfg');\n        await (0, _testHelpers.blur)('[data-test-password-input]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-password-error]').textContent.trim(), 'present password error').to.equal('');\n      });\n      (0, _mocha.it)('handles social blog settings correctly', async function () {\n        let testSocialInput = async function testSocialInput(type, input, expectedValue) {\n          let expectedError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n          await (0, _testHelpers.fillIn)(\"[data-test-\".concat(type, \"-input]\"), input);\n          await (0, _testHelpers.blur)(\"[data-test-\".concat(type, \"-input]\"));\n          (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-\".concat(type, \"-input]\")).value, \"\".concat(type, \" value for \").concat(input)).to.equal(expectedValue);\n          (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-\".concat(type, \"-error]\")).textContent.trim(), \"\".concat(type, \" validation response for \").concat(input)).to.equal(expectedError);\n          (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-\".concat(type, \"-input]\")).closest('.form-group').classList.contains('error'), \"\".concat(type, \" input should be in error state with '\").concat(input, \"'\")).to.equal(!!expectedError);\n        };\n\n        let testFacebookValidation = async function testFacebookValidation() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return testSocialInput('facebook', ...args);\n        };\n\n        let testTwitterValidation = async function testTwitterValidation() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return testSocialInput('twitter', ...args);\n        };\n\n        await (0, _visit.visit)('/settings/general');\n        await (0, _testHelpers.click)('[data-test-toggle-social]'); // validates a facebook url correctly\n        // loads fixtures and performs transform\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'initial facebook value').to.equal('https://www.facebook.com/test');\n        await (0, _testHelpers.focus)('[data-test-facebook-input]');\n        await (0, _testHelpers.blur)('[data-test-facebook-input]'); // regression test: we still have a value after the input is\n        // focused and then blurred without any changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n        await testFacebookValidation('facebook.com/username', 'https://www.facebook.com/username');\n        await testFacebookValidation('testuser', 'https://www.facebook.com/testuser');\n        await testFacebookValidation('ab99', 'https://www.facebook.com/ab99');\n        await testFacebookValidation('page/ab99', 'https://www.facebook.com/page/ab99');\n        await testFacebookValidation('page/*(&*(%%))', 'https://www.facebook.com/page/*(&*(%%))');\n        await testFacebookValidation('facebook.com/pages/some-facebook-page/857469375913?ref=ts', 'https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n        await testFacebookValidation('https://www.facebook.com/groups/savethecrowninn', 'https://www.facebook.com/groups/savethecrowninn');\n        await testFacebookValidation('http://github.com/username', 'http://github.com/username', 'The URL must be in a format like https://www.facebook.com/yourPage');\n        await testFacebookValidation('http://github.com/pages/username', 'http://github.com/pages/username', 'The URL must be in a format like https://www.facebook.com/yourPage'); // validates a twitter url correctly\n        // loads fixtures and performs transform\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'initial twitter value').to.equal('https://twitter.com/test');\n        await (0, _testHelpers.focus)('[data-test-twitter-input]');\n        await (0, _testHelpers.blur)('[data-test-twitter-input]'); // regression test: we still have a value after the input is\n        // focused and then blurred without any changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n        await testTwitterValidation('twitter.com/username', 'https://twitter.com/username');\n        await testTwitterValidation('testuser', 'https://twitter.com/testuser');\n        await testTwitterValidation('http://github.com/username', 'https://twitter.com/username');\n        await testTwitterValidation('*(&*(%%))', '*(&*(%%))', 'The URL must be in a format like https://twitter.com/yourUsername');\n        await testTwitterValidation('thisusernamehasmorethan15characters', 'thisusernamehasmorethan15characters', 'Your Username is not a valid Twitter Username');\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.false;\n        await (0, _testHelpers.click)('[data-test-toggle-pub-info]');\n        await (0, _testHelpers.fillIn)('[data-test-title-input]', 'New Blog Title');\n        await (0, _testHelpers.click)('[data-test-private-checkbox]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.true;\n        await (0, _visit.visit)('/settings/staff');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff');\n        await (0, _visit.visit)('/settings/general');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/general'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-private-checkbox]').checked, 'private blog checkbox').to.be.false;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-title-input]').textContent.trim(), 'Blog title').to.equal('');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/integrations-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Custom', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.describe)('access permissions', function () {\n      (0, _mocha.beforeEach)(function () {\n        this.server.create('integration', {\n          name: 'Test'\n        });\n      });\n      (0, _mocha.it)('redirects /integrations/ to signin when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n      });\n      (0, _mocha.it)('redirects /integrations/ to staff page when authenticated as contributor', async function () {\n        let role = this.server.create('role', {\n          name: 'Contributor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n      });\n      (0, _mocha.it)('redirects /integrations/ to staff page when authenticated as author', async function () {\n        let role = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n      });\n      (0, _mocha.it)('redirects /integrations/ to staff page when authenticated as editor', async function () {\n        let role = this.server.create('role', {\n          name: 'Editor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to signin when not authenticated', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to staff page when authenticated as contributor', async function () {\n        let role = this.server.create('role', {\n          name: 'Contributor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to staff page when authenticated as author', async function () {\n        let role = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n      });\n      (0, _mocha.it)('redirects /integrations/:id/ to staff page when authenticated as editor', async function () {\n        let role = this.server.create('role', {\n          name: 'Editor'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        await (0, _testSupport.authenticateSession)();\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n      });\n    });\n    (0, _mocha.describe)('navigation', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('renders correctly', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // slack is not configured in the fixtures\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-app=\"slack\"] [data-test-app-status]').textContent.trim(), 'slack app status').to.equal('Configure'); // amp is enabled in the fixtures\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-app=\"amp\"] [data-test-app-status]').textContent.trim(), 'amp app status').to.equal('Active');\n      });\n      (0, _mocha.it)('it redirects to Slack when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"slack\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n      });\n      (0, _mocha.it)('it redirects to AMP when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"amp\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/amp');\n      });\n      (0, _mocha.it)('it redirects to Unsplash when clicking on the grid', async function () {\n        await (0, _visit.visit)('/settings/integrations'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations');\n        await (0, _testHelpers.click)('[data-test-link=\"unsplash\"]'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash');\n      });\n    });\n    (0, _mocha.describe)('custom integrations', function () {\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('configs');\n        let config = this.server.schema.configs.first();\n        config.update({\n          enableDeveloperExperiments: true\n        });\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('handles 404', async function () {\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n      });\n      (0, _mocha.it)('can add new integration', async function () {\n        // sanity check\n        (0, _chai.expect)(this.server.db.integrations.length, 'number of integrations in db at start').to.equal(0);\n        (0, _chai.expect)(this.server.db.apiKeys.length, 'number of apiKeys in db at start').to.equal(0); // blank slate\n\n        await (0, _visit.visit)('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'initial blank slate').to.exist; // new integration modal opens/closes\n\n        await (0, _testHelpers.click)('[data-test-button=\"new-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking new').to.equal('/settings/integrations/new');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after clicking new').to.exist;\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-new-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after clicking cancel').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'blank slate after cancelled creation').to.exist; // new integration validations\n\n        await (0, _testHelpers.click)('[data-test-button=\"new-integration\"]');\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent, 'name error after create with blank field').to.have.string('enter a name');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-integration-name\"]', 'Duplicate');\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent, 'name error after create with duplicate name').to.have.string('already been used'); // successful creation\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-integration-name\"]', 'Test');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-integration-name\"]').textContent.trim(), 'name error after typing in field').to.be.empty;\n        await (0, _testHelpers.click)('[data-test-button=\"create-integration\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-integration\"]'), 'modal after successful create').to.not.exist;\n        (0, _chai.expect)(this.server.db.integrations.length, 'number of integrations in db after create').to.equal(1); // mirage sanity check\n\n        (0, _chai.expect)(this.server.db.apiKeys.length, 'number of api keys in db after create').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after integration creation').to.equal('/settings/integrations/1'); // test navigation back to list then back to new integration\n\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"Back\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-blank=\"custom-integrations\"]'), 'blank slate after creation').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-custom-integration]').length, 'number of custom integrations after creation').to.equal(1);\n        await (0, _testHelpers.click)(\"[data-test-integration=\\\"1\\\"]\");\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking integration in list').to.equal('/settings/integrations/1');\n      });\n      (0, _mocha.it)('can manage an integration', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'initial URL').to.equal('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title]').textContent, 'screen title').to.have.string('Integration 1'); // fields have expected values\n        // TODO: add test for logo\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').value, 'initial name value').to.equal('Integration 1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"description\"]').value, 'initial description value').to.equal('');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"content-key\"]'), 'content key text').to.have.trimmed.text('integration-1_content_key-12345');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"admin-key\"]'), 'admin key text').to.have.trimmed.text('integration-1_admin_key-12345');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"api-url\"]'), 'api url text').to.have.trimmed.text(window.location.origin); // it can modify integration fields and has validation\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent.trim(), 'initial name error').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', '');\n        await (0, _testHelpers.triggerEvent)('[data-test-input=\"name\"]', 'blur');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent, 'name validation for blank string').to.have.string('enter a name');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]');\n        (0, _chai.expect)(this.server.schema.integrations.first().name, 'db integration name after failed save').to.equal('Integration 1');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Test Integration');\n        await (0, _testHelpers.triggerEvent)('[data-test-input=\"name\"]', 'blur');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"name\"]').textContent.trim(), 'name error after valid entry').to.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-input=\"description\"]', 'Description for Test Integration');\n        await (0, _testHelpers.triggerEvent)('[data-test-input=\"description\"]', 'blur');\n        await (0, _testHelpers.click)('[data-test-button=\"save\"]'); // changes are reflected in the integrations list\n\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after saving and clicking \"back\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"name\"]').textContent.trim(), 'integration name after save').to.equal('Test Integration');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"description\"]').textContent.trim(), 'integration description after save').to.equal('Description for Test Integration');\n        await (0, _testHelpers.click)('[data-test-integration=\"1\"]'); // warns of unsaved changes when leaving\n\n        await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Unsaved test');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal shown when navigating with unsaved changes').to.exist;\n        await (0, _testHelpers.click)('[data-test-stay-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal is closed after clicking \"stay\"').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"stay\"').to.equal('/settings/integrations/1');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        await (0, _testHelpers.click)('[data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'modal is closed after clicking \"leave\"').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"leave\"').to.equal('/settings/integrations');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-integration=\"1\"] [data-test-text=\"name\"]').textContent.trim(), 'integration name after leaving unsaved changes').to.equal('Test Integration');\n      });\n      (0, _mocha.it)('can manage an integration\\'s webhooks', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-webhooks-blank-slate]')).to.exist; // open new webhook modal\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-webhook\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"] [data-test-text=\"title\"]').textContent).to.have.string('New webhook'); // can cancel new webhook\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-webhook\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.not.exist; // create new webhook\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-webhook\"]');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"webhook-name\"]', 'First webhook');\n        await (0, _testHelpers.fillIn)('[data-test-select=\"webhook-event\"]', 'site.changed');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"webhook-targetUrl\"]', 'https://example.com/first-webhook');\n        await (0, _testHelpers.click)('[data-test-button=\"save-webhook\"]'); // modal closed and 1 webhook listed with correct details\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-webhook-row]')).to.exist;\n        let row = (0, _testHelpers.find)('[data-test-webhook-row=\"1\"]');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"name\"]').textContent).to.have.string('First webhook');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"event\"]').textContent).to.have.string('Site changed (rebuild)');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"targetUrl\"]').textContent).to.have.string('https://example.com/first-webhook');\n        (0, _chai.expect)(row.querySelector('[data-test-text=\"last-triggered\"]').textContent).to.have.string('Not triggered'); // click edit webhook link\n\n        await (0, _testHelpers.click)('[data-test-webhook-row=\"1\"] [data-test-link=\"edit-webhook\"]'); // modal appears and has correct title\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"]')).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"webhook-form\"] [data-test-text=\"title\"]').textContent).to.have.string('Edit webhook');\n      }); // test to ensure the `value=description` passed to `gh-text-input` is `readonly`\n\n      (0, _mocha.it)('doesn\\'t show unsaved changes modal after placing focus on description field', async function () {\n        this.server.create('integration');\n        await (0, _visit.visit)('/settings/integrations/1');\n        await (0, _testHelpers.click)('[data-test-input=\"description\"]');\n        await (0, _testHelpers.triggerEvent)('[data-test-input=\"description\"]', 'blur');\n        await (0, _testHelpers.click)('[data-test-link=\"integrations-back\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"unsaved-settings\"]'), 'unsaved changes modal is not shown').to.not.exist;\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/integrations');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/labs-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _mocha, _testHelpers, _chai, _fileUpload, _emberMocha, _visit) {\n  \"use strict\";\n\n  // import wait from 'ember-test-helpers/wait';\n  // import {timeout} from 'ember-concurrency';\n  (0, _mocha.describe)('Acceptance: Settings - Labs', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/labs');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n\n      _mocha.it.skip('it renders, loads modals correctly', async function () {\n        await (0, _visit.visit)('/settings/labs'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/labs'); // has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Labs - Test Blog'); // highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"labs\"]'), 'highlights nav menu item').to.have.class('active');\n        await (0, _testHelpers.click)('#settings-resetdb .js-delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal .modal-content').length, 'modal element').to.equal(1);\n        await (0, _testHelpers.click)('.fullscreen-modal .modal-footer .gh-btn');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal element').to.equal(0);\n      });\n\n      (0, _mocha.it)('can upload/download redirects', async function () {\n        await (0, _visit.visit)('/settings/labs'); // successful upload\n\n        this.server.post('/redirects/json/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects.json',\n          type: 'application/json'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // // shows success button\n        // let buttons = findAll('[data-test-button=\"upload-redirects\"]');\n        // expect(buttons.length, 'no of success buttons').to.equal(1);\n        // expect(\n        //     buttons[0],\n        //     'success button is green'\n        // ).to.have.class('gh-btn-green);\n        // expect(\n        //     button.textContent,\n        //     'success button text'\n        // ).to.have.string('Uploaded');\n        //\n        // await wait();\n        // returned to normal button\n\n        let buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-redirects\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-success buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'post-success button doesn\\'t have success class').to.not.have.class('gh-btn-green');\n        (0, _chai.expect)(buttons[0].textContent, 'post-success button text').to.have.string('Upload redirects'); // failed upload\n\n        this.server.post('/redirects/json/', {\n          errors: [{\n            type: 'BadRequestError',\n            message: 'Test failure message'\n          }]\n        }, 400);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects-bad.json',\n          type: 'application/json'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // shows failure button\n        // buttons = findAll('[data-test-button=\"upload-redirects\"]');\n        // expect(buttons.length, 'no of failure buttons').to.equal(1);\n        // expect(\n        //     buttons[0],\n        //     'failure button is red'\n        // ).to.have.class('gh-btn-red);\n        // expect(\n        //     buttons[0].textContent,\n        //     'failure button text'\n        // ).to.have.string('Upload Failed');\n        //\n        // await wait();\n        // shows error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"redirects\"]').textContent.trim(), 'upload error text').to.have.string('Test failure message'); // returned to normal button\n\n        buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-redirects\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-failure buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'post-failure button doesn\\'t have failure class').to.not.have.class('gh-btn-red');\n        (0, _chai.expect)(buttons[0].textContent, 'post-failure button text').to.have.string('Upload redirects'); // successful upload clears error\n\n        this.server.post('/redirects/json/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"redirects\"] input', ['test'], {\n          name: 'redirects-bad.json',\n          type: 'application/json'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"redirects\"]')).to.not.exist; // can download redirects.json\n\n        await (0, _testHelpers.click)('[data-test-link=\"download-redirects\"]');\n        let iframe = document.querySelector('#iframeDownload');\n        (0, _chai.expect)(iframe.getAttribute('src')).to.have.string('/redirects/json/');\n      });\n      (0, _mocha.it)('can upload/download routes.yaml', async function () {\n        await (0, _visit.visit)('/settings/labs'); // successful upload\n\n        this.server.post('/settings/routes/yaml/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes.yaml',\n          type: 'application/x-yaml'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // // shows success button\n        // let button = find('[data-test-button=\"upload-routes\"]');\n        // expect(button.length, 'no of success buttons').to.equal(1);\n        // expect(\n        //     button.hasClass('gh-btn-green'),\n        //     'success button is green'\n        // ).to.be.true;\n        // expect(\n        //     button.text().trim(),\n        //     'success button text'\n        // ).to.have.string('Uploaded');\n        //\n        // await wait();\n        // returned to normal button\n\n        let buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-routes\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-success buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'routes post-success button doesn\\'t have success class').to.not.have.class('gh-btn-green');\n        (0, _chai.expect)(buttons[0].textContent, 'routes post-success button text').to.have.string('Upload routes YAML'); // failed upload\n\n        this.server.post('/settings/routes/yaml/', {\n          errors: [{\n            type: 'BadRequestError',\n            message: 'Test failure message'\n          }]\n        }, 400);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes-bad.yaml',\n          type: 'application/x-yaml'\n        }); // TODO: tests for the temporary success/failure state have been\n        // disabled because they were randomly failing\n        // this should be half-way through button reset timeout\n        // await timeout(50);\n        //\n        // shows failure button\n        // button = find('[data-test-button=\"upload-routes\"]');\n        // expect(button.length, 'no of failure buttons').to.equal(1);\n        // expect(\n        //     button.hasClass('gh-btn-red'),\n        //     'failure button is red'\n        // ).to.be.true;\n        // expect(\n        //     button.text().trim(),\n        //     'failure button text'\n        // ).to.have.string('Upload Failed');\n        //\n        // await wait();\n        // shows error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"routes\"]').textContent, 'routes upload error text').to.have.string('Test failure message'); // returned to normal button\n\n        buttons = (0, _testHelpers.findAll)('[data-test-button=\"upload-routes\"]');\n        (0, _chai.expect)(buttons.length, 'no of post-failure buttons').to.equal(1);\n        (0, _chai.expect)(buttons[0], 'routes post-failure button doesn\\'t have failure class').to.not.have.class('gh-btn-red');\n        (0, _chai.expect)(buttons[0].textContent, 'routes post-failure button text').to.have.string('Upload routes YAML'); // successful upload clears error\n\n        this.server.post('/settings/routes/yaml/', {}, 200);\n        await (0, _fileUpload.fileUpload)('[data-test-file-input=\"routes\"] input', ['test'], {\n          name: 'routes-good.yaml',\n          type: 'application/x-yaml'\n        });\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"routes\"]')).to.not.exist; // can download redirects.json\n\n        await (0, _testHelpers.click)('[data-test-link=\"download-routes\"]');\n        let iframe = document.querySelector('#iframeDownload');\n        (0, _chai.expect)(iframe.getAttribute('src')).to.have.string('/settings/routes/yaml/');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/slack-test\", [\"ember-cli-mirage\", \"ghost-admin/utils/ctrl-or-cmd\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_emberCliMirage, _ctrlOrCmd, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Slack', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/slack');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it validates and saves slack settings properly', async function () {\n        await (0, _visit.visit)('/settings/integrations/slack'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'notacorrecturl');\n        await (0, _testHelpers.click)('[data-test-save-button]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]').textContent.trim(), 'inline validation response').to.equal('The URL must be in a format like https://hooks.slack.com/services/<your personal key>'); // CMD-S shortcut works\n\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.fillIn)('[data-test-slack-username-input]', 'SlackBot');\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        });\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            newRequest = _this$server$pretende2[0];\n\n        let params = JSON.parse(newRequest.requestBody);\n\n        let _JSON$parse = JSON.parse(params.settings.findBy('key', 'slack').value),\n            _JSON$parse2 = _slicedToArray(_JSON$parse, 1),\n            result = _JSON$parse2[0];\n\n        (0, _chai.expect)(result.url).to.equal('https://hooks.slack.com/services/1275958430');\n        (0, _chai.expect)(result.username).to.equal('SlackBot');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]'), 'inline validation response').to.not.exist;\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.click)('[data-test-send-notification-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notification').length, 'number of notifications').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"slack-url\"]'), 'inline validation response').to.not.exist;\n        this.server.put('/settings/', function () {\n          return new _emberCliMirage.default.Response(422, {}, {\n            errors: [{\n              type: 'ValidationError',\n              message: 'Test error'\n            }]\n          });\n        });\n        await (0, _testHelpers.click)('.gh-notification .gh-notification-close');\n        await (0, _testHelpers.click)('[data-test-send-notification-button]'); // we shouldn't try to send the test request if the save fails\n\n        let _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1),\n            lastRequest = _this$server$pretende4[0];\n\n        (0, _chai.expect)(lastRequest.url).to.not.match(/\\/slack\\/test/);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notification').length, 'check slack notification after api validation error').to.equal(0);\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/slack'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack');\n        await (0, _testHelpers.fillIn)('[data-test-slack-url-input]', 'https://hooks.slack.com/services/1275958430');\n        await (0, _testHelpers.blur)('[data-test-slack-url-input]');\n        await (0, _visit.visit)('/settings/design');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/design');\n        await (0, _visit.visit)('/settings/integrations/slack');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/slack'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-slack-url-input]').textContent.trim(), 'Slack Webhook URL').to.equal('');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/tags-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-test-helpers/wait\", \"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/adapter-error\", \"chai\", \"ember-mocha\", \"ember-concurrency\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _wait, _windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _adapterError, _chai, _emberMocha, _emberConcurrency, _visit) {\n  \"use strict\";\n\n  // Grabbed from keymaster's testing code because Ember's `keyEvent` helper\n  // is for some reason not triggering the events in a way that keymaster detects:\n  // https://github.com/madrobby/keymaster/blob/master/test/keymaster.html#L31\n  const modifierMap = {\n    16: 'shiftKey',\n    18: 'altKey',\n    17: 'ctrlKey',\n    91: 'metaKey'\n  };\n\n  let keydown = function keydown(code, modifiers, el) {\n    let event = document.createEvent('Event');\n    event.initEvent('keydown', true, true);\n    event.keyCode = code;\n\n    if (modifiers && modifiers.length > 0) {\n      for (let i in modifiers) {\n        event[modifierMap[modifiers[i]]] = true;\n      }\n    }\n\n    (el || document).dispatchEvent(event);\n  };\n\n  let keyup = function keyup(code, el) {\n    let event = document.createEvent('Event');\n    event.initEvent('keyup', true, true);\n    event.keyCode = code;\n    (el || document).dispatchEvent(event);\n  };\n\n  (0, _mocha.describe)('Acceptance: Settings - Tags', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/tags');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/design');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      let newLocation, originalReplaceState;\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        originalReplaceState = _windowProxy.default.replaceState;\n\n        _windowProxy.default.replaceState = function (params, title, url) {\n          newLocation = url;\n        };\n\n        newLocation = undefined;\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.afterEach)(function () {\n        _windowProxy.default.replaceState = originalReplaceState;\n      });\n      (0, _mocha.it)('it renders, can be navigated, can edit, create & delete tags', async function () {\n        let tag1 = this.server.create('tag');\n        let tag2 = this.server.create('tag');\n        await (0, _visit.visit)('/settings/tags'); // second wait is needed for the vertical-collection to settle\n\n        await (0, _wait.default)(); // it redirects to first tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal(\"/settings/tags/\".concat(tag1.slug)); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Settings - Tags - Test Blog'); // it highlights nav menu\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"tags\"]'), 'highlights nav menu item').to.have.class('active'); // it lists all tags\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count').to.equal(2);\n        let tag = (0, _testHelpers.find)('.settings-tags .settings-tag');\n        (0, _chai.expect)(tag.querySelector('.tag-title').textContent, 'tag list item title').to.equal(tag1.name); // it highlights selected tag\n\n        (0, _chai.expect)((0, _testHelpers.find)(\"a[href=\\\"/ghost/settings/tags/\".concat(tag1.slug, \"\\\"]\")), 'highlights selected tag').to.have.class('active'); // it shows selected tag form\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'settings pane title').to.equal('Tag settings');\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'loads correct tag into form').to.equal(tag1.name); // click the second tag in the list\n\n        let tagEditButtons = (0, _testHelpers.findAll)('.tag-edit-button');\n        await (0, _testHelpers.click)(tagEditButtons[tagEditButtons.length - 1]); // it navigates to selected tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking tag').to.equal(\"/settings/tags/\".concat(tag2.slug)); // it highlights selected tag\n\n        (0, _chai.expect)((0, _testHelpers.find)(\"a[href=\\\"/ghost/settings/tags/\".concat(tag2.slug, \"\\\"]\")), 'highlights selected tag').to.have.class('active'); // it shows selected tag form\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'loads correct tag into form').to.equal(tag2.name); // simulate up arrow press\n\n        Ember.run(() => {\n          keydown(38);\n          keyup(38);\n        });\n        await (0, _wait.default)(); // it navigates to previous tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after keyboard up arrow').to.equal(\"/settings/tags/\".concat(tag1.slug)); // it highlights selected tag\n\n        (0, _chai.expect)((0, _testHelpers.find)(\"a[href=\\\"/ghost/settings/tags/\".concat(tag1.slug, \"\\\"]\")), 'selects previous tag').to.have.class('active'); // simulate down arrow press\n\n        Ember.run(() => {\n          keydown(40);\n          keyup(40);\n        });\n        await (0, _wait.default)(); // it navigates to previous tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after keyboard down arrow').to.equal(\"/settings/tags/\".concat(tag2.slug)); // it highlights selected tag\n\n        (0, _chai.expect)((0, _testHelpers.find)(\"a[href=\\\"/ghost/settings/tags/\".concat(tag2.slug, \"\\\"]\")), 'selects next tag').to.have.class('active'); // trigger save\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"name\"]', 'New Name');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"name\"]'); // extra timeout needed for Travis - sometimes it doesn't update\n        // quick enough and an extra wait() call doesn't help\n\n        await (0, _emberConcurrency.timeout)(100); // check we update with the data returned from the server\n\n        let tags = (0, _testHelpers.findAll)('.settings-tags .settings-tag');\n        tag = tags[0];\n        (0, _chai.expect)(tag.querySelector('.tag-title').textContent, 'tag list updates on save').to.equal('New Name');\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'settings form updates on save').to.equal('New Name'); // start new tag\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green'); // it navigates to the new tag route\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'new tag URL').to.equal('/settings/tags/new'); // it displays the new tag form\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'settings pane title').to.equal('New tag'); // all fields start blank\n\n        (0, _testHelpers.findAll)('.tag-settings-pane input, .tag-settings-pane textarea').forEach(function (elem) {\n          (0, _chai.expect)(elem.value, \"input field for \".concat(elem.getAttribute('name'))).to.be.empty;\n        }); // save new tag\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"name\"]', 'New tag');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"name\"]'); // extra timeout needed for FF on Linux - sometimes it doesn't update\n        // quick enough, especially on Travis, and an extra wait() call\n        // doesn't help\n\n        await (0, _emberConcurrency.timeout)(100); // it redirects to the new tag's URL\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after tag creation').to.equal('/settings/tags/new-tag'); // it adds the tag to the list and selects\n\n        tags = (0, _testHelpers.findAll)('.settings-tags .settings-tag');\n        tag = tags[1]; // second tag in list due to alphabetical ordering\n\n        (0, _chai.expect)(tags.length, 'tag list count after creation').to.equal(3); // new tag will be second in the list due to alphabetical sorting\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag')[1].querySelector('.tag-title').textContent.trim(), 'new tag list item title');\n        (0, _chai.expect)(tag.querySelector('.tag-title').textContent, 'new tag list item title').to.equal('New tag');\n        (0, _chai.expect)((0, _testHelpers.find)('a[href=\"/ghost/settings/tags/new-tag\"]'), 'highlights new tag').to.have.class('active'); // delete tag\n\n        await (0, _testHelpers.click)('.settings-menu-delete-button');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-red'); // it redirects to the first tag\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after tag deletion').to.equal(\"/settings/tags/\".concat(tag1.slug)); // it removes the tag from the list\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count after deletion').to.equal(2);\n      }); // TODO: Unskip and fix\n      // skipped because it was failing most of the time on Travis\n      // see https://github.com/TryGhost/Ghost/issues/8805\n\n      _mocha.it.skip('loads tag via slug when accessed directly', async function () {\n        this.server.createList('tag', 2);\n        await (0, _visit.visit)('/settings/tags/tag-1'); // second wait is needed for the vertical-collection to settle\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after direct load').to.equal('/settings/tags/tag-1'); // it loads all other tags\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count after direct load').to.equal(2); // selects tag in list\n\n        (0, _chai.expect)((0, _testHelpers.find)('a[href=\"/ghost/settings/tags/tag-1\"]').classList.contains('active'), 'highlights requested tag').to.be.true; // shows requested tag in settings pane\n\n        (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane input[name=\"name\"]').value, 'loads correct tag into form').to.equal('Tag 1');\n      });\n\n      (0, _mocha.it)('shows the internal tag label', async function () {\n        this.server.create('tag', {\n          name: '#internal-tag',\n          slug: 'hash-internal-tag',\n          visibility: 'internal'\n        });\n        await (0, _visit.visit)('settings/tags/'); // second wait is needed for the vertical-collection to settle\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/tags/hash-internal-tag');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.settings-tags .settings-tag').length, 'tag list count').to.equal(1);\n        let tag = (0, _testHelpers.find)('.settings-tags .settings-tag');\n        (0, _chai.expect)(tag.querySelectorAll('.label.label-blue').length, 'internal tag label').to.equal(1);\n        (0, _chai.expect)(tag.querySelector('.label.label-blue').textContent.trim(), 'internal tag label text').to.equal('internal');\n      });\n      (0, _mocha.it)('updates the URL when slug changes', async function () {\n        this.server.createList('tag', 2);\n        await (0, _visit.visit)('/settings/tags/tag-1'); // second wait is needed for the vertical-collection to settle\n\n        await (0, _wait.default)();\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'URL after direct load').to.equal('/settings/tags/tag-1'); // update the slug\n\n        await (0, _testHelpers.fillIn)('.tag-settings-pane input[name=\"slug\"]', 'test');\n        await (0, _testHelpers.blur)('.tag-settings-pane input[name=\"slug\"]'); // tests don't have a location.hash so we can only check that the\n        // slug portion is updated correctly\n\n        (0, _chai.expect)(newLocation, 'URL after slug change').to.equal('test');\n      });\n      (0, _mocha.it)('redirects to 404 when tag does not exist', async function () {\n        this.server.get('/tags/slug/unknown/', function () {\n          return new _emberCliMirage.Response(404, {\n            'Content-Type': 'application/json'\n          }, {\n            errors: [{\n              message: 'Tag not found.',\n              type: 'NotFoundError'\n            }]\n          });\n        });\n        (0, _adapterError.errorOverride)();\n        await (0, _visit.visit)('settings/tags/unknown');\n        (0, _adapterError.errorReset)();\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/settings/tags/unknown');\n      });\n      (0, _mocha.it)('sorts tags correctly', async function () {\n        this.server.create('tag', {\n          name: 'B - Third',\n          slug: 'third'\n        });\n        this.server.create('tag', {\n          name: 'Z - Last',\n          slug: 'last'\n        });\n        this.server.create('tag', {\n          name: '#A - Second',\n          slug: 'second'\n        });\n        this.server.create('tag', {\n          name: 'A - First',\n          slug: 'first'\n        });\n        await (0, _visit.visit)('settings/tags'); // second wait is needed for the vertical-collection to settle\n\n        await (0, _wait.default)();\n        let tags = (0, _testHelpers.findAll)('[data-test-tag]');\n        (0, _chai.expect)(tags[0].querySelector('[data-test-name]').textContent.trim()).to.equal('A - First');\n        (0, _chai.expect)(tags[1].querySelector('[data-test-name]').textContent.trim()).to.equal('#A - Second');\n        (0, _chai.expect)(tags[2].querySelector('[data-test-name]').textContent.trim()).to.equal('B - Third');\n        (0, _chai.expect)(tags[3].querySelector('[data-test-name]').textContent.trim()).to.equal('Z - Last');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/unsplash-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Unsplash', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/unsplash');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it can activate/deactivate', async function () {\n        await (0, _visit.visit)('/settings/integrations/unsplash'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash'); // verify we don't have an unsplash setting fixture loaded\n\n        (0, _chai.expect)(this.server.db.settings.where({\n          key: 'unsplash'\n        }), 'initial server settings').to.be.empty; // it's enabled by default when settings is empty\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-checkbox=\"unsplash\"]').checked, 'checked by default').to.be.true; // trigger a save\n\n        await (0, _testHelpers.click)('[data-test-save-button]'); // server should now have an unsplash setting\n\n        let _this$server$db$setti = this.server.db.settings.where({\n          key: 'unsplash'\n        }),\n            _this$server$db$setti2 = _slicedToArray(_this$server$db$setti, 1),\n            setting = _this$server$db$setti2[0];\n\n        (0, _chai.expect)(setting, 'unsplash setting after save').to.exist;\n        (0, _chai.expect)(setting.value).to.equal('{\"isActive\":true}'); // disable\n\n        await (0, _testHelpers.click)('[data-test-checkbox=\"unsplash\"]'); // save via CMD-S shortcut\n\n        await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n          keyCode: 83,\n          // s\n          metaKey: _ctrlOrCmd.default === 'command',\n          ctrlKey: _ctrlOrCmd.default === 'ctrl'\n        }); // server should have an updated setting\n\n        var _this$server$db$setti3 = this.server.db.settings.where({\n          key: 'unsplash'\n        });\n\n        var _this$server$db$setti4 = _slicedToArray(_this$server$db$setti3, 1);\n\n        setting = _this$server$db$setti4[0];\n        (0, _chai.expect)(setting.value).to.equal('{\"isActive\":false}');\n      });\n      (0, _mocha.it)('warns when leaving without saving', async function () {\n        await (0, _visit.visit)('/settings/integrations/unsplash'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-checkbox=\"unsplash\"]').checked, 'checked by default').to.be.true;\n        await (0, _testHelpers.click)('[data-test-checkbox=\"unsplash\"]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-checkbox=\"unsplash\"]').checked, 'Unsplash checkbox').to.be.false;\n        await (0, _visit.visit)('/settings/labs');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal').length, 'modal exists').to.equal(1); // Leave without saving\n\n        await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/labs');\n        await (0, _visit.visit)('/settings/integrations/unsplash');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/unsplash'); // settings were not saved\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-checkbox=\"unsplash\"]').checked, 'Unsplash checkbox').to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/settings/zapier-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Settings - Integrations - Zapier', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects to staff page when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/settings/integrations/zapier');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it loads', async function () {\n        await (0, _visit.visit)('/settings/integrations/zapier'); // has correct url\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/integrations/zapier');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/setup-test\", [\"moment\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-cli-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_moment, _setupMirage, _emberCliMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Setup', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects if already authenticated', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/setup/one');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      await (0, _visit.visit)('/setup/two');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      await (0, _visit.visit)('/setup/three');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n    });\n    (0, _mocha.it)('redirects to signin if already set up', async function () {\n      // mimick an already setup blog\n      this.server.get('/authentication/setup/', function () {\n        return {\n          setup: [{\n            status: true\n          }]\n        };\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/setup');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.describe)('with a new blog', function () {\n      (0, _mocha.beforeEach)(function () {\n        // mimick a new blog\n        this.server.get('/authentication/setup/', function () {\n          return {\n            setup: [{\n              status: false\n            }]\n          };\n        });\n      });\n      (0, _mocha.it)('has a successful happy path', async function () {\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        await (0, _visit.visit)('/setup'); // it redirects to step one\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after accessing /setup').to.equal('/setup/one'); // it highlights first step\n\n        let stepIcons = (0, _testHelpers.findAll)('.gh-flow-nav .step');\n        (0, _chai.expect)(stepIcons.length, 'sanity check: three steps').to.equal(3);\n        (0, _chai.expect)(stepIcons[0], 'first step').to.have.class('active');\n        (0, _chai.expect)(stepIcons[1], 'second step').to.not.have.class('active');\n        (0, _chai.expect)(stepIcons[2], 'third step').to.not.have.class('active'); // it displays download count (count increments for each ajax call\n        // and polling is disabled in testing so our count should be \"1\"\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-flow-content em').textContent.trim()).to.equal('1');\n        await (0, _testHelpers.click)('.gh-btn-green'); // it transitions to step two\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking \"Create your account\"').to.equal('/setup/two'); // email field is focused by default\n        // NOTE: $('x').is(':focus') doesn't work in phantomjs CLI runner\n        // https://github.com/ariya/phantomjs/issues/10427\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-blog-title-input]')[0] === document.activeElement, 'blog title has focus').to.be.true;\n        await (0, _testHelpers.click)('.gh-btn-green'); // it marks fields as invalid\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.form-group.error').length, 'number of invalid fields').to.equal(4); // it displays error messages\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.error .response').length, 'number of in-line validation messages').to.equal(4); // it displays main error\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1); // enter valid details and submit\n\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // it transitions to step 3\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting step two').to.equal('/setup/three'); // submit button is \"disabled\"\n\n        (0, _chai.expect)((0, _testHelpers.find)('button[type=\"submit\"]').classList.contains('gh-btn-green'), 'invite button with no emails is white').to.be.false; // fill in a valid email\n\n        await (0, _testHelpers.fillIn)('[name=\"users\"]', 'new-user@example.com'); // submit button is \"enabled\"\n\n        (0, _chai.expect)((0, _testHelpers.find)('button[type=\"submit\"]').classList.contains('gh-btn-green'), 'invite button is green with valid email address').to.be.true; // submit the invite form\n\n        await (0, _testHelpers.click)('button[type=\"submit\"]'); // it redirects to the home / \"content\" screen\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting invites').to.equal('/site'); // it displays success alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-green').length, 'number of success alerts').to.equal(1);\n      });\n      (0, _mocha.it)('handles validation errors in step 2', async function () {\n        let postCount = 0;\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        this.server.post('/authentication/setup', function () {\n          postCount += 1; // validation error\n\n          if (postCount === 1) {\n            return new _emberCliMirage.Response(422, {}, {\n              errors: [{\n                type: 'ValidationError',\n                message: 'Server response message'\n              }]\n            });\n          } // server error\n\n\n          if (postCount === 2) {\n            return new _emberCliMirage.Response(500, {}, null);\n          }\n        });\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.click)('.gh-btn-green'); // non-server validation\n\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.not.be.empty;\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title'); // first post - simulated validation error\n\n        await (0, _testHelpers.click)('.gh-btn-green');\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.equal('Server response message'); // second post - simulated server error\n\n        await (0, _testHelpers.click)('.gh-btn-green');\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'error text').to.be.empty;\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-red').length, 'number of alerts').to.equal(1);\n      });\n      (0, _mocha.it)('handles invalid origin error on step 2', async function () {\n        // mimick the API response for an invalid origin\n        this.server.post('/session', function () {\n          return new _emberCliMirage.Response(401, {}, {\n            errors: [{\n              type: 'UnauthorizedError',\n              message: 'Access Denied from url: unknown.com. Please use the url configured in config.js.'\n            }]\n          });\n        });\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // button should not be spinning\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green .spinner').length, 'button has spinner').to.equal(0); // we should show an error message\n\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent, 'error text').to.have.string('Access Denied from url: unknown.com. Please use the url configured in config.js.');\n      });\n      (0, _mocha.it)('handles validation errors in step 3', async function () {\n        let input = '[name=\"users\"]';\n        let postCount = 0;\n        let button, formGroup;\n        await (0, _testSupport.invalidateSession)();\n        this.server.loadFixtures('roles');\n        this.server.post('/invites/', function (_ref) {\n          let invites = _ref.invites;\n          let attrs = this.normalizedRequestAttrs();\n          postCount += 1; // invalid\n\n          if (postCount === 1) {\n            return new _emberCliMirage.Response(422, {}, {\n              errors: [{\n                type: 'ValidationError',\n                message: 'Dummy validation error'\n              }]\n            });\n          } // TODO: duplicated from mirage/config/invites - extract method?\n\n\n          attrs.token = \"\".concat(invites.all().models.length, \"-token\");\n          attrs.expires = _moment.default.utc().add(1, 'day').valueOf();\n          attrs.createdAt = _moment.default.utc().format();\n          attrs.createdBy = 1;\n          attrs.updatedAt = _moment.default.utc().format();\n          attrs.updatedBy = 1;\n          attrs.status = 'sent';\n          return invites.create(attrs);\n        }); // complete step 2 so we can access step 3\n\n        await (0, _visit.visit)('/setup/two');\n        await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n        await (0, _testHelpers.fillIn)('[data-test-password-input]', 'thisissupersafe');\n        await (0, _testHelpers.fillIn)('[data-test-blog-title-input]', 'Blog Title');\n        await (0, _testHelpers.click)('.gh-btn-green'); // default field/button state\n\n        formGroup = (0, _testHelpers.find)('.gh-flow-invite .form-group');\n        button = (0, _testHelpers.find)('.gh-flow-invite button[type=\"submit\"]');\n        (0, _chai.expect)(formGroup, 'default field has error class').to.not.have.class('error');\n        (0, _chai.expect)(button.textContent, 'default button text').to.have.string('Invite some users');\n        (0, _chai.expect)(button, 'default button is disabled').to.have.class('gh-btn-minor'); // no users submitted state\n\n        await (0, _testHelpers.click)('.gh-flow-invite button[type=\"submit\"]');\n        (0, _chai.expect)(formGroup, 'no users submitted field has error class').to.have.class('error');\n        (0, _chai.expect)(button.textContent, 'no users submitted button text').to.have.string('No users to invite');\n        (0, _chai.expect)(button, 'no users submitted button is disabled').to.have.class('gh-btn-minor'); // single invalid email\n\n        await (0, _testHelpers.fillIn)(input, 'invalid email');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(formGroup, 'invalid field has error class').to.have.class('error');\n        (0, _chai.expect)(button.textContent, 'single invalid button text').to.have.string('1 invalid email address');\n        (0, _chai.expect)(button, 'invalid email button is disabled').to.have.class('gh-btn-minor'); // multiple invalid emails\n\n        await (0, _testHelpers.fillIn)(input, 'invalid email\\nanother invalid address');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(button.textContent, 'multiple invalid button text').to.have.string('2 invalid email addresses'); // single valid email\n\n        await (0, _testHelpers.fillIn)(input, 'invited@example.com');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(formGroup, 'valid field has error class').to.not.have.class('error');\n        (0, _chai.expect)(button.textContent, 'single valid button text').to.have.string('Invite 1 user');\n        (0, _chai.expect)(button, 'valid email button is enabled').to.have.class('gh-btn-green'); // multiple valid emails\n\n        await (0, _testHelpers.fillIn)(input, 'invited1@example.com\\ninvited2@example.com');\n        await (0, _testHelpers.blur)(input);\n        (0, _chai.expect)(button.textContent, 'multiple valid button text').to.have.string('Invite 2 users'); // submit invitations with simulated failure on 1 invite\n\n        await (0, _testHelpers.click)('.gh-btn-green'); // it redirects to the home / \"content\" screen\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after submitting invites').to.equal('/site'); // it displays success alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-green').length, 'number of success alerts').to.equal(1); // it displays failure alert\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert-red').length, 'number of failure alerts').to.equal(1);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/signin-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-cli-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _emberCliMirage, _testSupport, _mocha, _testHelpers, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Signin', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects if already authenticated', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/signin');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/site');\n    });\n    (0, _mocha.describe)('when attempting to signin', function () {\n      (0, _mocha.beforeEach)(function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role],\n          slug: 'test-user'\n        });\n        this.server.post('/session', function (schema, _ref) {\n          let requestBody = _ref.requestBody;\n\n          let _JSON$parse = JSON.parse(requestBody),\n              username = _JSON$parse.username,\n              password = _JSON$parse.password;\n\n          (0, _chai.expect)(username).to.equal('test@example.com');\n\n          if (password === 'thisissupersafe') {\n            return new _emberCliMirage.Response(201);\n          } else {\n            return new _emberCliMirage.Response(401, {}, {\n              errors: [{\n                type: 'UnauthorizedError',\n                message: 'Invalid Password'\n              }]\n            });\n          }\n        });\n      });\n      (0, _mocha.it)('errors correctly', async function () {\n        await (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/signin');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'signin url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('input[name=\"identification\"]').length, 'email input field').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.findAll)('input[name=\"password\"]').length, 'password input field').to.equal(1);\n        await (0, _testHelpers.click)('.gh-btn-blue');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.form-group.error').length, 'number of invalid fields').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1);\n        await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[name=\"password\"]', 'invalid');\n        await (0, _testHelpers.click)('.gh-btn-blue');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.main-error').length, 'main error is displayed').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('.main-error').textContent.trim(), 'main error text').to.equal('Invalid Password');\n      });\n      (0, _mocha.it)('submits successfully', async function () {\n        (0, _testSupport.invalidateSession)();\n        await (0, _visit.visit)('/signin');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'current url').to.equal('/signin');\n        await (0, _testHelpers.fillIn)('[name=\"identification\"]', 'test@example.com');\n        await (0, _testHelpers.fillIn)('[name=\"password\"]', 'thisissupersafe');\n        await (0, _testHelpers.click)('.gh-btn-blue');\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/site');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/signup-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _testHelpers, _mocha, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Acceptance: Signup', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('can signup successfully', async function () {\n      let server = this.server;\n      server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: true\n          }]\n        };\n      });\n      server.post('/authentication/invitation/', function (_ref, _ref2) {\n        let users = _ref.users;\n        let requestBody = _ref2.requestBody;\n        let params = JSON.parse(requestBody);\n        (0, _chai.expect)(params.invitation[0].name).to.equal('Test User');\n        (0, _chai.expect)(params.invitation[0].email).to.equal('kevin+test2@ghost.org');\n        (0, _chai.expect)(params.invitation[0].password).to.equal('thisissupersafe');\n        (0, _chai.expect)(params.invitation[0].token).to.equal('MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0'); // ensure that `/users/me/` request returns a user\n\n        let role = server.create('role', {\n          name: 'Author'\n        });\n        users.create({\n          email: 'kevin@test2@ghost.org',\n          roles: [role]\n        });\n        return {\n          invitation: [{\n            message: 'Invitation accepted.'\n          }]\n        };\n      }); // token details:\n      // \"1470346017929|kevin+test2@ghost.org|2cDnQc3g7fQTj9nNK4iGPSGfvomkLdXf68FuWgS66Ug=\"\n\n      await (0, _visit.visit)('/signup/MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signup'); // focus out in Name field triggers inline error\n\n      await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group'), 'name field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group').querySelector('.response').textContent, 'name inline-error text').to.have.string('Please enter a name'); // entering text in Name field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"name\"]', 'Test User');\n      await (0, _testHelpers.blur)('[data-test-input=\"name\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group'), 'name field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"name\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'name field error is removed after text input').to.be.empty; // focus out in Email field triggers inline error\n\n      await (0, _testHelpers.click)('[data-test-input=\"email\"]');\n      await (0, _testHelpers.blur)('[data-test-input=\"email\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group'), 'email field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group').querySelector('.response').textContent, 'email inline-error text').to.have.string('Please enter an email'); // entering text in email field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"email\"]', 'kevin+test2@ghost.org');\n      await (0, _testHelpers.blur)('[data-test-input=\"email\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group'), 'email field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"email\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'email field error is removed after text input').to.be.empty; // check password validation\n      // focus out in password field triggers inline error\n      // no password\n\n      await (0, _testHelpers.click)('[data-test-input=\"password\"]');\n      await (0, _testHelpers.blur)();\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group'), 'password field group has error class when empty').to.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('must be at least 10 characters'); // password too short\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'short');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('must be at least 10 characters'); // password must not be a bad password\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', '1234567890');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // password must not be a disallowed password\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'password99');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // password must not have repeating characters\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', '2222222222');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent, 'password field error text').to.have.string('you cannot use an insecure password'); // entering valid text in Password field clears error\n\n      await (0, _testHelpers.fillIn)('[data-test-input=\"password\"]', 'thisissupersafe');\n      await (0, _testHelpers.blur)('[data-test-input=\"password\"]');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group'), 'password field loses error class after text input').to.not.have.class('error');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-input=\"password\"]').closest('.form-group').querySelector('.response').textContent.trim(), 'password field error is removed after text input').to.equal(''); // submitting sends correct details and redirects to content screen\n\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('site');\n    });\n    (0, _mocha.it)('redirects if already logged in', async function () {\n      this.server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: true\n          }]\n        };\n      });\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      await (0, _testSupport.authenticateSession)(); // token details:\n      // \"1470346017929|kevin+test2@ghost.org|2cDnQc3g7fQTj9nNK4iGPSGfvomkLdXf68FuWgS66Ug=\"\n\n      await (0, _visit.visit)('/signup/MTQ3MDM0NjAxNzkyOXxrZXZpbit0ZXN0MkBnaG9zdC5vcmd8MmNEblFjM2c3ZlFUajluTks0aUdQU0dmdm9ta0xkWGY2OEZ1V2dTNjZVZz0');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('site');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('sign out to register');\n    });\n    (0, _mocha.it)('redirects with alert on invalid token', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/signup/---invalid---');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signin');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('Invalid token');\n    });\n    (0, _mocha.it)('redirects with alert on non-existant or expired token', async function () {\n      this.server.get('/authentication/invitation', function () {\n        return {\n          invitation: [{\n            valid: false\n          }]\n        };\n      });\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/signup/expired');\n      (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('signin');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alert-content').textContent).to.have.string('not exist');\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/staff-test\", [\"ghost-admin/utils/ctrl-or-cmd\", \"moment\", \"ember-cli-mirage/test-support/setup-mirage\", \"ghost-admin/utils/window-proxy\", \"ember-cli-mirage\", \"mocha\", \"ember-simple-auth/test-support\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/adapter-error\", \"chai\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_ctrlOrCmd, _moment, _setupMirage, _windowProxy, _emberCliMirage, _mocha, _testSupport, _testHelpers, _adapterError, _chai, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Staff', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/staff');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as contributor', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as author', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-user');\n    });\n    (0, _mocha.it)('redirects correctly when authenticated as editor', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role],\n        slug: 'test-user'\n      });\n      this.server.create('user', {\n        slug: 'no-access'\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/staff/no-access');\n      (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff');\n    });\n    (0, _mocha.describe)('when logged in as admin', function () {\n      let admin, adminRole, suspendedUser;\n      (0, _mocha.beforeEach)(async function () {\n        this.server.loadFixtures('roles');\n        adminRole = this.server.schema.roles.find(1);\n        admin = this.server.create('user', {\n          email: 'admin@example.com',\n          roles: [adminRole]\n        }); // add an expired invite\n\n        this.server.create('invite', {\n          expires: _moment.default.utc().subtract(1, 'day').valueOf(),\n          role: adminRole\n        }); // add a suspended user\n\n        suspendedUser = this.server.create('user', {\n          email: 'suspended@example.com',\n          roles: [adminRole],\n          status: 'inactive'\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('it renders and navigates correctly', async function () {\n        let user1 = this.server.create('user');\n        let user2 = this.server.create('user');\n        await (0, _visit.visit)('/staff'); // doesn't do any redirecting\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Staff - Test Blog'); // it shows active users in active section\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-active-users] [data-test-user-id]').length, 'number of active users').to.equal(3);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-active-users] [data-test-user-id=\\\"\".concat(user1.id, \"\\\"]\"))).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-active-users] [data-test-user-id=\\\"\".concat(user2.id, \"\\\"]\"))).to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-active-users] [data-test-user-id=\\\"\".concat(admin.id, \"\\\"]\"))).to.exist; // it shows suspended users in suspended section\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-suspended-users] [data-test-user-id]').length, 'number of suspended users').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-suspended-users] [data-test-user-id=\\\"\".concat(suspendedUser.id, \"\\\"]\"))).to.exist;\n        await (0, _testHelpers.click)(\"[data-test-user-id=\\\"\".concat(user2.id, \"\\\"]\")); // url is correct\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking user').to.equal(\"/staff/\".concat(user2.slug)); // title is correct\n\n        (0, _chai.expect)(document.title, 'title after clicking user').to.equal('Staff - User - Test Blog'); // view title should exist and be linkable and active\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-screen-title] a[href=\"/ghost/staff\"]').classList.contains('active'), 'has linkable url back to staff main page').to.be.true;\n        await (0, _testHelpers.click)('[data-test-screen-title] a'); // url should be /staff again\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)(), 'url after clicking back').to.equal('/staff');\n      });\n      (0, _mocha.it)('can manage invites', async function () {\n        await (0, _visit.visit)('/staff'); // invite user button exists\n\n        (0, _chai.expect)((0, _testHelpers.find)('.view-actions .gh-btn-green'), 'invite people button').to.exist; // existing users are listed\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-user-id]').length, 'initial number of active users').to.equal(2);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-user-id=\"1\"] [data-test-role-name]').textContent.trim(), 'active user\\'s role label').to.equal('Administrator'); // existing invites are shown\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'initial number of invited users').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"1\"] [data-test-invite-description]').textContent, 'expired invite description').to.match(/expired/); // remove expired invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"1\"] [data-test-revoke-button]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'initial number of invited users').to.equal(0); // click the invite people button\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green');\n        let roleOptions = (0, _testHelpers.findAll)('.fullscreen-modal select[name=\"role\"] option');\n\n        function checkOwnerExists() {\n          for (let i in roleOptions) {\n            if (roleOptions[i].tagName === 'option' && roleOptions[i].text === 'Owner') {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        function checkSelectedIsAuthor() {\n          for (let i in roleOptions) {\n            if (roleOptions[i].selected) {\n              return roleOptions[i].text === 'Author';\n            }\n          }\n\n          return false;\n        } // modal is displayed\n\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal h1').textContent.trim(), 'correct modal is displayed').to.equal('Invite a New User'); // number of roles is correct\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.fullscreen-modal select[name=\"role\"] option').length, 'number of selectable roles').to.equal(3);\n        (0, _chai.expect)(checkOwnerExists(), 'owner role isn\\'t available').to.be.false;\n        (0, _chai.expect)(checkSelectedIsAuthor(), 'author role is selected initially').to.be.true; // submit valid invite form\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite1@example.com');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // modal closes\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length, 'number of modals after sending invite').to.equal(0); // invite is displayed, has correct e-mail + role\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after first invite').to.equal(1);\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-email]').textContent.trim(), 'displayed email of first invite').to.equal('invite1@example.com');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-role-name]').textContent.trim(), 'displayed role of first invite').to.equal('Author');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"2\"] [data-test-invite-description]').textContent, 'new invite description').to.match(/expires/); // number of users is unchanged\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-user-id]').length, 'number of active users after first invite').to.equal(2); // submit new invite with different role\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite2@example.com');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal select[name=\"role\"]', '2');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // number of invites increases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after second invite').to.equal(2); // invite has correct e-mail + role\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"3\"] [data-test-email]').textContent.trim(), 'displayed email of second invite').to.equal('invite2@example.com');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id=\"3\"] [data-test-role-name]').textContent.trim(), 'displayed role of second invite').to.equal('Editor'); // submit invite form with existing user\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'admin@example.com');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting existing user error').to.equal('A user with that email address already exists.'); // submit invite form with existing invite\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite1@example.com');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting invited user error').to.equal('A user with that email address was already invited.'); // submit invite form with an invalid email\n\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'test');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // validation message is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal .error .response').textContent.trim(), 'inviting invalid email error').to.equal('Invalid Email.');\n        await (0, _testHelpers.click)('.fullscreen-modal a.close'); // revoke latest invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"3\"] [data-test-revoke-button]'); // number of invites decreases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after revoke').to.equal(1); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification').textContent.trim(), 'notifications contain revoke').to.match(/Invitation revoked\\. \\(invite2@example\\.com\\)/); // correct invite is removed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id] [data-test-email]').textContent.trim(), 'displayed email of remaining invite').to.equal('invite1@example.com'); // add another invite to test ordering on resend\n\n        await (0, _testHelpers.click)('.view-actions .gh-btn-green');\n        await (0, _testHelpers.fillIn)('.fullscreen-modal input[name=\"email\"]', 'invite3@example.com');\n        await (0, _testHelpers.click)('.fullscreen-modal .gh-btn-green'); // new invite should be last in the list\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id]:last-of-type [data-test-email]').textContent.trim(), 'last invite email in list').to.equal('invite3@example.com'); // resend first invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id=\"2\"] [data-test-resend-button]'); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification').textContent.trim(), 'notifications contain resend').to.match(/Invitation resent! \\(invite1@example\\.com\\)/); // first invite is still at the top\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-invite-id]:first-of-type [data-test-email]').textContent.trim(), 'first invite email in list').to.equal('invite1@example.com'); // regression test: can revoke a resent invite\n\n        await (0, _testHelpers.click)('[data-test-invite-id]:first-of-type [data-test-resend-button]');\n        await (0, _testHelpers.click)('[data-test-invite-id]:first-of-type [data-test-revoke-button]'); // number of invites decreases\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-invite-id]').length, 'number of invites after resend/revoke').to.equal(1); // notification is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-notification').textContent.trim(), 'notifications contain revoke after resend/revoke').to.match(/Invitation revoked\\. \\(invite1@example\\.com\\)/);\n      });\n      (0, _mocha.it)('can manage suspended users', async function () {\n        await (0, _visit.visit)('/staff');\n        await (0, _testHelpers.click)(\"[data-test-user-id=\\\"\".concat(suspendedUser.id, \"\\\"]\"));\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-suspended-badge]')).to.exist;\n        await (0, _testHelpers.click)('[data-test-user-actions]');\n        await (0, _testHelpers.click)('[data-test-unsuspend-button]');\n        await (0, _testHelpers.click)('[data-test-modal-confirm]'); // NOTE: there seems to be a timing issue with this test - pausing\n        // here confirms that the badge is removed but the andThen is firing\n        // before the page is updated\n        // andThen(() => {\n        //     expect('[data-test-suspended-badge]').to.not.exist;\n        // });\n\n        await (0, _testHelpers.click)('[data-test-staff-link]'); // suspendedUser is now in active list\n\n        (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-active-users] [data-test-user-id=\\\"\".concat(suspendedUser.id, \"\\\"]\"))).to.exist; // no suspended users\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-suspended-users] [data-test-user-id]').length).to.equal(0);\n        await (0, _testHelpers.click)(\"[data-test-user-id=\\\"\".concat(suspendedUser.id, \"\\\"]\"));\n        await (0, _testHelpers.click)('[data-test-user-actions]');\n        await (0, _testHelpers.click)('[data-test-suspend-button]');\n        await (0, _testHelpers.click)('[data-test-modal-confirm]');\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-suspended-badge]')).to.exist;\n      });\n      (0, _mocha.it)('can delete users', async function () {\n        let user1 = this.server.create('user');\n        let user2 = this.server.create('user');\n        let post = this.server.create('post', {\n          authors: [user2]\n        }); // we don't have a full many-to-many relationship in mirage so we\n        // need to add the inverse manually\n\n        user2.posts = [post];\n        user2.save();\n        await (0, _visit.visit)('/staff');\n        await (0, _testHelpers.click)(\"[data-test-user-id=\\\"\".concat(user1.id, \"\\\"]\")); // user deletion displays modal\n\n        await (0, _testHelpers.click)('button.delete');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal=\"delete-user\"]').length, 'user deletion modal displayed after button click').to.equal(1); // user has no posts so no warning about post deletion\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-text=\"user-post-count\"]').length, 'deleting user with no posts has no post count').to.equal(0); // cancelling user deletion closes modal\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-delete-user\"]');\n        (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length === 0, 'delete user modal is closed when cancelling').to.be.true; // deleting a user with posts\n\n        await (0, _visit.visit)('/staff');\n        await (0, _testHelpers.click)(\"[data-test-user-id=\\\"\".concat(user2.id, \"\\\"]\"));\n        await (0, _testHelpers.click)('button.delete'); // user has  posts so should warn about post deletion\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-text=\"user-post-count\"]').textContent, 'deleting user with posts has post count').to.have.string('1 post');\n        await (0, _testHelpers.click)('[data-test-button=\"confirm-delete-user\"]'); // redirected to staff page\n\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/staff'); // deleted user is not in list\n\n        (0, _chai.expect)((0, _testHelpers.findAll)(\"[data-test-user-id=\\\"\".concat(user2.id, \"\\\"]\")).length, 'deleted user is not in user list after deletion').to.equal(0);\n      });\n      (0, _mocha.describe)('existing user', function () {\n        let user, newLocation, originalReplaceState;\n        (0, _mocha.beforeEach)(function () {\n          user = this.server.create('user', {\n            slug: 'test-1',\n            name: 'Test User',\n            facebook: 'test',\n            twitter: '@test'\n          });\n          originalReplaceState = _windowProxy.default.replaceState;\n\n          _windowProxy.default.replaceState = function (params, title, url) {\n            newLocation = url;\n          };\n\n          newLocation = undefined;\n        });\n        (0, _mocha.afterEach)(function () {\n          _windowProxy.default.replaceState = originalReplaceState;\n        });\n        (0, _mocha.it)('input fields reset and validate correctly', async function () {\n          // test user name\n          await (0, _visit.visit)('/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-name-input]').value, 'current user name').to.equal('Test User');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Save'); // test empty user name\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', '');\n          await (0, _testHelpers.blur)('[data-test-name-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .first-form-group').classList.contains('error'), 'username input is in error state with blank input').to.be.true; // test too long user name\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', new Array(195).join('a'));\n          await (0, _testHelpers.blur)('[data-test-name-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .first-form-group').classList.contains('error'), 'username input is in error state with too long input').to.be.true; // reset name field\n\n          await (0, _testHelpers.fillIn)('[data-test-name-input]', 'Test User');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is default').to.equal('test-1');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', '');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is reset to original upon empty string').to.equal('test-1'); // Save changes\n\n          await (0, _testHelpers.click)('[data-test-save-button]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-save-button]').textContent.trim(), 'save button text').to.equal('Saved'); // CMD-S shortcut works\n\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'Test User');\n          await (0, _testHelpers.triggerEvent)('.gh-app', 'keydown', {\n            keyCode: 83,\n            // s\n            metaKey: _ctrlOrCmd.default === 'command',\n            ctrlKey: _ctrlOrCmd.default === 'ctrl'\n          }); // we've already saved in this test so there's no on-screen indication\n          // that we've had another save, check the request was fired instead\n\n          let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n              _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n              lastRequest = _this$server$pretende2[0];\n\n          let params = JSON.parse(lastRequest.requestBody);\n          (0, _chai.expect)(params.users[0].name).to.equal('Test User'); // check that the history state has been updated\n\n          (0, _chai.expect)(newLocation).to.equal('Test User');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'white space');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value, 'slug value is correctly dasherized').to.equal('white-space');\n          await (0, _testHelpers.fillIn)('[data-test-email-input]', 'thisisnotanemail');\n          await (0, _testHelpers.blur)('[data-test-email-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('.user-details-bottom .form-group:nth-of-type(3)').classList.contains('error'), 'email input should be in error state with invalid email').to.be.true;\n          await (0, _testHelpers.fillIn)('[data-test-email-input]', 'test@example.com');\n          await (0, _testHelpers.fillIn)('[data-test-location-input]', new Array(160).join('a'));\n          await (0, _testHelpers.blur)('[data-test-location-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-location-input]').closest('.form-group'), 'location input should be in error state').to.have.class('error');\n          await (0, _testHelpers.fillIn)('[data-test-location-input]', '');\n          await (0, _testHelpers.fillIn)('[data-test-website-input]', 'thisisntawebsite');\n          await (0, _testHelpers.blur)('[data-test-website-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-website-input]').closest('.form-group'), 'website input should be in error state').to.have.class('error');\n\n          let testSocialInput = async function testSocialInput(type, input, expectedValue) {\n            let expectedError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n            await (0, _testHelpers.fillIn)(\"[data-test-\".concat(type, \"-input]\"), input);\n            await (0, _testHelpers.blur)(\"[data-test-\".concat(type, \"-input]\"));\n            (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-\".concat(type, \"-input]\")).value, \"\".concat(type, \" value for \").concat(input)).to.equal(expectedValue);\n            (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-error=\\\"user-\".concat(type, \"\\\"]\")).textContent.trim(), \"\".concat(type, \" validation response for \").concat(input)).to.equal(expectedError);\n            (0, _chai.expect)((0, _testHelpers.find)(\"[data-test-error=\\\"user-\".concat(type, \"\\\"]\")).closest('.form-group').classList.contains('error'), \"\".concat(type, \" input should be in error state with '\").concat(input, \"'\")).to.equal(!!expectedError);\n          };\n\n          let testFacebookValidation = async function testFacebookValidation() {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return testSocialInput('facebook', ...args);\n          };\n\n          let testTwitterValidation = async function testTwitterValidation() {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            return testSocialInput('twitter', ...args);\n          }; // Testing Facebook input\n          // displays initial value\n\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'initial facebook value').to.equal('https://www.facebook.com/test');\n          await (0, _testHelpers.focus)('[data-test-facebook-input]');\n          await (0, _testHelpers.blur)('[data-test-facebook-input]'); // regression test: we still have a value after the input is\n          // focused and then blurred without any changes\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value, 'facebook value after blur with no change').to.equal('https://www.facebook.com/test');\n          await testFacebookValidation('facebook.com/username', 'https://www.facebook.com/username');\n          await testFacebookValidation('testuser', 'https://www.facebook.com/testuser');\n          await testFacebookValidation('ab99', 'https://www.facebook.com/ab99');\n          await testFacebookValidation('page/ab99', 'https://www.facebook.com/page/ab99');\n          await testFacebookValidation('page/*(&*(%%))', 'https://www.facebook.com/page/*(&*(%%))');\n          await testFacebookValidation('facebook.com/pages/some-facebook-page/857469375913?ref=ts', 'https://www.facebook.com/pages/some-facebook-page/857469375913?ref=ts');\n          await testFacebookValidation('https://www.facebook.com/groups/savethecrowninn', 'https://www.facebook.com/groups/savethecrowninn');\n          await testFacebookValidation('http://github.com/username', 'http://github.com/username', 'The URL must be in a format like https://www.facebook.com/yourPage');\n          await testFacebookValidation('http://github.com/pages/username', 'http://github.com/pages/username', 'The URL must be in a format like https://www.facebook.com/yourPage'); // Testing Twitter input\n          // loads fixtures and performs transform\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'initial twitter value').to.equal('https://twitter.com/test');\n          await (0, _testHelpers.focus)('[data-test-twitter-input]');\n          await (0, _testHelpers.blur)('[data-test-twitter-input]'); // regression test: we still have a value after the input is\n          // focused and then blurred without any changes\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-twitter-input]').value, 'twitter value after blur with no change').to.equal('https://twitter.com/test');\n          await testTwitterValidation('twitter.com/username', 'https://twitter.com/username');\n          await testTwitterValidation('testuser', 'https://twitter.com/testuser');\n          await testTwitterValidation('http://github.com/username', 'https://twitter.com/username');\n          await testTwitterValidation('*(&*(%%))', '*(&*(%%))', 'The URL must be in a format like https://twitter.com/yourUsername');\n          await testTwitterValidation('thisusernamehasmorethan15characters', 'thisusernamehasmorethan15characters', 'Your Username is not a valid Twitter Username'); // Testing bio input\n\n          await (0, _testHelpers.fillIn)('[data-test-website-input]', '');\n          await (0, _testHelpers.fillIn)('[data-test-bio-input]', new Array(210).join('a'));\n          await (0, _testHelpers.blur)('[data-test-bio-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-bio-input]').closest('.form-group'), 'bio input should be in error state').to.have.class('error'); // password reset ------\n          // button triggers validation\n\n          await (0, _testHelpers.click)('[data-test-save-pw-button]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when blank').to.have.string('can\\'t be blank'); // validates too short password (< 10 characters)\n\n          await (0, _testHelpers.fillIn)('[data-test-new-pass-input]', 'notlong');\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'notlong'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('[data-test-new-pass-input]', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when password too short').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when it\\'s too short').to.have.string('at least 10 characters long'); // validates unsafe password\n\n          await (0, _testHelpers.fillIn)('#user-password-new', 'ghostisawesome');\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'ghostisawesome'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('#user-password-new', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('#user-password-new').closest('.form-group'), 'new password has error class when password is insecure').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when it\\'s insecure').to.match(/you cannot use an insecure password/); // typing in inputs clears validation\n\n          await (0, _testHelpers.fillIn)('[data-test-new-pass-input]', 'thisissupersafe');\n          await (0, _testHelpers.triggerEvent)('[data-test-new-pass-input]', 'input');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'password validation is visible after typing').to.not.have.class('error'); // enter key triggers action\n\n          await (0, _testHelpers.triggerKeyEvent)('[data-test-new-pass-input]', 'keyup', 13);\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-ne2-pass-input]').closest('.form-group'), 'confirm password has error class when it doesn\\'t match').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-ne2-pass\"]').textContent, 'confirm password error when it doesn\\'t match').to.have.string('do not match'); // submits with correct details\n\n          await (0, _testHelpers.fillIn)('[data-test-ne2-pass-input]', 'thisissupersafe');\n          await (0, _testHelpers.click)('[data-test-save-pw-button]'); // hits the endpoint\n\n          let _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1),\n              _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1),\n              newRequest = _this$server$pretende4[0];\n\n          params = JSON.parse(newRequest.requestBody);\n          (0, _chai.expect)(newRequest.url, 'password request URL').to.match(/\\/users\\/password/); // eslint-disable-next-line camelcase\n\n          (0, _chai.expect)(params.password[0].user_id).to.equal(user.id.toString());\n          (0, _chai.expect)(params.password[0].newPassword).to.equal('thisissupersafe');\n          (0, _chai.expect)(params.password[0].ne2Password).to.equal('thisissupersafe'); // clears the fields\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').value, 'password field after submit').to.be.empty;\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-ne2-pass-input]').value, 'password verification field after submit').to.be.empty; // displays a notification\n\n          (0, _chai.expect)((0, _testHelpers.findAll)('.gh-notifications .gh-notification').length, 'password saved notification is displayed').to.equal(1);\n        });\n        (0, _mocha.it)('warns when leaving without saving', async function () {\n          await (0, _visit.visit)('/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-1');\n          await (0, _testHelpers.fillIn)('[data-test-slug-input]', 'another slug');\n          await (0, _testHelpers.blur)('[data-test-slug-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value).to.be.equal('another-slug');\n          await (0, _testHelpers.fillIn)('[data-test-facebook-input]', 'testuser');\n          await (0, _testHelpers.blur)('[data-test-facebook-input]');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value).to.be.equal('https://www.facebook.com/testuser');\n          await (0, _visit.visit)('/settings/staff');\n          (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-modal]').length, 'modal exists').to.equal(1); // Leave without saving\n\n          await (0, _testHelpers.click)('.fullscreen-modal [data-test-leave-button]');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/settings/staff');\n          await (0, _visit.visit)('/staff/test-1');\n          (0, _chai.expect)((0, _testHelpers.currentURL)(), 'currentURL').to.equal('/staff/test-1'); // settings were not saved\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-slug-input]').value).to.be.equal('test-1');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-facebook-input]').value).to.be.equal('https://www.facebook.com/test');\n        });\n      });\n      (0, _mocha.describe)('own user', function () {\n        (0, _mocha.it)('requires current password when changing password', async function () {\n          await (0, _visit.visit)(\"/staff/\".concat(admin.slug)); // test the \"old password\" field is validated\n\n          await (0, _testHelpers.click)('[data-test-save-pw-button]'); // old password has error\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-old-pass-input]').closest('.form-group'), 'old password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-old-pass\"]').textContent, 'old password error when blank').to.have.string('is required'); // new password has error\n\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-new-pass-input]').closest('.form-group'), 'new password has error class when blank').to.have.class('error');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"user-new-pass\"]').textContent, 'new password error when blank').to.have.string('can\\'t be blank'); // validation is cleared when typing\n\n          await (0, _testHelpers.fillIn)('[data-test-old-pass-input]', 'password');\n          await (0, _testHelpers.triggerEvent)('[data-test-old-pass-input]', 'input');\n          (0, _chai.expect)((0, _testHelpers.find)('[data-test-old-pass-input]').closest('.form-group'), 'old password validation is in error state after typing').to.not.have.class('error');\n        });\n      });\n      (0, _mocha.it)('redirects to 404 when user does not exist', async function () {\n        this.server.get('/users/slug/unknown/', function () {\n          return new _emberCliMirage.Response(404, {\n            'Content-Type': 'application/json'\n          }, {\n            errors: [{\n              message: 'User not found.',\n              type: 'NotFoundError'\n            }]\n          });\n        });\n        (0, _adapterError.errorOverride)();\n        await (0, _visit.visit)('/staff/unknown');\n        (0, _adapterError.errorReset)();\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('error404');\n        (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/staff/unknown');\n      });\n    });\n    (0, _mocha.describe)('when logged in as author', function () {\n      let adminRole, authorRole;\n      (0, _mocha.beforeEach)(async function () {\n        adminRole = this.server.create('role', {\n          name: 'Administrator'\n        });\n        authorRole = this.server.create('role', {\n          name: 'Author'\n        });\n        this.server.create('user', {\n          roles: [authorRole]\n        });\n        this.server.get('/invites/', function () {\n          return new _emberCliMirage.Response(403, {}, {\n            errors: [{\n              type: 'NoPermissionError',\n              message: 'You do not have permission to perform this action'\n            }]\n          });\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can access the staff page', async function () {\n        this.server.create('user', {\n          roles: [adminRole]\n        });\n        this.server.create('invite', {\n          role: authorRole\n        });\n        (0, _adapterError.errorOverride)();\n        await (0, _visit.visit)('/staff');\n        (0, _adapterError.errorReset)();\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('staff.index');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alert').length).to.equal(0);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/acceptance/subscribers-test\", [\"ember-cli-mirage/test-support/setup-mirage\", \"ember-simple-auth/test-support\", \"mocha\", \"@ember/test-helpers\", \"chai\", \"ghost-admin/tests/helpers/file-upload\", \"ghost-admin/tests/helpers/find\", \"ember-mocha\", \"ghost-admin/tests/helpers/visit\"], function (_setupMirage, _testSupport, _mocha, _testHelpers, _chai, _fileUpload, _find, _emberMocha, _visit) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Acceptance: Subscribers', function () {\n    let hooks = (0, _emberMocha.setupApplicationTest)();\n    (0, _setupMirage.default)(hooks);\n    (0, _mocha.it)('redirects to signin when not authenticated', async function () {\n      await (0, _testSupport.invalidateSession)();\n      await (0, _visit.visit)('/subscribers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/signin');\n    });\n    (0, _mocha.it)('redirects editors to posts', async function () {\n      let role = this.server.create('role', {\n        name: 'Editor'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/subscribers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"subscribers\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.it)('redirects authors to posts', async function () {\n      let role = this.server.create('role', {\n        name: 'Author'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/subscribers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"subscribers\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.it)('redirects contributors to posts', async function () {\n      let role = this.server.create('role', {\n        name: 'Contributor'\n      });\n      this.server.create('user', {\n        roles: [role]\n      });\n      await (0, _testSupport.authenticateSession)();\n      await (0, _visit.visit)('/subscribers');\n      (0, _chai.expect)((0, _testHelpers.currentURL)()).to.equal('/site');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-nav=\"subscribers\"]'), 'sidebar link').to.not.exist;\n    });\n    (0, _mocha.describe)('an admin', function () {\n      (0, _mocha.beforeEach)(async function () {\n        let role = this.server.create('role', {\n          name: 'Administrator'\n        });\n        this.server.create('user', {\n          roles: [role]\n        });\n        return await (0, _testSupport.authenticateSession)();\n      });\n      (0, _mocha.it)('can manage subscribers', async function () {\n        this.server.createList('subscriber', 40);\n        await (0, _visit.visit)('/');\n        await (0, _testHelpers.click)('[data-test-nav=\"subscribers\"]'); // it navigates to the correct page\n\n        (0, _chai.expect)((0, _testHelpers.currentRouteName)()).to.equal('subscribers.index'); // it has correct page title\n\n        (0, _chai.expect)(document.title, 'page title').to.equal('Subscribers - Test Blog'); // it loads the first page\n        // TODO: latest ember-in-viewport causes infinite scroll issues with\n        // FF here where it loads two pages straight away so we need to check\n        // if rows are greater than or equal to a single page\n\n        (0, _chai.expect)((0, _testHelpers.findAll)('.subscribers-table .lt-body .lt-row').length, 'number of subscriber rows').to.be.at.least(30); // it shows the total number of subscribers\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-total-subscribers]').textContent.trim(), 'displayed subscribers total').to.equal('(40)'); // it defaults to sorting by created_at desc\n\n        let _this$server$pretende = this.server.pretender.handledRequests.slice(-1),\n            _this$server$pretende2 = _slicedToArray(_this$server$pretende, 1),\n            lastRequest = _this$server$pretende2[0];\n\n        (0, _chai.expect)(lastRequest.queryParams.order).to.equal('created_at desc');\n        let createdAtHeader = (0, _find.findWithText)('.subscribers-table th', 'Subscription Date');\n        (0, _chai.expect)(createdAtHeader, 'createdAt column is sorted').to.have.class('is-sorted');\n        (0, _chai.expect)(createdAtHeader.querySelectorAll('.gh-icon-descending'), 'createdAt column has descending icon').to.exist; // click the column to re-order\n\n        await (0, _testHelpers.click)((0, _find.findWithText)('th', 'Subscription Date')); // it flips the directions and re-fetches\n\n        var _this$server$pretende3 = this.server.pretender.handledRequests.slice(-1);\n\n        var _this$server$pretende4 = _slicedToArray(_this$server$pretende3, 1);\n\n        lastRequest = _this$server$pretende4[0];\n        (0, _chai.expect)(lastRequest.queryParams.order).to.equal('created_at asc');\n        createdAtHeader = (0, _find.findWithText)('.subscribers-table th', 'Subscription Date');\n        (0, _chai.expect)(createdAtHeader.querySelector('.gh-icon-ascending'), 'createdAt column has ascending icon').to.exist; // TODO: scroll test disabled as ember-light-table doesn't calculate\n        // the scroll trigger element's positioning against the scroll\n        // container - https://github.com/offirgolan/ember-light-table/issues/201\n        //\n        // // scroll to the bottom of the table to simulate infinite scroll\n        // await find('.subscribers-table').scrollTop(find('.subscribers-table .ember-light-table').height() - 50);\n        //\n        // // trigger infinite scroll\n        // await triggerEvent('.subscribers-table tbody', 'scroll');\n        //\n        // // it loads the next page\n        // expect(find('.subscribers-table .lt-body .lt-row').length, 'number of subscriber rows after infinite-scroll')\n        //     .to.equal(40);\n        // click the add subscriber button\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-subscriber\"]'); // it displays the add subscriber modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"new-subscriber\"]'), 'add subscriber modal displayed').to.exist; // cancel the modal\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-new-subscriber\"]'); // it closes the add subscriber modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal]'), 'add subscriber modal displayed after cancel').to.not.exist; // save a new subscriber\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-subscriber\"]');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-subscriber-email\"]', 'test@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"create-subscriber\"]'); // the add subscriber modal is closed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal]'), 'add subscriber modal displayed after save').to.not.exist; // the subscriber is added to the table\n\n        (0, _chai.expect)((0, _testHelpers.find)('.subscribers-table .lt-body .lt-row:first-of-type .lt-cell:first-of-type'), 'first email in list after addition').to.contain.text('test@example.com'); // the table is scrolled to the top\n        // TODO: implement scroll to new record after addition\n        // expect(find('.subscribers-table').scrollTop(), 'scroll position after addition')\n        //     .to.equal(0);\n        // the subscriber total is updated\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-total-subscribers]'), 'subscribers total after addition').to.have.trimmed.text('(41)'); // saving a duplicate subscriber\n\n        await (0, _testHelpers.click)('[data-test-link=\"add-subscriber\"]');\n        await (0, _testHelpers.fillIn)('[data-test-input=\"new-subscriber-email\"]', 'test@example.com');\n        await (0, _testHelpers.click)('[data-test-button=\"create-subscriber\"]'); // the validation error is displayed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-error=\"new-subscriber-email\"]'), 'duplicate email validation').to.have.trimmed.text('Email already exists.'); // the subscriber is not added to the table\n\n        (0, _chai.expect)((0, _find.findAllWithText)('.lt-cell', 'test@example.com').length, 'number of \"test@example.com rows\"').to.equal(1); // the subscriber total is unchanged\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-total-subscribers]'), 'subscribers total after failed add').to.have.trimmed.text('(41)'); // deleting a subscriber\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-new-subscriber\"]');\n        await (0, _testHelpers.click)('.subscribers-table tbody tr:first-of-type button:last-of-type'); // it displays the delete subscriber modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"delete-subscriber\"]'), 'delete subscriber modal displayed').to.exist; // cancel the modal\n\n        await (0, _testHelpers.click)('[data-test-button=\"cancel-delete-subscriber\"]'); // it closes the add subscriber modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal]'), 'delete subscriber modal displayed after cancel').to.not.exist;\n        await (0, _testHelpers.click)('.subscribers-table tbody tr:first-of-type button:last-of-type');\n        await (0, _testHelpers.click)('[data-test-button=\"confirm-delete-subscriber\"]'); // the add subscriber modal is closed\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal]'), 'delete subscriber modal displayed after confirm').to.not.exist; // the subscriber is removed from the table\n\n        (0, _chai.expect)((0, _testHelpers.find)('.subscribers-table .lt-body .lt-row:first-of-type .lt-cell:first-of-type'), 'first email in list after addition').to.not.have.trimmed.text('test@example.com'); // the subscriber total is updated\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-total-subscribers]'), 'subscribers total after addition').to.have.trimmed.text('(40)'); // click the import subscribers button\n\n        await (0, _testHelpers.click)('[data-test-link=\"import-csv\"]'); // it displays the import subscribers modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"import-subscribers\"]'), 'import subscribers modal displayed').to.exist;\n        (0, _chai.expect)((0, _testHelpers.find)('.fullscreen-modal input[type=\"file\"]'), 'import modal contains file input').to.exist; // cancel the modal\n\n        await (0, _testHelpers.click)('[data-test-button=\"close-import-subscribers\"]'); // it closes the import subscribers modal\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal]'), 'import subscribers modal displayed after cancel').to.not.exist;\n        await (0, _testHelpers.click)('[data-test-link=\"import-csv\"]');\n        await (0, _fileUpload.fileUpload)('.fullscreen-modal input[type=\"file\"]', ['test'], {\n          name: 'test.csv'\n        }); // modal title changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-modal=\"import-subscribers\"] h1'), 'import modal title after import').to.have.trimmed.text('Import Successful'); // modal button changes\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-button=\"close-import-subscribers\"]'), 'import modal button text after import').to.have.trimmed.text('Close'); // subscriber total is updated\n\n        (0, _chai.expect)((0, _testHelpers.find)('[data-test-total-subscribers]'), 'subscribers total after import').to.have.trimmed.text('(90)'); // TODO: re-enable once bug in ember-light-table that triggers second page load is fixed\n        // table is reset\n        // [lastRequest] = this.server.pretender.handledRequests.slice(-1);\n        // expect(lastRequest.url, 'endpoint requested after import')\n        //     .to.match(/\\/subscribers\\/\\?/);\n        // expect(lastRequest.queryParams.page, 'page requested after import')\n        //     .to.equal('1');\n        // expect(find('.subscribers-table .lt-body .lt-row').length, 'number of rows in table after import')\n        //     .to.equal(30);\n        // close modal\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/helpers/adapter-error\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.errorOverride = errorOverride;\n  _exports.errorReset = errorReset;\n  // eslint-disable-line\n  // This is needed for testing error responses in acceptance tests\n  // See http://williamsbdev.com/posts/testing-rsvp-errors-handled-globally/\n  // ember-cli-shims doesn't export Logger\n  const Logger = Ember.Logger;\n  let originalException, originalLoggerError;\n\n  function errorOverride() {\n    originalException = Ember.Test.adapter.exception;\n    originalLoggerError = Logger.error;\n\n    Ember.Test.adapter.exception = function () {};\n\n    Logger.error = function () {};\n  }\n\n  function errorReset() {\n    Ember.Test.adapter.exception = originalException;\n    Logger.error = originalLoggerError;\n  }\n});","define(\"ghost-admin/tests/helpers/data-transfer\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var c = Ember.Object.extend({\n    getData: function getData() {\n      return this.get('payload');\n    },\n    setData: function setData(dataType, payload) {\n      this.set(\"data\", {\n        dataType: dataType,\n        payload: payload\n      });\n    }\n  });\n  c.reopenClass({\n    makeMockEvent: function makeMockEvent(payload) {\n      var transfer = this.create({\n        payload: payload\n      });\n      var res = {\n        dataTransfer: transfer\n      };\n      res.originalEvent = res;\n\n      res.originalEvent.preventDefault = function () {\n        console.log('prevent default');\n      };\n\n      res.originalEvent.stopPropagation = function () {\n        console.log('stop propagation');\n      };\n\n      return res;\n    },\n    createDomEvent: function createDomEvent(type) {\n      var event = document.createEvent(\"CustomEvent\");\n      event.initCustomEvent(type, true, true, null);\n      event.dataTransfer = {\n        data: {},\n        setData: function setData(type, val) {\n          this.data[type] = val;\n        },\n        getData: function getData(type) {\n          return this.data[type];\n        }\n      };\n      return event;\n    }\n  });\n  var _default = c;\n  _exports.default = _default;\n});","define(\"ghost-admin/tests/helpers/drag-drop\", [\"exports\", \"ember-native-dom-helpers\", \"ghost-admin/tests/helpers/mock-event\"], function (_exports, _emberNativeDomHelpers, _mockEvent) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  async function dragOver(dropSelector, moves) {\n    moves = moves || [[{\n      clientX: 1,\n      clientY: 1\n    }, dropSelector]];\n    return moves.forEach(async (_ref) => {\n      let _ref2 = _slicedToArray(_ref, 2),\n          position = _ref2[0],\n          selector = _ref2[1];\n\n      let event = new _mockEvent.default(position);\n      await (0, _emberNativeDomHelpers.triggerEvent)(selector || dropSelector, 'dragover', event);\n    });\n  }\n\n  async function drop(dragSelector, dragEvent, options) {\n    let dropSelector = options.drop,\n        dropEndOptions = options.dropEndOptions,\n        dragOverMoves = options.dragOverMoves;\n    let dropElement = await (0, _emberNativeDomHelpers.find)(dropSelector);\n\n    if (!dropElement) {\n      throw \"There are no drop targets by the given selector: '\".concat(dropSelector, \"'\");\n    }\n\n    await dragOver(dropSelector, dragOverMoves);\n\n    if (options.beforeDrop) {\n      await options.beforeDrop.call();\n    }\n\n    let event = new _mockEvent.default().useDataTransferData(dragEvent);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dropSelector, 'drop', event);\n    return await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragend', dropEndOptions);\n  }\n\n  async function drag(dragSelector) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let dragEvent = new _mockEvent.default(options.dragStartOptions);\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'mouseover');\n    await (0, _emberNativeDomHelpers.triggerEvent)(dragSelector, 'dragstart', dragEvent);\n\n    if (options.afterDrag) {\n      await options.afterDrag.call();\n    }\n\n    if (options.drop) {\n      await drop(dragSelector, dragEvent, options);\n    }\n  }\n});","define(\"ghost-admin/tests/helpers/ember-drag-drop\", [\"exports\", \"jquery\", \"ghost-admin/tests/helpers/data-transfer\"], function (_exports, _jquery, _dataTransfer) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.drag = drag;\n\n  function drop($dragHandle, dropCssPath, dragEvent) {\n    let $dropTarget = (0, _jquery.default)(dropCssPath);\n\n    if ($dropTarget.length === 0) {\n      throw \"There are no drop targets by the given selector: '\".concat(dropCssPath, \"'\");\n    }\n\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'dragover', _dataTransfer.default.makeMockEvent());\n    });\n    Ember.run(() => {\n      triggerEvent($dropTarget, 'drop', _dataTransfer.default.makeMockEvent(dragEvent.dataTransfer.get('data.payload')));\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragend', _dataTransfer.default.makeMockEvent());\n    });\n  }\n\n  function drag(cssPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    let dragEvent = _dataTransfer.default.makeMockEvent();\n\n    let $dragHandle = (0, _jquery.default)(cssPath);\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'mouseover');\n    });\n    Ember.run(() => {\n      triggerEvent($dragHandle, 'dragstart', dragEvent);\n    });\n    andThen(function () {\n      if (options.beforeDrop) {\n        options.beforeDrop.call();\n      }\n    });\n    andThen(function () {\n      if (options.drop) {\n        drop($dragHandle, options.drop, dragEvent);\n      }\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/ember-power-calendar\", [\"exports\", \"ember-power-calendar/test-support\"], function (_exports, _testSupport) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('calendarCenter', async function (app, selector, newCenter) {\n      return (0, _testSupport.calendarCenter)(selector, newCenter);\n    });\n    Ember.Test.registerAsyncHelper('calendarSelect', async function (app, selector, selected) {\n      return (0, _testSupport.calendarSelect)(selector, selected);\n    });\n  }\n});","define(\"ghost-admin/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn(...arguments);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"ghost-admin/tests/helpers/ember-simple-auth\", [\"exports\", \"ember-simple-auth/authenticators/test\"], function (_exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.authenticateSession = authenticateSession;\n  _exports.currentSession = currentSession;\n  _exports.invalidateSession = invalidateSession;\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const container = app.__container__;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n\n    return app.testHelpers.wait();\n  }\n});","define(\"ghost-admin/tests/helpers/file-upload\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createFile = createFile;\n  _exports.fileUpload = fileUpload;\n\n  function createFile() {\n    let content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['test'];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let name = options.name,\n        type = options.type;\n    let file = new Blob(content, {\n      type: type ? type : 'text/plain'\n    });\n    file.name = name ? name : 'test.txt';\n    return file;\n  }\n\n  function fileUpload(target, content, options) {\n    let file = createFile(content, options); // TODO: replace `[file]` with `{files: [file]}` after upgrading ember-test-helpers\n\n    return (0, _testHelpers.triggerEvent)(target, 'change', [file]);\n  }\n});","define(\"ghost-admin/tests/helpers/find\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.elementHasText = elementHasText;\n  _exports.findWithText = findWithText;\n  _exports.findAllWithText = findAllWithText;\n\n  function elementHasText(element, text) {\n    return RegExp(text).test(element.textContent);\n  }\n\n  function findWithText(selector, text) {\n    return Array.from((0, _testHelpers.findAll)(selector)).find(element => elementHasText(element, text));\n  }\n\n  function findAllWithText(selector, text) {\n    return Array.from((0, _testHelpers.findAll)(selector)).filter(element => elementHasText(element, text));\n  }\n});","define(\"ghost-admin/tests/helpers/mock-event\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createDomEvent = createDomEvent;\n  _exports.default = void 0;\n\n  class DataTransfer {\n    constructor() {\n      this.data = {};\n    }\n\n    setData(type, value) {\n      this.data[type] = value;\n      return this;\n    }\n\n    getData() {\n      let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Text\";\n      return this.data[type];\n    }\n\n    setDragImage() {}\n\n  }\n\n  class MockEvent {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.dataTransfer = new DataTransfer();\n      this.dataTransfer.setData('Text', options.dataTransferData);\n      this.originalEvent = this;\n      this.setProperties(options);\n    }\n\n    useDataTransferData(otherEvent) {\n      this.dataTransfer.setData('Text', otherEvent.dataTransfer.getData());\n      return this;\n    }\n\n    setProperties(props) {\n      for (let prop in props) {\n        this[prop] = props[prop];\n      }\n\n      return this;\n    }\n\n    preventDefault() {}\n\n    stopPropagation() {}\n\n  }\n\n  _exports.default = MockEvent;\n\n  function createDomEvent(type) {\n    let event = document.createEvent(\"CustomEvent\");\n    event.initCustomEvent(type, true, true, null);\n    event.dataTransfer = new DataTransfer();\n    return event;\n  }\n});","define(\"ghost-admin/tests/helpers/resolver\", [\"exports\", \"ghost-admin/resolver\", \"ghost-admin/config/environment\"], function (_exports, _resolver, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  const resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n  var _default = resolver;\n  _exports.default = _default;\n});","define(\"ghost-admin/tests/helpers/visit\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.visit = visit;\n\n  // TODO: remove once bug is fixed in Ember\n  // see https://github.com/emberjs/ember-test-helpers/issues/332\n  async function visit(url) {\n    try {\n      await (0, _testHelpers.visit)(url);\n    } catch (e) {\n      if (e.message !== 'TransitionAborted') {\n        throw e;\n      }\n    }\n\n    await (0, _testHelpers.settled)();\n  }\n});","define(\"ghost-admin/tests/integration/adapters/tag-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Adapter: tag', function () {\n    (0, _emberMocha.setupTest)('adapter:tag', {\n      integration: true\n    });\n    let server, store;\n    beforeEach(function () {\n      store = this.container.lookup('service:store');\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads tags from regular endpoint when all are fetched', function (done) {\n      server.get('/ghost/api/v2/admin/tags/', function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          tags: [{\n            id: 1,\n            name: 'Tag 1',\n            slug: 'tag-1'\n          }, {\n            id: 2,\n            name: 'Tag 2',\n            slug: 'tag-2'\n          }]\n        })];\n      });\n      store.findAll('tag', {\n        reload: true\n      }).then(tags => {\n        (0, _chai.expect)(tags).to.be.ok;\n        (0, _chai.expect)(tags.objectAtContent(0).get('name')).to.equal('Tag 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('loads tag from slug endpoint when single tag is queried and slug is passed in', function (done) {\n      server.get('/ghost/api/v2/admin/tags/slug/tag-1/', function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          tags: [{\n            id: 1,\n            slug: 'tag-1',\n            name: 'Tag 1'\n          }]\n        })];\n      });\n      store.queryRecord('tag', {\n        slug: 'tag-1'\n      }).then(tag => {\n        (0, _chai.expect)(tag).to.be.ok;\n        (0, _chai.expect)(tag.get('name')).to.equal('Tag 1');\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/adapters/user-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Adapter: user', function () {\n    (0, _emberMocha.setupTest)('adapter:user', {\n      integration: true\n    });\n    let server, store;\n    beforeEach(function () {\n      store = this.container.lookup('service:store');\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads users from regular endpoint when all are fetched', function (done) {\n      server.get('/ghost/api/v2/admin/users/', function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            name: 'User 1',\n            slug: 'user-1'\n          }, {\n            id: 2,\n            name: 'User 2',\n            slug: 'user-2'\n          }]\n        })];\n      });\n      store.findAll('user', {\n        reload: true\n      }).then(users => {\n        (0, _chai.expect)(users).to.be.ok;\n        (0, _chai.expect)(users.objectAtContent(0).get('name')).to.equal('User 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('loads user from slug endpoint when single user is queried and slug is passed in', function (done) {\n      server.get('/ghost/api/v2/admin/users/slug/user-1/', function () {\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            slug: 'user-1',\n            name: 'User 1'\n          }]\n        })];\n      });\n      store.queryRecord('user', {\n        slug: 'user-1'\n      }).then(user => {\n        (0, _chai.expect)(user).to.be.ok;\n        (0, _chai.expect)(user.get('name')).to.equal('User 1');\n        done();\n      });\n    });\n    (0, _mocha.it)('handles \"include\" parameter when querying single user via slug', function (done) {\n      server.get('/ghost/api/v2/admin/users/slug/user-1/', request => {\n        let params = request.queryParams;\n        (0, _chai.expect)(params.include, 'include query').to.equal('roles,count.posts');\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          users: [{\n            id: 1,\n            slug: 'user-1',\n            name: 'User 1',\n            count: {\n              posts: 5\n            }\n          }]\n        })];\n      });\n      store.queryRecord('user', {\n        slug: 'user-1',\n        include: 'count.posts'\n      }).then(user => {\n        (0, _chai.expect)(user).to.be.ok;\n        (0, _chai.expect)(user.get('name')).to.equal('User 1');\n        (0, _chai.expect)(user.get('count.posts')).to.equal(5);\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-alert-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-alert', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MrX1+PQS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-alert\\\",null,[[\\\"message\\\"],[[25,[\\\"message\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let alert = this.element.querySelector('article.gh-alert');\n      (0, _chai.expect)(alert).to.exist;\n      (0, _chai.expect)(alert).to.contain.text('Test message');\n    });\n    (0, _mocha.it)('maps message types to CSS classes', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MrX1+PQS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-alert\\\",null,[[\\\"message\\\"],[[25,[\\\"message\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let alert = this.element.querySelector('article.gh-alert');\n      this.set('message.type', 'success');\n      (0, _chai.expect)(alert, 'success class is green').to.have.class('gh-alert-green');\n      this.set('message.type', 'error');\n      (0, _chai.expect)(alert, 'error class is red').to.have.class('gh-alert-red');\n      this.set('message.type', 'warn');\n      (0, _chai.expect)(alert, 'warn class is yellow').to.have.class('gh-alert-blue');\n      this.set('message.type', 'info');\n      (0, _chai.expect)(alert, 'info class is blue').to.have.class('gh-alert-blue');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-alerts-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  let notificationsStub = Ember.Service.extend({\n    alerts: Ember.A()\n  });\n  (0, _mocha.describe)('Integration: Component: gh-alerts', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:notifications', notificationsStub);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('alerts', [{\n        message: 'First',\n        type: 'error'\n      }, {\n        message: 'Second',\n        type: 'warn'\n      }]);\n    });\n    (0, _mocha.it)('renders', async function () {\n      let notifications = this.owner.lookup('service:notifications');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0QRLZ9qB\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-alerts\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-alerts').length).to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alerts').children.length).to.equal(2);\n      notifications.set('alerts', Ember.A());\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-alerts').children.length).to.equal(0);\n    });\n    (0, _mocha.it)('triggers \"notify\" action when message count changes', async function () {\n      let notifications = this.owner.lookup('service:notifications');\n      let expectedCount = 0; // test double for notify action\n\n      this.set('notify', count => (0, _chai.expect)(count).to.equal(expectedCount));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"u6LDMyzP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-alerts\\\",null,[[\\\"notify\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"notify\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      expectedCount = 3;\n      notifications.alerts.pushObject({\n        message: 'Third',\n        type: 'success'\n      });\n      await (0, _testHelpers.settled)();\n      expectedCount = 0;\n      notifications.set('alerts', Ember.A());\n      await (0, _testHelpers.settled)();\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-basic-dropdown-test\", [\"ember-basic-dropdown/test-support/helpers\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_helpers, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-basic-dropdown', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('closes when dropdown service fires close event', async function () {\n      let dropdownService = this.owner.lookup('service:dropdown');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mSCFaJcZ\",\n        \"block\": \"{\\\"symbols\\\":[\\\"dropdown\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-basic-dropdown\\\",null,null,{\\\"statements\\\":[[0,\\\"                \\\"],[7,\\\"button\\\"],[11,\\\"class\\\",\\\"ember-basic-dropdown-trigger\\\"],[12,\\\"onclick\\\",[24,1,[\\\"actions\\\",\\\"toggle\\\"]]],[9],[10],[0,\\\"\\\\n\\\"],[4,\\\"if\\\",[[24,1,[\\\"isOpen\\\"]]],null,{\\\"statements\\\":[[0,\\\"                    \\\"],[7,\\\"div\\\"],[11,\\\"id\\\",\\\"dropdown-is-opened\\\"],[9],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _helpers.clickTrigger)();\n      (0, _chai.expect)((0, _testHelpers.find)('#dropdown-is-opened')).to.exist;\n      dropdownService.closeDropdowns();\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('#dropdown-is-opened')).to.not.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-cm-editor-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  // NOTE: If the browser window is not focused/visible CodeMirror (or Chrome?) will\n  // take longer to respond to/fire events so it's possible that some of these tests\n  // will take 1-3 seconds\n  (0, _mocha.describe)('Integration: Component: gh-cm-editor', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('handles change event', async function () {\n      this.set('text', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"PS3wVaUy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-cm-editor\\\",[[25,[\\\"text\\\"]]],[[\\\"class\\\",\\\"update\\\"],[\\\"gh-input\\\",[29,\\\"action\\\",[[24,0,[]],[29,\\\"mut\\\",[[25,[\\\"text\\\"]]],null]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // access CodeMirror directly as it doesn't pick up changes to the textarea\n\n      let cm = (0, _testHelpers.find)('.gh-input .CodeMirror').CodeMirror;\n      cm.setValue('Testing');\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(this.get('text'), 'text value after CM editor change').to.equal('Testing');\n    });\n    (0, _mocha.it)('can autofocus', async function () {\n      // CodeMirror's events are triggered outside of anything we can watch for\n      // in the tests so let's run the class check when we know the event has\n      // been fired and timeout if it's not fired as we expect\n      let onFocus = async () => {\n        // wait for runloop to finish so that the new class has been rendered\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-input').classList.contains('focus'), 'has focused class on first render with autofocus').to.be.true;\n      };\n\n      this.set('onFocus', onFocus);\n      this.set('text', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YSC00Aa8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-cm-editor\\\",[[25,[\\\"text\\\"]]],[[\\\"class\\\",\\\"update\\\",\\\"autofocus\\\",\\\"focus-in\\\"],[\\\"gh-input\\\",[29,\\\"action\\\",[[24,0,[]],[29,\\\"mut\\\",[[25,[\\\"text\\\"]]],null]],null],true,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"onFocus\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-download-count-test\", [\"pretender\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-download-count', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n      server.get('https://count.ghost.org/', function () {\n        return [200, {}, JSON.stringify({\n          count: 42\n        })];\n      });\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('hits count endpoint and renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"57WHsc7k\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-download-count\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('42');\n    });\n    (0, _mocha.it)('renders with a block', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"1CmH0DRo\",\n        \"block\": \"{\\\"symbols\\\":[\\\"count\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-download-count\\\",null,null,{\\\"statements\\\":[[0,\\\"                \\\"],[1,[24,1,[]],false],[0,\\\" downloads\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('42 downloads');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-feature-flag-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const featureStub = Ember.Service.extend({\n    testFlag: true\n  });\n  (0, _mocha.describe)('Integration: Component: gh-feature-flag', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:feature', featureStub);\n    });\n    (0, _mocha.it)('renders properties correctly', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G+symXiY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-feature-flag\\\",[\\\"testFlag\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').getAttribute('for')).to.equal((0, _testHelpers.find)('input[type=\"checkbox\"]').id);\n    });\n    (0, _mocha.it)('renders correctly when flag is set to true', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G+symXiY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-feature-flag\\\",[\\\"testFlag\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.true;\n    });\n    (0, _mocha.it)('renders correctly when flag is set to false', async function () {\n      let feature = this.owner.lookup('service:feature');\n      feature.set('testFlag', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G+symXiY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-feature-flag\\\",[\\\"testFlag\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.false;\n    });\n    (0, _mocha.it)('updates to reflect changes in flag property', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G+symXiY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-feature-flag\\\",[\\\"testFlag\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.true;\n      await (0, _testHelpers.click)('label');\n      (0, _chai.expect)((0, _testHelpers.find)('label input[type=\"checkbox\"]').checked).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-file-uploader-test\", [\"jquery\", \"pretender\", \"sinon\", \"ghost-admin/services/ajax\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_jquery, _pretender, _sinon, _ajax, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  const notificationsStub = Ember.Service.extend({\n    showAPIError() {// noop - to be stubbed\n    }\n\n  });\n\n  const stubSuccessfulUpload = function stubSuccessfulUpload(server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post('/ghost/api/v2/admin/images/', function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"url\":\"/content/images/test.png\"}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function stubFailedUpload(server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post('/ghost/api/v2/admin/images/', function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: \"Error: \".concat(error)\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-file-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n      this.set('uploadUrl', '/ghost/api/v2/admin/images/');\n      this.owner.register('service:notifications', notificationsStub);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4h7YSWbN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-file-uploader\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').textContent.trim(), 'default label').to.equal('Select or drag-and-drop a file');\n    });\n    (0, _mocha.it)('allows file input \"accept\" attribute to be changed', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4h7YSWbN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-file-uploader\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]').getAttribute('accept'), 'default \"accept\" attribute').to.equal('text/csv');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"AFUbEaGA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"accept\\\"],[\\\"application/zip\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]').getAttribute('accept'), 'specified \"accept\" attribute').to.equal('application/zip');\n    });\n    (0, _mocha.it)('renders form with supplied label text', async function () {\n      this.set('labelText', 'My label');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"x1K3qRT4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"labelText\\\"],[[25,[\\\"labelText\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('label').textContent.trim(), 'label').to.equal('My label');\n    });\n    (0, _mocha.it)('generates request to supplied endpoint', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n      (0, _chai.expect)(server.handledRequests[0].url).to.equal('/ghost/api/v2/admin/images/');\n    });\n    (0, _mocha.it)('fires uploadSuccess action on successful upload', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WKe7SlaJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.eql({\n        url: '/content/images/test.png'\n      });\n    });\n    (0, _mocha.it)('doesn\\'t fire uploadSuccess action on failed upload', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubFailedUpload(server, 500);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WKe7SlaJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.false;\n    });\n    (0, _mocha.it)('fires fileSelected action on file selection', async function () {\n      let fileSelected = _sinon.default.spy();\n\n      this.set('fileSelected', fileSelected);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"pdE7ARYd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"fileSelected\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"fileSelected\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(fileSelected.calledOnce).to.be.true;\n      (0, _chai.expect)(fileSelected.args[0]).to.not.be.empty;\n    });\n    (0, _mocha.it)('fires uploadStarted action on upload start', async function () {\n      let uploadStarted = _sinon.default.spy();\n\n      this.set('uploadStarted', uploadStarted);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"POtjW+hW\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadStarted\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadStarted\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadStarted.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on successful upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"RKRAhOKM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadFinished\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFinished\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on failed upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubFailedUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"RKRAhOKM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadFinished\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFinished\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('displays invalid file type error', async function () {\n      stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green').length, 'reset button is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-btn-green').textContent).to.equal('Try Again');\n    });\n    (0, _mocha.it)('displays file too large for server error', async function () {\n      stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('handles file too large error directly from the web server', async function () {\n      server.post('/ghost/api/v2/admin/images/', function () {\n        return [413, {}, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file you uploaded was larger/);\n    });\n    (0, _mocha.it)('displays other server-side error with message', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Error: UnknownError/);\n    });\n    (0, _mocha.it)('handles unknown failure', async function () {\n      server.post('/ghost/api/v2/admin/images/', function () {\n        return [500, {\n          'Content-Type': 'application/json'\n        }, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Something went wrong/);\n    });\n    (0, _mocha.it)('triggers notifications.showAPIError for VersionMismatchError', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'VersionMismatchError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(showAPIError.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(showAPIError.called).to.be.false;\n    });\n    (0, _mocha.it)('can be reset after a failed upload', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    }); // skipped due to random failures on Travis - https://github.com/TryGhost/Ghost/issues/10308\n\n    _mocha.it.skip('displays upload progress', async function () {\n      // pretender fires a progress event every 50ms\n      stubSuccessfulUpload(server, 150);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vYIz5idS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\"],[[25,[\\\"uploadUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      }); // TODO: replace with waitFor/waitUntil helpers\n      // after 75ms we should have had one progress event\n\n      Ember.run.later(this, function () {\n        (0, _chai.expect)((0, _testHelpers.findAll)('.progress .bar').length).to.equal(1);\n\n        let _find$getAttribute$ma = (0, _testHelpers.find)('.progress .bar').getAttribute('style').match(/width: (\\d+)%?/),\n            _find$getAttribute$ma2 = _slicedToArray(_find$getAttribute$ma, 2),\n            percentageWidth = _find$getAttribute$ma2[1];\n\n        percentageWidth = Number.parseInt(percentageWidth);\n        (0, _chai.expect)(percentageWidth).to.be.above(0);\n        (0, _chai.expect)(percentageWidth).to.be.below(100);\n      }, 75);\n      await (0, _testHelpers.settled)();\n    });\n\n    (0, _mocha.it)('handles drag over/leave', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4h7YSWbN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-file-uploader\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      Ember.run(() => {\n        // eslint-disable-next-line new-cap\n        let dragover = _jquery.default.Event('dragover', {\n          dataTransfer: {\n            files: []\n          }\n        });\n\n        this.$('.gh-image-uploader').trigger(dragover);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.true;\n      await (0, _testHelpers.triggerEvent)('.gh-image-uploader', 'dragleave');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.false;\n    });\n    (0, _mocha.it)('triggers file upload on file drop', async function () {\n      let uploadSuccess = _sinon.default.spy(); // eslint-disable-next-line new-cap\n\n\n      let drop = _jquery.default.Event('drop', {\n        dataTransfer: {\n          files: [(0, _fileUpload.createFile)(['test'], {\n            name: 'test.csv'\n          })]\n        }\n      });\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WKe7SlaJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      Ember.run(() => {\n        this.$('.gh-image-uploader').trigger(drop);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.eql({\n        url: '/content/images/test.png'\n      });\n    });\n    (0, _mocha.it)('validates extension by default', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LuQ0xPl/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"uploadFailed\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFailed\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.txt'\n      });\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n    (0, _mocha.it)('uploads if validate action supplied and returns true', async function () {\n      let validate = _sinon.default.stub().returns(true);\n\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+NJMMXop\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"validate\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"validate\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', async function () {\n      let validate = _sinon.default.stub().returns(new _ajax.UnsupportedMediaTypeError());\n\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"NcmdBKZZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-file-uploader\\\",null,[[\\\"url\\\",\\\"uploadSuccess\\\",\\\"uploadFailed\\\",\\\"validate\\\"],[[25,[\\\"uploadUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFailed\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"validate\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.csv'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The file type you uploaded is not supported/);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-image-uploader-test\", [\"jquery\", \"pretender\", \"sinon\", \"ghost-admin/services/ajax\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_jquery, _pretender, _sinon, _ajax, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  const notificationsStub = Ember.Service.extend({\n    showAPIError()\n    /* error, options */\n    {// noop - to be stubbed\n    }\n\n  });\n  const sessionStub = Ember.Service.extend({\n    isAuthenticated: false,\n\n    init() {\n      this._super(...arguments);\n\n      let authenticated = {\n        access_token: 'AccessMe123'\n      };\n      this.authenticated = authenticated;\n      this.data = {\n        authenticated\n      };\n    }\n\n  });\n\n  const stubSuccessfulUpload = function stubSuccessfulUpload(server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post('/ghost/api/v2/admin/images/upload/', function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"images\": [{\"url\":\"/content/images/test.png\"}]}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function stubFailedUpload(server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post('/ghost/api/v2/admin/images/upload/', function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: \"Error: \".concat(error)\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-image-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      this.owner.register('service:session', sessionStub);\n      this.owner.register('service:notifications', notificationsStub);\n      this.set('update', function () {});\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('image', 'http://example.com/test.png');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"97ipQIVo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\"],[[25,[\\\"image\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.$()).to.have.length(1);\n    });\n    (0, _mocha.it)('renders form with supplied alt text', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"9IMYuFjy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"altText\\\"],[[25,[\\\"image\\\"]],\\\"text test\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-file-input-description]')).to.have.trimmed.text('Upload image of \"text test\"');\n    });\n    (0, _mocha.it)('renders form with supplied text', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kDKylQC1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"text\\\"],[[25,[\\\"image\\\"]],\\\"text test\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-file-input-description]')).to.have.trimmed.text('text test');\n    });\n    (0, _mocha.it)('generates request to correct endpoint', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n      (0, _chai.expect)(server.handledRequests[0].url).to.equal('/ghost/api/v2/admin/images/upload/');\n      (0, _chai.expect)(server.handledRequests[0].requestHeaders.Authorization).to.be.undefined;\n    });\n    (0, _mocha.it)('fires update action on successful upload', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(update.calledOnce).to.be.true;\n      (0, _chai.expect)(update.firstCall.args[0]).to.equal('/content/images/test.png');\n    });\n    (0, _mocha.it)('doesn\\'t fire update action on failed upload', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      stubFailedUpload(server, 500);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(update.calledOnce).to.be.false;\n    });\n    (0, _mocha.it)('fires fileSelected action on file selection', async function () {\n      let fileSelected = _sinon.default.spy();\n\n      this.set('fileSelected', fileSelected);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QLrE6lJh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"fileSelected\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"fileSelected\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(fileSelected.calledOnce).to.be.true;\n      (0, _chai.expect)(fileSelected.args[0]).to.not.be.empty;\n    });\n    (0, _mocha.it)('fires uploadStarted action on upload start', async function () {\n      let uploadStarted = _sinon.default.spy();\n\n      this.set('uploadStarted', uploadStarted);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2jBZQPLh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"uploadStarted\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadStarted\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadStarted.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on successful upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Dfz2ks5N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"uploadFinished\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFinished\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('fires uploadFinished action on failed upload', async function () {\n      let uploadFinished = _sinon.default.spy();\n\n      this.set('uploadFinished', uploadFinished);\n      stubFailedUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Dfz2ks5N\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"uploadFinished\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFinished\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(uploadFinished.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('displays invalid file type error', async function () {\n      stubFailedUpload(server, 415, 'UnsupportedMediaTypeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-btn-green').length, 'reset button is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-btn-green').textContent).to.equal('Try Again');\n    });\n    (0, _mocha.it)('displays file too large for server error', async function () {\n      stubFailedUpload(server, 413, 'RequestEntityTooLargeError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image you uploaded was larger/);\n    });\n    (0, _mocha.it)('handles file too large error directly from the web server', async function () {\n      server.post('/ghost/api/v2/admin/images/upload/', function () {\n        return [413, {}, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image you uploaded was larger/);\n    });\n    (0, _mocha.it)('displays other server-side error with message', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Error: UnknownError/);\n    });\n    (0, _mocha.it)('handles unknown failure', async function () {\n      server.post('/ghost/api/v2/admin/images/upload/', function () {\n        return [500, {\n          'Content-Type': 'application/json'\n        }, ''];\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/Something went wrong/);\n    });\n    (0, _mocha.it)('triggers notifications.showAPIError for VersionMismatchError', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'VersionMismatchError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(showAPIError.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('doesn\\'t trigger notifications.showAPIError for other errors', async function () {\n      let showAPIError = _sinon.default.spy();\n\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('showAPIError', showAPIError);\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(showAPIError.called).to.be.false;\n    });\n    (0, _mocha.it)('can be reset after a failed upload', async function () {\n      stubFailedUpload(server, 400, 'UnknownError');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        type: 'test.png'\n      });\n      await (0, _testHelpers.click)('.gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    });\n    (0, _mocha.it)('displays upload progress', async function () {\n      // pretender fires a progress event every 50ms\n      stubSuccessfulUpload(server, 150);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      await (0, _testHelpers.waitFor)('.progress .bar');\n      let progressBar = (0, _testHelpers.find)('.progress .bar');\n      await (0, _testHelpers.waitUntil)(function () {\n        let _progressBar$getAttri = progressBar.getAttribute('style').match(/width: (\\d+)%?/),\n            _progressBar$getAttri2 = _slicedToArray(_progressBar$getAttri, 2),\n            percentageWidth = _progressBar$getAttri2[1];\n\n        percentageWidth = Number.parseInt(percentageWidth);\n        return percentageWidth > 0;\n      }, {\n        timeout: 150\n      });\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('handles drag over/leave', async function () {\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lZeMtmXX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"image\\\",\\\"update\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      Ember.run(() => {\n        // eslint-disable-next-line new-cap\n        let dragover = _jquery.default.Event('dragover', {\n          dataTransfer: {\n            files: []\n          }\n        });\n\n        this.$('.gh-image-uploader').trigger(dragover);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.true;\n      await (0, _testHelpers.triggerEvent)('.gh-image-uploader', 'dragleave');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-image-uploader').classList.contains('-drag-over'), 'has drag-over class').to.be.false;\n    });\n    (0, _mocha.it)('triggers file upload on file drop', async function () {\n      let uploadSuccess = _sinon.default.spy(); // eslint-disable-next-line new-cap\n\n\n      let drop = _jquery.default.Event('drop', {\n        dataTransfer: {\n          files: [(0, _fileUpload.createFile)(['test'], {\n            name: 'test.png'\n          })]\n        }\n      });\n\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ZZpzvEK6\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"uploadSuccess\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      Ember.run(() => {\n        this.$('.gh-image-uploader').trigger(drop);\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.firstCall.args[0]).to.equal('/content/images/test.png');\n    });\n    (0, _mocha.it)('validates extension by default', async function () {\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Smin+wvy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"uploadSuccess\\\",\\\"uploadFailed\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFailed\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.json'\n      });\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n    });\n    (0, _mocha.it)('uploads if validate action supplied and returns true', async function () {\n      let validate = _sinon.default.stub().returns(true);\n\n      let uploadSuccess = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Z/6y+e4w\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"uploadSuccess\\\",\\\"validate\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"validate\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.txt'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.calledOnce).to.be.true;\n    });\n    (0, _mocha.it)('skips upload and displays error if validate action supplied and doesn\\'t return true', async function () {\n      let validate = _sinon.default.stub().returns(new _ajax.UnsupportedMediaTypeError());\n\n      let uploadSuccess = _sinon.default.spy();\n\n      let uploadFailed = _sinon.default.spy();\n\n      this.set('validate', validate);\n      this.set('uploadSuccess', uploadSuccess);\n      this.set('uploadFailed', uploadFailed);\n      stubSuccessfulUpload(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VZiKio6k\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader\\\",null,[[\\\"uploadSuccess\\\",\\\"uploadFailed\\\",\\\"validate\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadSuccess\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFailed\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"validate\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _fileUpload.fileUpload)('input[type=\"file\"]', ['test'], {\n        name: 'test.png'\n      });\n      (0, _chai.expect)(validate.calledOnce).to.be.true;\n      (0, _chai.expect)(uploadSuccess.called).to.be.false;\n      (0, _chai.expect)(uploadFailed.calledOnce).to.be.true;\n      (0, _chai.expect)((0, _testHelpers.findAll)('.failed').length, 'error message is displayed').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('.failed').textContent).to.match(/The image type you uploaded is not supported/);\n    });\n    (0, _mocha.describe)('unsplash', function () {\n      (0, _mocha.it)('has unsplash icon only when unsplash is active & allowed');\n      (0, _mocha.it)('opens unsplash modal when icon clicked');\n      (0, _mocha.it)('inserts unsplash image when selected');\n      (0, _mocha.it)('closes unsplash modal when close is triggered');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-image-uploader-with-preview-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-image-uploader-with-preview', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders image if provided', async function () {\n      this.set('image', 'http://example.com/test.png');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fVWs7Xs+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader-with-preview\\\",null,[[\\\"image\\\"],[[25,[\\\"image\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-image-uploader.-with-image').length).to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('img').getAttribute('src')).to.equal('http://example.com/test.png');\n    });\n    (0, _mocha.it)('renders upload form when no image provided', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fVWs7Xs+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader-with-preview\\\",null,[[\\\"image\\\"],[[25,[\\\"image\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('input[type=\"file\"]').length).to.equal(1);\n    });\n    (0, _mocha.it)('triggers remove action when delete icon is clicked', async function () {\n      let remove = _sinon.default.spy();\n\n      this.set('remove', remove);\n      this.set('image', 'http://example.com/test.png');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QiknHRmG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-image-uploader-with-preview\\\",null,[[\\\"image\\\",\\\"remove\\\"],[[25,[\\\"image\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"remove\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.image-cancel');\n      (0, _chai.expect)(remove.calledOnce).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-member-avatar-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-member-avatar', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('member', {\n        name: 'Homer Simpson'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ybGA89I7\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"gh-member-avatar\\\",[],[[\\\"@member\\\"],[[23,\\\"member\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let avatar = this.element;\n      (0, _chai.expect)(avatar).to.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-navitem-test\", [\"ghost-admin/models/navigation-item\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_navigationItem, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-navitem', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.set('baseUrl', 'http://localhost:2368');\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XqhuwfiQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let $item = this.$('.gh-blognav-item');\n      (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(1);\n      (0, _chai.expect)($item.find('.gh-blognav-label').length).to.equal(1);\n      (0, _chai.expect)($item.find('.gh-blognav-url').length).to.equal(1);\n      (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(1); // doesn't show any errors\n\n      (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be.false;\n      (0, _chai.expect)($item.find('.error').length).to.equal(0);\n      (0, _chai.expect)($item.find('.response:visible').length).to.equal(0);\n    });\n    (0, _mocha.it)('doesn\\'t show drag handle for new items', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XqhuwfiQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let $item = this.$('.gh-blognav-item');\n      (0, _chai.expect)($item.find('.gh-blognav-grab').length).to.equal(0);\n    });\n    (0, _mocha.it)('shows add button for new items', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XqhuwfiQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let $item = this.$('.gh-blognav-item');\n      (0, _chai.expect)($item.find('.gh-blognav-add').length).to.equal(1);\n      (0, _chai.expect)($item.find('.gh-blognav-delete').length).to.equal(0);\n    });\n    (0, _mocha.it)('triggers delete action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let deleteActionCallCount = 0;\n      this.set('deleteItem', navItem => {\n        (0, _chai.expect)(navItem).to.equal(this.get('navItem'));\n        deleteActionCallCount += 1;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"blzQg3yu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"deleteItem\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"deleteItem\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.gh-blognav-delete');\n      (0, _chai.expect)(deleteActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers add action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url',\n        isNew: true\n      }));\n      let addActionCallCount = 0;\n      this.set('add', () => {\n        addActionCallCount += 1;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XVQfoo85\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"addItem\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"add\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.gh-blognav-add');\n      (0, _chai.expect)(addActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers update url action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let updateActionCallCount = 0;\n      this.set('update', value => {\n        updateActionCallCount += 1;\n        return value;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"yGWgFQgy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"updateUrl\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.triggerEvent)('.gh-blognav-url input', 'blur');\n      (0, _chai.expect)(updateActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers update label action', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: 'Test',\n        url: '/url'\n      }));\n      let updateActionCallCount = 0;\n      this.set('update', value => {\n        updateActionCallCount += 1;\n        return value;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iznXaJRI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\",\\\"updateLabel\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.triggerEvent)('.gh-blognav-label input', 'blur');\n      (0, _chai.expect)(updateActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('displays inline errors', async function () {\n      this.set('navItem', _navigationItem.default.create({\n        label: '',\n        url: ''\n      }));\n      this.get('navItem').validate();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XqhuwfiQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-navitem\\\",null,[[\\\"navItem\\\",\\\"baseUrl\\\"],[[25,[\\\"navItem\\\"]],[25,[\\\"baseUrl\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let $item = this.$('.gh-blognav-item');\n      (0, _chai.expect)($item.hasClass('gh-blognav-item--error')).to.be.true;\n      (0, _chai.expect)($item.find('.gh-blognav-label').hasClass('error')).to.be.true;\n      (0, _chai.expect)($item.find('.gh-blognav-label .response').text().trim()).to.equal('You must specify a label');\n      (0, _chai.expect)($item.find('.gh-blognav-url').hasClass('error')).to.be.true;\n      (0, _chai.expect)($item.find('.gh-blognav-url .response').text().trim()).to.equal('You must specify a URL or relative path');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-navitem-url-input-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  // we want baseUrl to match the running domain so relative URLs are\n  // handled as expected (browser auto-sets the domain when using a.href)\n  let currentUrl = \"\".concat(window.location.protocol, \"//\").concat(window.location.host, \"/\");\n  (0, _mocha.describe)('Integration: Component: gh-navitem-url-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      // set defaults\n      this.set('baseUrl', currentUrl);\n      this.set('url', '');\n      this.set('isNew', false);\n      this.set('clearErrors', function () {\n        return null;\n      });\n    });\n    (0, _mocha.it)('renders correctly with blank url', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fvbjAzy9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('input')).to.have.length(1);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.class('gh-input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n    });\n    (0, _mocha.it)('renders correctly with relative urls', async function () {\n      this.set('url', '/about');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fvbjAzy9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(\"\".concat(currentUrl, \"about\"));\n      this.set('url', '/about#contact');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(\"\".concat(currentUrl, \"about#contact\"));\n    });\n    (0, _mocha.it)('renders correctly with absolute urls', async function () {\n      this.set('url', 'https://example.com:2368/#test');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fvbjAzy9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('https://example.com:2368/#test');\n      this.set('url', 'mailto:test@example.com');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com');\n      this.set('url', 'tel:01234-5678-90');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('tel:01234-5678-90');\n      this.set('url', '//protocol-less-url.com');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('//protocol-less-url.com');\n      this.set('url', '#anchor');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('#anchor');\n    });\n    (0, _mocha.it)('deletes base URL on backspace', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fvbjAzy9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 8);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('');\n    });\n    (0, _mocha.it)('deletes base URL on delete', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fvbjAzy9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(currentUrl);\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 46);\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('');\n    });\n    (0, _mocha.it)('adds base url to relative urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input', '/about');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(\"\".concat(currentUrl, \"about/\"));\n    });\n    (0, _mocha.it)('adds \"mailto:\" to email addresses on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input', 'test@example.com');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com'); // ensure we don't double-up on the mailto:\n\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('mailto:test@example.com');\n    });\n    (0, _mocha.it)('doesn\\'t add base url to invalid urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let changeValue = async value => {\n        await (0, _testHelpers.fillIn)('input', value);\n        await (0, _testHelpers.blur)('input');\n      };\n\n      await changeValue('with spaces');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('with spaces');\n      await changeValue('/with spaces');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value('/with spaces');\n    });\n    (0, _mocha.it)('doesn\\'t mangle invalid urls on blur', async function () {\n      this.set('updateUrl', val => val);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl, \" /test\"));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(\"\".concat(currentUrl, \" /test\"));\n    }); // https://github.com/TryGhost/Ghost/issues/9373\n\n    (0, _mocha.it)('doesn\\'t mangle urls when baseUrl has unicode characters', async function () {\n      this.set('updateUrl', val => val);\n      this.set('baseUrl', 'http://exämple.com');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl, \"/test\"));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(\"\".concat(currentUrl, \"/test\"));\n    });\n    (0, _mocha.it)('triggers \"update\" action on blur', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('input');\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers \"update\" action on enter', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keypress', 13);\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('triggers \"update\" action on CMD-S', async function () {\n      let changeActionCallCount = 0;\n      this.set('updateUrl', val => {\n        changeActionCallCount += 1;\n        return val;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.triggerKeyEvent)('input', 'keydown', 83, {\n        metaKey: true\n      });\n      (0, _chai.expect)(changeActionCallCount).to.equal(1);\n    });\n    (0, _mocha.it)('sends absolute urls straight through to update action', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', url);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(url);\n      };\n\n      await testUrl('http://example.com');\n      await testUrl('http://example.com/');\n      await testUrl('https://example.com');\n      await testUrl('//example.com');\n      await testUrl('//localhost:1234');\n      await testUrl('#anchor');\n      await testUrl('mailto:test@example.com');\n      await testUrl('tel:12345-567890');\n      await testUrl('javascript:alert(\"testing\");');\n    });\n    (0, _mocha.it)('strips base url from relative urls before sending to update action', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl).concat(url));\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(\"/\".concat(url));\n      };\n\n      await testUrl('about/');\n      await testUrl('about#contact');\n      await testUrl('test/nested/');\n    });\n    (0, _mocha.it)('handles links to subdomains of blog domain', async function () {\n      let expectedUrl = '';\n      this.set('baseUrl', 'http://example.com/');\n      this.set('updateUrl', url => {\n        (0, _chai.expect)(url).to.equal(expectedUrl);\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      expectedUrl = 'http://test.example.com/';\n      await (0, _testHelpers.fillIn)('input', expectedUrl);\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)((0, _testHelpers.find)('input')).to.have.value(expectedUrl);\n    });\n    (0, _mocha.it)('adds trailing slash to relative URL', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl).concat(url));\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(\"/\".concat(url, \"/\"));\n      };\n\n      await testUrl('about');\n      await testUrl('test/nested');\n    });\n    (0, _mocha.it)('does not add trailing slash on relative URL with [.?#]', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl).concat(url));\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(\"/\".concat(url));\n      };\n\n      await testUrl('about#contact');\n      await testUrl('test/nested.svg');\n      await testUrl('test?gho=sties');\n      await testUrl('test/nested?sli=mer');\n    });\n    (0, _mocha.it)('does not add trailing slash on non-relative URLs', async function () {\n      let lastSeenUrl = '';\n      this.set('updateUrl', url => {\n        lastSeenUrl = url;\n        return url;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WYsJKSIp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      let testUrl = async url => {\n        await (0, _testHelpers.fillIn)('input', url);\n        await (0, _testHelpers.blur)('input');\n        (0, _chai.expect)(lastSeenUrl).to.equal(url);\n      };\n\n      await testUrl('http://woo.ff/test');\n      await testUrl('http://me.ow:2342/nested/test');\n      await testUrl('https://wro.om/car#race');\n      await testUrl('https://kabo.om/explosion?really=now');\n    });\n    (0, _mocha.describe)('with sub-folder baseUrl', function () {\n      beforeEach(function () {\n        this.set('baseUrl', \"\".concat(currentUrl, \"blog/\"));\n      });\n      (0, _mocha.it)('handles URLs relative to base url', async function () {\n        let lastSeenUrl = '';\n        this.set('updateUrl', url => {\n          lastSeenUrl = url;\n          return url;\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"zPtio8nM\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n                \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n\n        let testUrl = async url => {\n          await (0, _testHelpers.fillIn)('input', \"\".concat(currentUrl, \"blog\").concat(url));\n          await (0, _testHelpers.blur)('input');\n          (0, _chai.expect)(lastSeenUrl).to.equal(url);\n        };\n\n        await testUrl('/about/');\n        await testUrl('/about#contact');\n        await testUrl('/test/nested/');\n      });\n      (0, _mocha.it)('handles URLs relative to base host', async function () {\n        let lastSeenUrl = '';\n        this.set('updateUrl', url => {\n          lastSeenUrl = url;\n          return url;\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"zPtio8nM\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n                \\\"],[1,[29,\\\"gh-navitem-url-input\\\",null,[[\\\"baseUrl\\\",\\\"url\\\",\\\"isNew\\\",\\\"update\\\",\\\"clearErrors\\\"],[[25,[\\\"baseUrl\\\"]],[25,[\\\"url\\\"]],[25,[\\\"isNew\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updateUrl\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"clearErrors\\\"]]],null]]]],false],[0,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n\n        let testUrl = async url => {\n          await (0, _testHelpers.fillIn)('input', url);\n          await (0, _testHelpers.blur)('input');\n          (0, _chai.expect)(lastSeenUrl).to.equal(url);\n        };\n\n        await testUrl(\"http://\".concat(window.location.host));\n        await testUrl(\"https://\".concat(window.location.host));\n        await testUrl(\"http://\".concat(window.location.host, \"/\"));\n        await testUrl(\"https://\".concat(window.location.host, \"/\"));\n        await testUrl(\"http://\".concat(window.location.host, \"/test\"));\n        await testUrl(\"https://\".concat(window.location.host, \"/test\"));\n        await testUrl(\"http://\".concat(window.location.host, \"/#test\"));\n        await testUrl(\"https://\".concat(window.location.host, \"/#test\"));\n        await testUrl(\"http://\".concat(window.location.host, \"/another/folder\"));\n        await testUrl(\"https://\".concat(window.location.host, \"/another/folder\"));\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-notification-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-notification', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"HE/IHGJo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-notification\\\",null,[[\\\"message\\\"],[[25,[\\\"message\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('article.gh-notification')).to.exist;\n      let notification = (0, _testHelpers.find)('.gh-notification');\n      (0, _chai.expect)(notification).to.have.class('gh-notification-passive');\n      (0, _chai.expect)(notification).to.contain.text('Test message');\n    });\n    (0, _mocha.it)('maps message types to CSS classes', async function () {\n      this.set('message', {\n        message: 'Test message',\n        type: 'success'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"HE/IHGJo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-notification\\\",null,[[\\\"message\\\"],[[25,[\\\"message\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let notification = (0, _testHelpers.find)('.gh-notification');\n      this.set('message.type', 'success');\n      (0, _chai.expect)(notification, 'success class is green').to.have.class('gh-notification-green');\n      this.set('message.type', 'error');\n      (0, _chai.expect)(notification, 'success class is red').to.have.class('gh-notification-red');\n      this.set('message.type', 'warn');\n      (0, _chai.expect)(notification, 'success class is yellow').to.have.class('gh-notification-yellow');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-notifications-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  let notificationsStub = Ember.Service.extend({\n    notifications: Ember.A()\n  });\n  (0, _mocha.describe)('Integration: Component: gh-notifications', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.owner.register('service:notifications', notificationsStub);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('notifications', [{\n        message: 'First',\n        type: 'error'\n      }, {\n        message: 'Second',\n        type: 'warn'\n      }]);\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MUtBzq8S\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-notifications\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications').children.length).to.equal(2);\n      let notifications = this.owner.lookup('service:notifications');\n      notifications.set('notifications', Ember.A());\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-notifications').children.length).to.equal(0);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-profile-image-test\", [\"pretender\", \"blueimp-md5\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ember-concurrency\"], function (_pretender, _blueimpMd, _mocha, _chai, _testHelpers, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  let pathsStub = Ember.Service.extend({\n    assetRoot: '/ghost/assets/',\n\n    init() {\n      this._super(...arguments);\n\n      this.url = {\n        api() {\n          return '';\n        },\n\n        asset(src) {\n          return src;\n        }\n\n      };\n    }\n\n  });\n\n  const stubKnownGravatar = function stubKnownGravatar(server) {\n    server.get('http://www.gravatar.com/avatar/:md5', function () {\n      return [200, {\n        'Content-Type': 'image/png'\n      }, ''];\n    });\n    server.head('http://www.gravatar.com/avatar/:md5', function () {\n      return [200, {\n        'Content-Type': 'image/png'\n      }, ''];\n    });\n  };\n\n  const stubUnknownGravatar = function stubUnknownGravatar(server) {\n    server.get('http://www.gravatar.com/avatar/:md5', function () {\n      return [404, {}, ''];\n    });\n    server.head('http://www.gravatar.com/avatar/:md5', function () {\n      return [404, {}, ''];\n    });\n  };\n\n  let configStubuseGravatar = Ember.Service.extend({\n    useGravatar: true\n  });\n  (0, _mocha.describe)('Integration: Component: gh-profile-image', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      this.owner.register('service:ghost-paths', pathsStub);\n      this.owner.register('service:config', configStubuseGravatar);\n      server = new _pretender.default();\n      stubKnownGravatar(server);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      this.set('email', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mjNrZ0bZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\"],[[25,[\\\"email\\\"]]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.account-image')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.placeholder-img')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('input[type=\"file\"]')).to.exist;\n    });\n    (0, _mocha.it)('renders default image if no email supplied', async function () {\n      this.set('email', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Xxi9SfzT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[25,[\\\"email\\\"]],100,50]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'display: none');\n    });\n    (0, _mocha.it)('renders the gravatar if valid email supplied and privacy.useGravatar allows it', async function () {\n      let email = 'test@example.com';\n      let expectedUrl = \"//www.gravatar.com/avatar/\".concat((0, _blueimpMd.default)(email), \"?s=100&d=404\");\n      this.set('email', email);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Xxi9SfzT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[25,[\\\"email\\\"]],100,50]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', \"background-image: url(\".concat(expectedUrl, \"); display: block\"));\n    });\n    (0, _mocha.it)('doesn\\'t render the gravatar if valid email supplied but privacy.useGravatar forbids it', async function () {\n      let config = this.owner.lookup('service:config');\n      let email = 'test@example.com';\n      this.set('email', email);\n      config.set('useGravatar', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Xxi9SfzT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[25,[\\\"email\\\"]],100,50]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'display: none');\n    });\n    (0, _mocha.it)('doesn\\'t add background url if gravatar image doesn\\'t exist', async function () {\n      stubUnknownGravatar(server);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fa9e/uc3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[\\\"test@example.com\\\",100,50]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), 'gravatar image style').to.have.attribute('style', 'background-image: url(); display: none');\n    }); // skipped due to random failures on Travis - https://github.com/TryGhost/Ghost/issues/10308\n\n    _mocha.it.skip('throttles gravatar loading as email is changed', async function () {\n      let email = 'test@example.com';\n      let expectedUrl = \"//www.gravatar.com/avatar/\".concat((0, _blueimpMd.default)(email), \"?s=100&d=404\");\n      this.set('email', 'test');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hTtPwzXZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-profile-image\\\",null,[[\\\"email\\\",\\\"size\\\",\\\"debounce\\\"],[[25,[\\\"email\\\"]],100,300]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.set('email', email);\n      await (0, _emberConcurrency.timeout)(50);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background not immediately changed on email change').to.have.attribute('style', 'display: none');\n      await (0, _emberConcurrency.timeout)(250);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background still not changed before debounce timeout').to.have.attribute('style', 'display: none');\n      await (0, _emberConcurrency.timeout)(100);\n      (0, _chai.expect)((0, _testHelpers.find)('.gravatar-img'), '.gravatar-img background changed after debounce timeout').to.have.attribute('style', \"background-image: url(\".concat(expectedUrl, \"); display: block\"));\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-psm-tags-input-test\", [\"ghost-admin/mirage/config/posts\", \"ghost-admin/mirage/config/themes\", \"@ember/test-helpers\", \"ember-power-select/test-support/helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ghost-admin/initializers/ember-cli-mirage\", \"ember-concurrency\"], function (_posts, _themes, _testHelpers, _helpers, _mocha, _chai, _emberMocha, _emberCliMirage, _emberConcurrency) {\n  \"use strict\";\n\n  // NOTE: although Mirage has posts<->tags relationship and can respond\n  // to :post-id/?include=tags all ordering information is lost so we\n  // need to build the tags array manually\n  const assignPostWithTags = async function postWithTags(context) {\n    let post = await context.store.findRecord('post', 1);\n    let tags = await context.store.findAll('tag');\n\n    for (var _len = arguments.length, slugs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      slugs[_key - 1] = arguments[_key];\n    }\n\n    slugs.forEach(slug => {\n      post.get('tags').pushObject(tags.findBy('slug', slug));\n    });\n    context.set('post', post);\n    await (0, _testHelpers.settled)();\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-psm-tags-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = (0, _emberCliMirage.startMirage)();\n      let author = server.create('user');\n      (0, _posts.default)(server);\n      (0, _themes.default)(server);\n      server.create('post', {\n        authors: [author]\n      });\n      server.create('tag', {\n        name: 'Tag 1',\n        slug: 'one'\n      });\n      server.create('tag', {\n        name: '#Tag 2',\n        visibility: 'internal',\n        slug: 'two'\n      });\n      server.create('tag', {\n        name: 'Tag 3',\n        slug: 'three'\n      });\n      server.create('tag', {\n        name: 'Tag 4',\n        slug: 'four'\n      });\n      this.set('store', this.owner.lookup('service:store'));\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('shows selected tags on render', async function () {\n      await assignPostWithTags(this, 'one', 'three');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"L4YiSdZI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let selected = (0, _testHelpers.findAll)('.tag-token');\n      (0, _chai.expect)(selected.length).to.equal(2);\n      (0, _chai.expect)(selected[0]).to.contain.text('Tag 1');\n      (0, _chai.expect)(selected[1]).to.contain.text('Tag 3');\n    });\n    (0, _mocha.it)('exposes all tags as options sorted alphabetically', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"L4YiSdZI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(4);\n      (0, _chai.expect)(options[0]).to.contain.text('Tag 1');\n      (0, _chai.expect)(options[1]).to.contain.text('#Tag 2');\n      (0, _chai.expect)(options[2]).to.contain.text('Tag 3');\n      (0, _chai.expect)(options[3]).to.contain.text('Tag 4');\n    });\n    (0, _mocha.it)('matches options on lowercase tag names', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"L4YiSdZI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _helpers.typeInSearch)('2');\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(2);\n      (0, _chai.expect)(options[0]).to.contain.text('Add \"2\"...');\n      (0, _chai.expect)(options[1]).to.contain.text('Tag 2');\n    });\n    (0, _mocha.it)('hides create option on exact matches', async function () {\n      this.set('post', this.store.findRecord('post', 1));\n      await (0, _testHelpers.settled)();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"L4YiSdZI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _helpers.clickTrigger)();\n      await (0, _helpers.typeInSearch)('#Tag 2');\n      await (0, _testHelpers.settled)(); // unsure why settled() is sometimes not catching the update\n\n      await (0, _emberConcurrency.timeout)(100);\n      let options = (0, _testHelpers.findAll)('.ember-power-select-option');\n      (0, _chai.expect)(options.length).to.equal(1);\n      (0, _chai.expect)(options[0]).to.contain.text('#Tag 2');\n    });\n    (0, _mocha.it)('highlights internal tags', async function () {\n      await assignPostWithTags(this, 'two', 'three');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"L4YiSdZI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let selected = (0, _testHelpers.findAll)('.tag-token');\n      (0, _chai.expect)(selected.length).to.equal(2);\n      (0, _chai.expect)(selected[0]).to.have.class('tag-token--internal');\n      (0, _chai.expect)(selected[1]).to.not.have.class('tag-token--internal');\n    });\n    (0, _mocha.describe)('updateTags', function () {\n      (0, _mocha.it)('modifies post.tags', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"L4YiSdZI\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', 'Tag 1');\n        (0, _chai.expect)(this.post.tags.mapBy('name').join(',')).to.equal('#Tag 2,Tag 3,Tag 1');\n      }); // TODO: skipped due to consistently random failures on Travis\n      // '#ember-basic-dropdown-content-ember17494 Add \"New\"...' is not a valid selector\n      // https://github.com/TryGhost/Ghost/issues/10308\n\n      _mocha.it.skip('destroys new tag records when not selected', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"L4YiSdZI\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        await (0, _helpers.clickTrigger)();\n        await (0, _helpers.typeInSearch)('New');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', 'Add \"New\"...');\n        let tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(5);\n        let removeBtns = (0, _testHelpers.findAll)('.ember-power-select-multiple-remove-btn');\n        await (0, _testHelpers.click)(removeBtns[removeBtns.length - 1]);\n        tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(4);\n      });\n    });\n    (0, _mocha.describe)('createTag', function () {\n      (0, _mocha.it)('creates new records', async function () {\n        await assignPostWithTags(this, 'two', 'three');\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"L4YiSdZI\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-tags-input\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        await (0, _helpers.clickTrigger)();\n        await (0, _helpers.typeInSearch)('New One');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', '.ember-power-select-option', 0);\n        await (0, _helpers.typeInSearch)('New Two');\n        await (0, _testHelpers.settled)();\n        await (0, _helpers.selectChoose)('.ember-power-select-trigger', '.ember-power-select-option', 0);\n        let tags = await this.store.peekAll('tag');\n        (0, _chai.expect)(tags.length).to.equal(6);\n        (0, _chai.expect)(tags.findBy('name', 'New One').isNew).to.be.true;\n        (0, _chai.expect)(tags.findBy('name', 'New Two').isNew).to.be.true;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-psm-template-select-test\", [\"ghost-admin/mirage/config/themes\", \"ember-test-helpers/wait\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ghost-admin/initializers/ember-cli-mirage\"], function (_themes, _wait, _mocha, _chai, _testHelpers, _emberMocha, _emberCliMirage) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-psm-template-select', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = (0, _emberCliMirage.startMirage)();\n      server.create('theme', {\n        active: true,\n        name: 'example-theme',\n        package: {\n          name: 'Example Theme',\n          version: '0.1'\n        },\n        templates: [{\n          filename: 'custom-news-bulletin.hbs',\n          name: 'News Bulletin',\n          for: ['post', 'page'],\n          slug: null\n        }, {\n          filename: 'custom-big-images.hbs',\n          name: 'Big Images',\n          for: ['post', 'page'],\n          slug: null\n        }, {\n          filename: 'post-one.hbs',\n          name: 'One',\n          for: ['post'],\n          slug: 'one'\n        }, {\n          filename: 'page-about.hbs',\n          name: 'About',\n          for: ['page'],\n          slug: 'about'\n        }]\n      });\n      (0, _themes.default)(server);\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('disables template selector if slug matches post template', async function () {\n      this.set('post', {\n        slug: 'one',\n        constructor: {\n          modelName: 'post'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"o3XIvxaA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-template-select\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _wait.default)();\n      (0, _chai.expect)((0, _testHelpers.find)('select').disabled, 'select is disabled').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('p')).to.contain.text('post-one.hbs');\n    });\n    (0, _mocha.it)('disables template selector if slug matches page template', async function () {\n      this.set('post', {\n        slug: 'about',\n        constructor: {\n          modelName: 'page'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"o3XIvxaA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-psm-template-select\\\",null,[[\\\"post\\\"],[[25,[\\\"post\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _wait.default)();\n      (0, _chai.expect)((0, _testHelpers.find)('select').disabled, 'select is disabled').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('p')).to.contain.text('page-about.hbs');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-search-input-test\", [\"pretender\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-search-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('renders', async function () {\n      // renders the component on the page\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0v30zJFx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-search-input\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.$('.ember-power-select-search input')).to.have.length(1);\n    });\n    (0, _mocha.it)('opens the dropdown on text entry', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0v30zJFx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-search-input\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input[type=\"search\"]', 'test');\n      (0, _chai.expect)((0, _testHelpers.findAll)('.ember-basic-dropdown-content').length).to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-tag-settings-form-test\", [\"ember-data\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_emberData, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const Errors = _emberData.default.Errors;\n  let configStub = Ember.Service.extend({\n    blogUrl: 'http://localhost:2368'\n  });\n  let mediaQueriesStub = Ember.Service.extend({\n    maxWidth600: false\n  });\n  (0, _mocha.describe)('Integration: Component: gh-tag-settings-form', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      /* eslint-disable camelcase */\n      let tag = Ember.Object.create({\n        id: 1,\n        name: 'Test',\n        slug: 'test',\n        description: 'Description.',\n        metaTitle: 'Meta Title',\n        metaDescription: 'Meta description',\n        errors: Errors.create(),\n        hasValidated: []\n      });\n      /* eslint-enable camelcase */\n\n      this.set('tag', tag);\n      this.set('setProperty', function (property, value) {\n        // this should be overridden if a call is expected\n        // eslint-disable-next-line no-console\n        console.error(\"setProperty called '\".concat(property, \": \").concat(value, \"'\"));\n      });\n      this.owner.register('service:config', configStub);\n      this.owner.register('service:media-queries', mediaQueriesStub);\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.$()).to.have.length(1);\n    });\n    (0, _mocha.it)('has the correct title', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'existing tag title').to.equal('Tag settings');\n      this.set('tag.isNew', true);\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane h4').textContent, 'new tag title').to.equal('New tag');\n    });\n    (0, _mocha.it)('renders main settings', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.gh-image-uploader').length, 'displays image uploader').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"name\"]').value, 'name field value').to.equal('Test');\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"slug\"]').value, 'slug field value').to.equal('test');\n      (0, _chai.expect)((0, _testHelpers.find)('textarea[name=\"description\"]').value, 'description field value').to.equal('Description.');\n      (0, _chai.expect)((0, _testHelpers.find)('input[name=\"metaTitle\"]').value, 'metaTitle field value').to.equal('Meta Title');\n      (0, _chai.expect)((0, _testHelpers.find)('textarea[name=\"metaDescription\"]').value, 'metaDescription field value').to.equal('Meta description');\n    });\n    (0, _mocha.it)('can switch between main/meta settings', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'main settings are displayed by default').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-out-right'), 'meta settings are hidden by default').to.be.true;\n      await (0, _testHelpers.click)('.meta-data-button');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-out-left'), 'main settings are hidden after clicking Meta Data button').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-in'), 'meta settings are displayed after clicking Meta Data button').to.be.true;\n      await (0, _testHelpers.click)('.back');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'main settings are displayed after clicking \"back\"').to.be.true;\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-out-right'), 'meta settings are hidden after clicking \"back\"').to.be.true;\n    });\n    (0, _mocha.it)('has one-way binding for properties', async function () {\n      this.set('setProperty', function () {// noop\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('input[name=\"name\"]', 'New name');\n      await (0, _testHelpers.fillIn)('input[name=\"slug\"]', 'new-slug');\n      await (0, _testHelpers.fillIn)('textarea[name=\"description\"]', 'New description');\n      await (0, _testHelpers.fillIn)('input[name=\"metaTitle\"]', 'New metaTitle');\n      await (0, _testHelpers.fillIn)('textarea[name=\"metaDescription\"]', 'New metaDescription');\n      (0, _chai.expect)(this.get('tag.name'), 'tag name').to.equal('Test');\n      (0, _chai.expect)(this.get('tag.slug'), 'tag slug').to.equal('test');\n      (0, _chai.expect)(this.get('tag.description'), 'tag description').to.equal('Description.');\n      (0, _chai.expect)(this.get('tag.metaTitle'), 'tag metaTitle').to.equal('Meta Title');\n      (0, _chai.expect)(this.get('tag.metaDescription'), 'tag metaDescription').to.equal('Meta description');\n    });\n    (0, _mocha.it)('triggers setProperty action on blur of all fields', async function () {\n      let lastSeenProperty = '';\n      let lastSeenValue = '';\n      this.set('setProperty', function (property, value) {\n        lastSeenProperty = property;\n        lastSeenValue = value;\n      });\n\n      let testSetProperty = async (selector, expectedProperty, expectedValue) => {\n        await (0, _testHelpers.click)(selector);\n        await (0, _testHelpers.fillIn)(selector, expectedValue);\n        await (0, _testHelpers.blur)(selector);\n        (0, _chai.expect)(lastSeenProperty, 'property').to.equal(expectedProperty);\n        (0, _chai.expect)(lastSeenValue, 'value').to.equal(expectedValue);\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await testSetProperty('input[name=\"name\"]', 'name', 'New name');\n      await testSetProperty('input[name=\"slug\"]', 'slug', 'new-slug');\n      await testSetProperty('textarea[name=\"description\"]', 'description', 'New description');\n      await testSetProperty('input[name=\"metaTitle\"]', 'metaTitle', 'New metaTitle');\n      await testSetProperty('textarea[name=\"metaDescription\"]', 'metaDescription', 'New metaDescription');\n    });\n    (0, _mocha.it)('displays error messages for validated fields', async function () {\n      let errors = this.get('tag.errors');\n      let hasValidated = this.get('tag.hasValidated');\n      errors.add('name', 'must be present');\n      hasValidated.push('name');\n      errors.add('slug', 'must be present');\n      hasValidated.push('slug');\n      errors.add('description', 'is too long');\n      hasValidated.push('description');\n      errors.add('metaTitle', 'is too long');\n      hasValidated.push('metaTitle');\n      errors.add('metaDescription', 'is too long');\n      hasValidated.push('metaDescription');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let nameFormGroup = this.$('input[name=\"name\"]').closest('.form-group');\n      (0, _chai.expect)(nameFormGroup.hasClass('error'), 'name form group has error state').to.be.true;\n      (0, _chai.expect)(nameFormGroup.find('.response').length, 'name form group has error message').to.equal(1);\n      let slugFormGroup = this.$('input[name=\"slug\"]').closest('.form-group');\n      (0, _chai.expect)(slugFormGroup.hasClass('error'), 'slug form group has error state').to.be.true;\n      (0, _chai.expect)(slugFormGroup.find('.response').length, 'slug form group has error message').to.equal(1);\n      let descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n      (0, _chai.expect)(descriptionFormGroup.hasClass('error'), 'description form group has error state').to.be.true;\n      let metaTitleFormGroup = this.$('input[name=\"metaTitle\"]').closest('.form-group');\n      (0, _chai.expect)(metaTitleFormGroup.hasClass('error'), 'metaTitle form group has error state').to.be.true;\n      (0, _chai.expect)(metaTitleFormGroup.find('.response').length, 'metaTitle form group has error message').to.equal(1);\n      let metaDescriptionFormGroup = this.$('textarea[name=\"metaDescription\"]').closest('.form-group');\n      (0, _chai.expect)(metaDescriptionFormGroup.hasClass('error'), 'metaDescription form group has error state').to.be.true;\n      (0, _chai.expect)(metaDescriptionFormGroup.find('.response').length, 'metaDescription form group has error message').to.equal(1);\n    });\n    (0, _mocha.it)('displays char count for text fields', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let descriptionFormGroup = this.$('textarea[name=\"description\"]').closest('.form-group');\n      (0, _chai.expect)(descriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('12');\n      let metaDescriptionFormGroup = this.$('textarea[name=\"metaDescription\"]').closest('.form-group');\n      (0, _chai.expect)(metaDescriptionFormGroup.find('.word-count').text(), 'description char count').to.equal('16');\n    });\n    (0, _mocha.it)('renders SEO title preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent, 'displays meta title if present').to.equal('Meta Title');\n      this.set('tag.metaTitle', '');\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent, 'falls back to tag name without metaTitle').to.equal('Test');\n      this.set('tag.name', new Array(151).join('x'));\n      let expectedLength = 70 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-title').textContent.length, 'cuts title to max 70 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('renders SEO URL preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-link').textContent, 'adds url and tag prefix').to.equal('http://localhost:2368/tag/test/');\n      this.set('tag.slug', new Array(151).join('x'));\n      let expectedLength = 70 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-link').textContent.length, 'cuts slug to max 70 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('renders SEO description preview', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent, 'displays meta description if present').to.equal('Meta description');\n      this.set('tag.metaDescription', '');\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent, 'falls back to tag description without metaDescription').to.equal('Description.');\n      this.set('tag.description', new Array(500).join('x'));\n      let expectedLength = 156 + '…'.length;\n      (0, _chai.expect)((0, _testHelpers.find)('.seo-preview-description').textContent.length, 'cuts description to max 156 chars').to.equal(expectedLength);\n    });\n    (0, _mocha.it)('resets if a new tag is received', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.meta-data-button');\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-meta-settings-pane').classList.contains('settings-menu-pane-in'), 'meta data pane is shown').to.be.true;\n      this.set('tag', Ember.Object.create({\n        id: '2'\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.tag-settings-pane').classList.contains('settings-menu-pane-in'), 'resets to main settings').to.be.true;\n    });\n    (0, _mocha.it)('triggers delete tag modal on delete click', async function () {\n      let openModalFired = false;\n      this.set('openModal', () => {\n        openModalFired = true;\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"SOX6VQnL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\",\\\"showDeleteTagModal\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"openModal\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.settings-menu-delete-button');\n      (0, _chai.expect)(openModalFired).to.be.true;\n    });\n    (0, _mocha.it)('shows settings.tags arrow link on mobile', async function () {\n      let mediaQueries = this.owner.lookup('service:media-queries');\n      mediaQueries.set('maxWidth600', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Gl88TBDu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[1,[29,\\\"gh-tag-settings-form\\\",null,[[\\\"tag\\\",\\\"setProperty\\\"],[[25,[\\\"tag\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"setProperty\\\"]]],null]]]],false],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('.tag-settings-pane .settings-menu-header .settings-menu-header-action').length, 'settings.tags link is shown').to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-task-button-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\", \"ember-concurrency\"], function (_testHelpers, _mocha, _chai, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Integration: Component: gh-task-button', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      // sets button text using positional param\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"P5Lpg/32\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",[\\\"Test\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Test');\n      (0, _chai.expect)((0, _testHelpers.find)('button').disabled).to.be.false;\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"josj29Nr\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"class\\\"],[\\\"testing\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('testing'); // default button text is \"Save\"\n\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Save'); // passes disabled attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"aHDZXLW8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"disabled\\\",\\\"buttonText\\\"],[true,\\\"Test\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button').disabled).to.be.true; // allows button text to be set via hash param\n\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Test'); // passes type attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"h7YE/Qh/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"type\\\"],[\\\"submit\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('type', 'submit'); // passes tabindex attr\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"IxAXoF0l\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"tabindex\\\"],[\\\"-1\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('tabindex', '-1');\n    });\n    (0, _mocha.it)('shows spinner whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button svg', {\n        timeout: 50\n      });\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('shows running text when passed whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"BCCsrAvb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\",\\\"runningText\\\"],[[25,[\\\"myTask\\\"]],\\\"Running\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button svg', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Running');\n      await (0, _testHelpers.settled)();\n    }); // skipped due to random failures on Travis - https://github.com/TryGhost/Ghost/issues/10308\n\n    (0, _mocha.it)('appears disabled whilst running', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('button'), 'initial class').to.not.have.class('appear-disabled');\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.appear-disabled', {\n        timeout: 50\n      });\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)((0, _testHelpers.find)('button'), 'ended class').to.not.have.class('appear-disabled');\n    });\n    (0, _mocha.it)('shows success on success', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return true;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await this.myTask.perform();\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Saved');\n    });\n    (0, _mocha.it)('assigns specified success class on success', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return true;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"y+tiP60x\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\",\\\"successClass\\\"],[[25,[\\\"myTask\\\"]],\\\"im-a-success\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await this.myTask.perform();\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.class('gh-btn-green');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.class('im-a-success');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Saved');\n    });\n    (0, _mocha.it)('shows failure when task errors', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        try {\n          yield (0, _emberConcurrency.timeout)(50);\n          throw new ReferenceError('test error');\n        } catch (error) {// noop, prevent mocha triggering unhandled error assert\n        }\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"CKCyp7d4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\",\\\"failureClass\\\"],[[25,[\\\"myTask\\\"]],\\\"is-failed\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.is-failed');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('shows failure on falsy response', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return false;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.gh-btn-red', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('assigns specified failure class on failure', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        return false;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MDpL8yV0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\",\\\"failureClass\\\"],[[25,[\\\"myTask\\\"]],\\\"im-a-failure\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.myTask.perform();\n      await (0, _testHelpers.waitFor)('button.im-a-failure', {\n        timeout: 50\n      });\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.class('gh-btn-red');\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.contain.text('Retry');\n      await (0, _testHelpers.settled)();\n    });\n    (0, _mocha.it)('performs task on click', async function () {\n      let taskCount = 0;\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n        taskCount = taskCount + 1;\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('button');\n      await (0, _testHelpers.settled)();\n      (0, _chai.expect)(taskCount, 'taskCount').to.equal(1);\n    });\n\n    _mocha.it.skip('keeps button size when showing spinner', async function () {\n      Ember.defineProperty(this, 'myTask', (0, _emberConcurrency.task)(function* () {\n        yield (0, _emberConcurrency.timeout)(50);\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iRKZq5Li\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-task-button\\\",null,[[\\\"task\\\"],[[25,[\\\"myTask\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let width = (0, _testHelpers.find)('button').clientWidth;\n      let height = (0, _testHelpers.find)('button').clientHeight;\n      (0, _chai.expect)((0, _testHelpers.find)('button')).to.not.have.attr('style');\n      this.myTask.perform();\n      Ember.run.later(this, function () {\n        // we can't test exact width/height because Chrome/Firefox use different rounding methods\n        // expect(find('button')).to.have.attr('style', `width: ${width}px; height: ${height}px;`);\n        let _width$toString$split = width.toString().split('.'),\n            _width$toString$split2 = _slicedToArray(_width$toString$split, 1),\n            widthInt = _width$toString$split2[0];\n\n        let _height$toString$spli = height.toString().split('.'),\n            _height$toString$spli2 = _slicedToArray(_height$toString$spli, 1),\n            heightInt = _height$toString$spli2[0];\n\n        (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('style', \"width: \".concat(widthInt));\n        (0, _chai.expect)((0, _testHelpers.find)('button')).to.have.attr('style', \"height: \".concat(heightInt));\n      }, 20);\n      Ember.run.later(this, function () {\n        (0, _chai.expect)((0, _testHelpers.find)('button').getAttribute('style')).to.be.empty;\n      }, 100);\n      await (0, _testHelpers.settled)();\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-theme-table-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-theme-table', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('themes', [{\n        name: 'Daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'oscar-ghost-1.1.0',\n        package: {\n          name: 'Lanyon',\n          version: '1.1.0'\n        }\n      }, {\n        name: 'foo'\n      }]);\n      this.set('actionHandler', _sinon.default.spy());\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"qMmowzZ+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-theme-table\\\",null,[[\\\"themes\\\",\\\"activateTheme\\\",\\\"downloadTheme\\\",\\\"deleteTheme\\\"],[[25,[\\\"themes\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-themes-list]').length, 'themes list is present').to.equal(1);\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-id]').length, 'number of rows').to.equal(4);\n      let packageNames = (0, _testHelpers.findAll)('[data-test-theme-title]').map(name => name.textContent.trim());\n      (0, _chai.expect)(packageNames, 'themes are ordered by label, casper has \"default\"').to.deep.equal(['Casper (default)', 'Daring', 'foo', 'Lanyon']);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"]').querySelector('[data-test-theme-title]'), 'active theme is highlighted').to.have.trimmed.text('Daring');\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-activate-button]').length, 'non-active themes have an activate link').to.equal(3);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"]').querySelector('[data-test-theme-activate-button]'), 'active theme doesn\\'t have an activate link').to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('[data-test-theme-download-button]').length, 'all themes have a download link').to.equal(4);\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-id=\"foo\"]').querySelector('[data-test-theme-delete-button]'), 'non-active, non-casper theme has delete link').to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-id=\"casper\"]').querySelector('[data-test-theme-delete-button]'), 'casper doesn\\'t have delete link').to.not.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-theme-active=\"true\"]').querySelector('[data-test-theme-delete-button]'), 'active theme doesn\\'t have delete link').to.not.exist;\n    });\n    (0, _mocha.it)('delete link triggers passed in action', async function () {\n      let deleteAction = _sinon.default.spy();\n\n      let actionHandler = _sinon.default.spy();\n\n      this.set('themes', [{\n        name: 'Foo',\n        active: true\n      }, {\n        name: 'Bar'\n      }]);\n      this.set('deleteAction', deleteAction);\n      this.set('actionHandler', actionHandler);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"eUFYMakT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-theme-table\\\",null,[[\\\"themes\\\",\\\"activateTheme\\\",\\\"downloadTheme\\\",\\\"deleteTheme\\\"],[[25,[\\\"themes\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"deleteAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('[data-test-theme-id=\"Bar\"] [data-test-theme-delete-button]');\n      (0, _chai.expect)(deleteAction.calledOnce).to.be.true;\n      (0, _chai.expect)(deleteAction.firstCall.args[0].name).to.equal('Bar');\n    });\n    (0, _mocha.it)('download link triggers passed in action', async function () {\n      let downloadAction = _sinon.default.spy();\n\n      let actionHandler = _sinon.default.spy();\n\n      this.set('themes', [{\n        name: 'Foo',\n        active: true\n      }, {\n        name: 'Bar'\n      }]);\n      this.set('downloadAction', downloadAction);\n      this.set('actionHandler', actionHandler);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"8A2icIZ+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-theme-table\\\",null,[[\\\"themes\\\",\\\"activateTheme\\\",\\\"downloadTheme\\\",\\\"deleteTheme\\\"],[[25,[\\\"themes\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"downloadAction\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('[data-test-theme-id=\"Foo\"] [data-test-theme-download-button]');\n      (0, _chai.expect)(downloadAction.calledOnce).to.be.true;\n      (0, _chai.expect)(downloadAction.firstCall.args[0].name).to.equal('Foo');\n    });\n    (0, _mocha.it)('activate link triggers passed in action', async function () {\n      let activateAction = _sinon.default.spy();\n\n      let actionHandler = _sinon.default.spy();\n\n      this.set('themes', [{\n        name: 'Foo',\n        active: true\n      }, {\n        name: 'Bar'\n      }]);\n      this.set('activateAction', activateAction);\n      this.set('actionHandler', actionHandler);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QtVxTJRx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-theme-table\\\",null,[[\\\"themes\\\",\\\"activateTheme\\\",\\\"downloadTheme\\\",\\\"deleteTheme\\\"],[[25,[\\\"themes\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"activateAction\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('[data-test-theme-id=\"Bar\"] [data-test-theme-activate-button]');\n      (0, _chai.expect)(activateAction.calledOnce).to.be.true;\n      (0, _chai.expect)(activateAction.firstCall.args[0].name).to.equal('Bar');\n    });\n    (0, _mocha.it)('displays folder names if there are duplicate package names', async function () {\n      this.set('themes', [{\n        name: 'daring',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        },\n        active: true\n      }, {\n        name: 'daring-0.1.5',\n        package: {\n          name: 'Daring',\n          version: '0.1.4'\n        }\n      }, {\n        name: 'casper',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'another',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'mine',\n        package: {\n          name: 'Casper',\n          version: '1.3.1'\n        }\n      }, {\n        name: 'foo'\n      }]);\n      this.set('actionHandler', _sinon.default.spy());\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"qMmowzZ+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-theme-table\\\",null,[[\\\"themes\\\",\\\"activateTheme\\\",\\\"downloadTheme\\\",\\\"deleteTheme\\\"],[[25,[\\\"themes\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"actionHandler\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let packageNames = (0, _testHelpers.findAll)('[data-test-theme-title]').map(name => name.textContent.trim());\n      (0, _chai.expect)(packageNames, 'themes are ordered by label, folder names shown for duplicates').to.deep.equal(['Casper (another)', 'Casper (default)', 'Casper (mine)', 'Daring (daring)', 'Daring (daring-0.1.5)', 'foo']);\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-timezone-select-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-timezone-select', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      this.set('availableTimezones', [{\n        name: 'Pacific/Pago_Pago',\n        label: '(GMT -11:00) Midway Island, Samoa'\n      }, {\n        name: 'Etc/UTC',\n        label: '(GMT) UTC'\n      }, {\n        name: 'Pacific/Kwajalein',\n        label: '(GMT +12:00) International Date Line West'\n      }]);\n      this.set('activeTimezone', 'Etc/UTC');\n    });\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G73IOaRn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-timezone-select\\\",null,[[\\\"availableTimezones\\\",\\\"activeTimezone\\\"],[[25,[\\\"availableTimezones\\\"]],[25,[\\\"activeTimezone\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element, 'top-level elements').to.exist;\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(3);\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal('Etc/UTC');\n    });\n    (0, _mocha.it)('handles an unknown timezone', async function () {\n      this.set('activeTimezone', 'Europe/London');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G73IOaRn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-timezone-select\\\",null,[[\\\"availableTimezones\\\",\\\"activeTimezone\\\"],[[25,[\\\"availableTimezones\\\"]],[25,[\\\"activeTimezone\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // we have an additional blank option at the top\n\n      (0, _chai.expect)((0, _testHelpers.findAll)('option'), 'number of options').to.have.length(4); // blank option is selected\n\n      (0, _chai.expect)((0, _testHelpers.find)('select').value, 'selected option value').to.equal(''); // we indicate the manual override\n\n      (0, _chai.expect)((0, _testHelpers.find)('p').textContent).to.match(/Your timezone has been automatically set to Europe\\/London/);\n    });\n    (0, _mocha.it)('triggers update action on change', async function () {\n      let update = _sinon.default.spy();\n\n      this.set('update', update);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"8B2OJuM2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-timezone-select\\\",null,[[\\\"availableTimezones\\\",\\\"activeTimezone\\\",\\\"update\\\"],[[25,[\\\"availableTimezones\\\"]],[25,[\\\"activeTimezone\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"update\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('select', 'Pacific/Pago_Pago');\n      await (0, _testHelpers.blur)('select');\n      (0, _chai.expect)(update.calledOnce, 'update was called once').to.be.true;\n      (0, _chai.expect)(update.firstCall.args[0].name, 'update was passed new timezone').to.equal('Pacific/Pago_Pago');\n    }); // TODO: mock clock service, fake the time, test we have the correct\n    // local time and it changes alongside selection changes\n\n    (0, _mocha.it)('renders local time');\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-trim-focus-input-test\", [\"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-trim-focus-input', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('trims value on focusOut', async function () {\n      this.set('text', 'some random stuff    ');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UOOkObxI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"input\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[29,\\\"mut\\\",[[25,[\\\"text\\\"]]],null]],[[\\\"value\\\"],[\\\"target.value\\\"]]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(this.get('text')).to.equal('some random stuff');\n    });\n    (0, _mocha.it)('trims value on focusOut before calling custom focus-out', async function () {\n      this.set('text', 'some random stuff    ');\n      this.set('customFocusOut', function (value) {\n        (0, _chai.expect)((0, _testHelpers.find)('.gh-input').value, 'input value').to.equal('some random stuff');\n        (0, _chai.expect)(value, 'value').to.equal('some random stuff');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"i+/vG68C\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"input\\\",\\\"focus-out\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[29,\\\"mut\\\",[[25,[\\\"text\\\"]]],null]],[[\\\"value\\\"],[\\\"target.value\\\"]]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"customFocusOut\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.blur)('input');\n      (0, _chai.expect)(this.get('text')).to.equal('some random stuff');\n    });\n    (0, _mocha.it)('does not have the autofocus attribute if not set to focus', async function () {\n      this.set('text', 'some text');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"u9QLRPw2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.not.be.ok;\n    });\n    (0, _mocha.it)('has the autofocus attribute if set to focus', async function () {\n      this.set('text', 'some text');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Mucn91gl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.be.ok;\n    });\n    (0, _mocha.it)('handles undefined values', async function () {\n      this.set('text', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Mucn91gl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').autofocus).to.be.ok;\n    });\n    (0, _mocha.it)('handles non-string values', async function () {\n      this.set('text', 10);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Mucn91gl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-trim-focus-input\\\",null,[[\\\"value\\\",\\\"shouldFocus\\\"],[[29,\\\"readonly\\\",[[25,[\\\"text\\\"]]],null],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('input').value).to.equal('10');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-unsplash-photo-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-unsplash-photo', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      // NOTE: images.unsplash.com replaced with example.com to ensure we aren't\n      // loading lots of images during tests and we get an immediate 404\n      this.set('photo', {\n        id: 'OYFHT4X5isg',\n        created_at: '2017-08-09T00:20:42-04:00',\n        updated_at: '2017-08-11T08:27:42-04:00',\n        width: 5184,\n        height: 3456,\n        color: '#A8A99B',\n        likes: 58,\n        liked_by_user: false,\n        description: null,\n        user: {\n          id: 'cEpP9pR9Q7E',\n          updated_at: '2017-08-11T08:27:42-04:00',\n          username: 'danotis',\n          name: 'Dan Otis',\n          first_name: 'Dan',\n          last_name: 'Otis',\n          twitter_username: 'danotis',\n          portfolio_url: 'http://dan.exposure.co',\n          bio: 'Senior Visual Designer at Huge ',\n          location: 'San Jose, CA',\n          total_likes: 0,\n          total_photos: 8,\n          total_collections: 0,\n          profile_image: {\n            small: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=37f67120fc464d7d920ff23c84963b38',\n            medium: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0a4f8a583caec826ac6b1ca80161fa43',\n            large: 'https://example.com/profile-fb-1502251227-8fe7a0522137.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b3aa4206e5d87f3eaa7bbe9180ebcd2b'\n          },\n          links: {\n            self: 'https://api.unsplash.com/users/danotis',\n            html: 'https://unsplash.com/@danotis',\n            photos: 'https://api.unsplash.com/users/danotis/photos',\n            likes: 'https://api.unsplash.com/users/danotis/likes',\n            portfolio: 'https://api.unsplash.com/users/danotis/portfolio',\n            following: 'https://api.unsplash.com/users/danotis/following',\n            followers: 'https://api.unsplash.com/users/danotis/followers'\n          }\n        },\n        current_user_collections: [],\n        urls: {\n          raw: 'https://example.com/photo-1502252430442-aac78f397426',\n          full: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=20f86c2f7bbb019122498a45d8260ee9',\n          regular: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=181760db8b7a61fa60a35277d7eb434e',\n          small: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1e2265597b59e874a1a002b4c3fd961c',\n          thumb: 'https://example.com/photo-1502252430442-aac78f397426?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=57c86b0692bea92a282b9ab0dbfdacf4'\n        },\n        categories: [],\n        links: {\n          self: 'https://api.unsplash.com/photos/OYFHT4X5isg',\n          html: 'https://unsplash.com/photos/OYFHT4X5isg',\n          download: 'https://unsplash.com/photos/OYFHT4X5isg/download',\n          download_location: 'https://api.unsplash.com/photos/OYFHT4X5isg/download'\n        },\n        ratio: 0.6666666666666666\n      });\n    });\n    (0, _mocha.it)('sets background-color style', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ojWYCLNh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-unsplash-photo\\\",null,[[\\\"photo\\\"],[[25,[\\\"photo\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-container]').attributes.style.value).to.have.string('background-color: #A8A99B');\n    });\n    (0, _mocha.it)('sets padding-bottom style', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ojWYCLNh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-unsplash-photo\\\",null,[[\\\"photo\\\"],[[25,[\\\"photo\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // don't check full padding-bottom value as it will likely vary across\n      // browsers\n\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-container]').attributes.style.value).to.have.string('padding-bottom: 66.66');\n    });\n    (0, _mocha.it)('uses correct image size url', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ojWYCLNh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-unsplash-photo\\\",null,[[\\\"photo\\\"],[[25,[\\\"photo\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.src.value).to.have.string('&w=1200');\n    });\n    (0, _mocha.it)('calculates image width/height', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ojWYCLNh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"gh-unsplash-photo\\\",null,[[\\\"photo\\\"],[[25,[\\\"photo\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.width.value).to.equal('1200');\n      (0, _chai.expect)((0, _testHelpers.find)('[data-test-unsplash-photo-image]').attributes.height.value).to.equal('800');\n    });\n    (0, _mocha.it)('triggers insert action');\n    (0, _mocha.it)('triggers zoom action');\n    (0, _mocha.describe)('zoomed', function () {\n      (0, _mocha.it)('omits padding-bottom style');\n      (0, _mocha.it)('triggers insert action');\n      (0, _mocha.it)('triggers zoom action');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-unsplash-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: gh-unsplash', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.on('myAction', function(val) { ... });\n      // Template block usage:\n      // await render(hbs`\n      //   {{#gh-unsplash}}\n      //     template content\n      //   {{/gh-unsplash}}\n      // `);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7FKOtv14\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"gh-unsplash\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.$()).to.have.length(1);\n    });\n    (0, _mocha.it)('loads new photos by default');\n    (0, _mocha.it)('has responsive columns');\n    (0, _mocha.it)('can zoom');\n    (0, _mocha.it)('can close zoom by clicking on image');\n    (0, _mocha.it)('can close zoom by clicking outside image');\n    (0, _mocha.it)('triggers insert action');\n    (0, _mocha.it)('handles errors');\n    (0, _mocha.describe)('searching', function () {\n      (0, _mocha.it)('works');\n      (0, _mocha.it)('handles no results');\n      (0, _mocha.it)('handles error');\n    });\n    (0, _mocha.describe)('closing', function () {\n      (0, _mocha.it)('triggers close action');\n      (0, _mocha.it)('can be triggerd by escape key');\n      (0, _mocha.it)('cannot be triggered by escape key when zoomed');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-uploader-test\", [\"pretender\", \"sinon\", \"@ember/test-helpers\", \"ghost-admin/tests/helpers/file-upload\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _sinon, _testHelpers, _fileUpload, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  const stubSuccessfulUpload = function stubSuccessfulUpload(server) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    server.post('/ghost/api/v2/admin/images/upload/', function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, '{\"images\": [{\"url\": \"/content/images/test.png\"}]}'];\n    }, delay);\n  };\n\n  const stubFailedUpload = function stubFailedUpload(server, code, error) {\n    let delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    server.post('/ghost/api/v2/admin/images/upload/', function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        errors: [{\n          type: error,\n          message: \"Error: \".concat(error)\n        }]\n      })];\n    }, delay);\n  };\n\n  (0, _mocha.describe)('Integration: Component: gh-uploader', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.describe)('uploads', function () {\n      beforeEach(function () {\n        stubSuccessfulUpload(server);\n      });\n      (0, _mocha.it)('triggers uploads when `files` is set', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"MX80iLDO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n\n        let _server$handledReques = _slicedToArray(server.handledRequests, 1),\n            lastRequest = _server$handledReques[0];\n\n        (0, _chai.expect)(server.handledRequests.length).to.equal(1);\n        (0, _chai.expect)(lastRequest.url).to.equal('/ghost/api/v2/admin/images/upload/'); // requestBody is a FormData object\n        // this will fail in anything other than Chrome and Firefox\n        // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility\n\n        (0, _chai.expect)(lastRequest.requestBody.has('file')).to.be.true;\n      });\n      (0, _mocha.it)('triggers multiple uploads', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"MX80iLDO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(server.handledRequests.length).to.equal(2);\n      });\n      (0, _mocha.it)('triggers onStart when upload starts', async function () {\n        this.set('uploadStarted', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"8Xg4AptG\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onStart\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadStarted\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.get('uploadStarted').calledOnce).to.be.true;\n      });\n      (0, _mocha.it)('triggers onUploadSuccess when a file uploads', async function () {\n        this.set('fileUploaded', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"T8ej7UZg\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onUploadSuccess\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"fileUploaded\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)(); // triggered for each file\n\n        (0, _chai.expect)(this.get('fileUploaded').calledTwice).to.be.true; // filename and url is passed in arg\n\n        let firstCall = this.get('fileUploaded').getCall(0);\n        (0, _chai.expect)(firstCall.args[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(firstCall.args[0].url).to.equal('/content/images/test.png');\n      });\n      (0, _mocha.it)('triggers onComplete when all files uploaded', async function () {\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"aPXSLqmO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onComplete\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadsFinished\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.get('uploadsFinished').calledOnce).to.be.true; // array of filenames and urls is passed in arg\n\n        let _this$get$getCall$arg = _slicedToArray(this.get('uploadsFinished').getCall(0).args, 1),\n            result = _this$get$getCall$arg[0];\n\n        (0, _chai.expect)(result.length).to.equal(2);\n        (0, _chai.expect)(result[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(result[0].url).to.equal('/content/images/test.png');\n        (0, _chai.expect)(result[1].fileName).to.equal('file2.png');\n        (0, _chai.expect)(result[1].url).to.equal('/content/images/test.png');\n      });\n      (0, _mocha.it)('onComplete only passes results for last upload', async function () {\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"aPXSLqmO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onComplete\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadsFinished\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n\n        let _this$get$getCall$arg2 = _slicedToArray(this.get('uploadsFinished').getCall(1).args, 1),\n            results = _this$get$getCall$arg2[0];\n\n        (0, _chai.expect)(results.length).to.equal(1);\n        (0, _chai.expect)(results[0].fileName).to.equal('file2.png');\n      });\n      (0, _mocha.it)('onComplete returns results in same order as selected', async function () {\n        // first request has a delay to simulate larger file\n        server.post('/ghost/api/v2/admin/images/upload/', function () {\n          // second request has no delay to simulate small file\n          stubSuccessfulUpload(server, 0);\n          return [200, {\n            'Content-Type': 'application/json'\n          }, '\"/content/images/test.png\"'];\n        }, 100);\n        this.set('uploadsFinished', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"aPXSLqmO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onComplete\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadsFinished\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), // large - finishes last\n        (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        }) // small - finishes first\n        ]);\n        await (0, _testHelpers.settled)();\n\n        let _this$get$getCall$arg3 = _slicedToArray(this.get('uploadsFinished').getCall(0).args, 1),\n            results = _this$get$getCall$arg3[0];\n\n        (0, _chai.expect)(results.length).to.equal(2);\n        (0, _chai.expect)(results[0].fileName).to.equal('file1.png');\n      });\n      (0, _mocha.it)('doesn\\'t allow new files to be set whilst uploading', async function () {\n        let errorSpy = _sinon.default.spy(console, 'error');\n\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"MX80iLDO\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]); // logs error because upload is in progress\n\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)(); // runs ok because original upload has finished\n\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(server.handledRequests.length).to.equal(2);\n        (0, _chai.expect)(errorSpy.calledOnce).to.be.true;\n        errorSpy.restore();\n      });\n      (0, _mocha.it)('yields isUploading whilst upload is in progress', async function () {\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"PjuZrHgh\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[[4,\\\"if\\\",[[24,1,[\\\"isUploading\\\"]]],null,{\\\"statements\\\":[[0,\\\"                    \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"is-uploading-test\\\"],[9],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('.is-uploading-test', {\n          timeout: 100\n        });\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.is-uploading-test')).to.not.exist;\n      });\n      (0, _mocha.it)('yields progressBar component with total upload progress', async function () {\n        stubSuccessfulUpload(server, 100);\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"hPEEjuxk\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[[0,\\\"                \\\"],[1,[24,1,[\\\"progressBar\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(), (0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('[data-test-progress-bar]', {\n          timeout: 100\n        });\n        await (0, _testHelpers.waitFor)('[data-test-progress-width^=\"5\"]', {\n          timeout: 150\n        });\n        await (0, _testHelpers.settled)();\n        let finalProgressWidth = parseInt((0, _testHelpers.find)('[data-test-progress-bar]').style.width);\n        (0, _chai.expect)(finalProgressWidth, 'final progress width').to.equal(100);\n      });\n      (0, _mocha.it)('yields files property', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"gl5+Ueur\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"file\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[[4,\\\"each\\\",[[24,1,[\\\"files\\\"]]],null,{\\\"statements\\\":[[0,\\\"                    \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"file\\\"],[9],[1,[24,2,[\\\"name\\\"]],false],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        (0, _chai.expect)((0, _testHelpers.findAll)('.file')[0].textContent).to.equal('file1.png');\n        (0, _chai.expect)((0, _testHelpers.findAll)('.file')[1].textContent).to.equal('file2.png');\n      });\n      (0, _mocha.it)('can be cancelled', async function () {\n        stubSuccessfulUpload(server, 200);\n        this.set('cancelled', _sinon.default.spy());\n        this.set('complete', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"BdQWoa5O\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onCancel\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"cancelled\\\"]]],null]]],{\\\"statements\\\":[[4,\\\"if\\\",[[24,1,[\\\"isUploading\\\"]]],null,{\\\"statements\\\":[[0,\\\"                    \\\"],[7,\\\"button\\\"],[11,\\\"class\\\",\\\"cancel-button\\\"],[9],[0,\\\"Cancel\\\"],[3,\\\"action\\\",[[24,0,[]],[24,1,[\\\"cancel\\\"]]]],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.waitFor)('.cancel-button');\n        await (0, _testHelpers.click)('.cancel-button');\n        (0, _chai.expect)(this.get('cancelled').calledOnce, 'onCancel triggered').to.be.true;\n        (0, _chai.expect)(this.get('complete').notCalled, 'onComplete triggered').to.be.true;\n      });\n      (0, _mocha.it)('uploads to supplied `uploadUrl`', async function () {\n        server.post('/ghost/api/v2/admin/images/', function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, '{\"images\": [{\"url\": \"/content/images/test.png\"}]'];\n        });\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"CawDxHGf\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"uploadUrl\\\"],[[25,[\\\"files\\\"]],\\\"/images/\\\"]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n\n        let _server$handledReques2 = _slicedToArray(server.handledRequests, 1),\n            lastRequest = _server$handledReques2[0];\n\n        (0, _chai.expect)(lastRequest.url).to.equal('/ghost/api/v2/admin/images/');\n      });\n      (0, _mocha.it)('passes supplied paramName in request', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"qtik0FOg\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"paramName\\\"],[[25,[\\\"files\\\"]],\\\"testupload\\\"]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)()]);\n        await (0, _testHelpers.settled)();\n\n        let _server$handledReques3 = _slicedToArray(server.handledRequests, 1),\n            lastRequest = _server$handledReques3[0]; // requestBody is a FormData object\n        // this will fail in anything other than Chrome and Firefox\n        // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility\n\n\n        (0, _chai.expect)(lastRequest.requestBody.has('testupload')).to.be.true;\n      });\n    });\n    (0, _mocha.describe)('validation', function () {\n      (0, _mocha.it)('validates file extensions by default', async function () {\n        this.set('onFailed', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"/OKxs4sh\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n                \\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"extensions\\\",\\\"onFailed\\\"],[[25,[\\\"files\\\"]],\\\"jpg,jpeg\\\",[29,\\\"action\\\",[[24,0,[]],[25,[\\\"onFailed\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n\n        let _this$get$firstCall$a = _slicedToArray(this.get('onFailed').firstCall.args, 1),\n            onFailedResult = _this$get$firstCall$a[0];\n\n        (0, _chai.expect)(onFailedResult.length).to.equal(1);\n        (0, _chai.expect)(onFailedResult[0].fileName, 'onFailed file name').to.equal('test.png');\n        (0, _chai.expect)(onFailedResult[0].message, 'onFailed message').to.match(/not supported/);\n      });\n      (0, _mocha.it)('accepts custom validation method', async function () {\n        this.set('validate', function (file) {\n          return \"\".concat(file.name, \" failed test validation\");\n        });\n        this.set('onFailed', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"HMZ7YjBv\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n                \\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"validate\\\",\\\"onFailed\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"validate\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"onFailed\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"\\\\n            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n\n        let _this$get$firstCall$a2 = _slicedToArray(this.get('onFailed').firstCall.args, 1),\n            onFailedResult = _this$get$firstCall$a2[0];\n\n        (0, _chai.expect)(onFailedResult.length).to.equal(1);\n        (0, _chai.expect)(onFailedResult[0].fileName).to.equal('test.png');\n        (0, _chai.expect)(onFailedResult[0].message).to.equal('test.png failed test validation');\n      });\n      (0, _mocha.it)('yields errors when validation fails', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"2SsXtXKX\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"error\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"extensions\\\"],[[25,[\\\"files\\\"]],\\\"jpg,jpeg\\\"]],{\\\"statements\\\":[[4,\\\"each\\\",[[24,1,[\\\"errors\\\"]]],null,{\\\"statements\\\":[[0,\\\"                        \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"error-fileName\\\"],[9],[1,[24,2,[\\\"fileName\\\"]],false],[10],[0,\\\"\\\\n                        \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"error-message\\\"],[9],[1,[24,2,[\\\"message\\\"]],false],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null],[0,\\\"            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.error-fileName').textContent).to.equal('test.png');\n        (0, _chai.expect)((0, _testHelpers.find)('.error-message').textContent).to.match(/not supported/);\n      });\n    });\n    (0, _mocha.describe)('server errors', function () {\n      beforeEach(function () {\n        stubFailedUpload(server, 500, 'No upload for you');\n      });\n      (0, _mocha.it)('triggers onFailed when uploads complete', async function () {\n        this.set('uploadFailed', _sinon.default.spy());\n        this.set('uploadComplete', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"5S/pBmxL\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onFailed\\\",\\\"onComplete\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFailed\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadComplete\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.get('uploadFailed').calledOnce).to.be.true;\n        (0, _chai.expect)(this.get('uploadComplete').calledOnce).to.be.true;\n\n        let _this$get$firstCall$a3 = _slicedToArray(this.get('uploadFailed').firstCall.args, 1),\n            failures = _this$get$firstCall$a3[0];\n\n        (0, _chai.expect)(failures.length).to.equal(2);\n        (0, _chai.expect)(failures[0].fileName).to.equal('file1.png');\n        (0, _chai.expect)(failures[0].message).to.equal('Error: No upload for you');\n      });\n      (0, _mocha.it)('triggers onUploadFailure when each upload fails', async function () {\n        this.set('uploadFail', _sinon.default.spy());\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"quete0vH\",\n          \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\",\\\"onUploadFailure\\\"],[[25,[\\\"files\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"uploadFail\\\"]]],null]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'file1.png'\n        }), (0, _fileUpload.createFile)(['test'], {\n          name: 'file2.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(this.get('uploadFail').calledTwice).to.be.true;\n\n        let _this$get$firstCall$a4 = _slicedToArray(this.get('uploadFail').firstCall.args, 1),\n            firstFailure = _this$get$firstCall$a4[0];\n\n        (0, _chai.expect)(firstFailure.fileName).to.equal('file1.png');\n        (0, _chai.expect)(firstFailure.message).to.equal('Error: No upload for you');\n\n        let _this$get$secondCall$ = _slicedToArray(this.get('uploadFail').secondCall.args, 1),\n            secondFailure = _this$get$secondCall$[0];\n\n        (0, _chai.expect)(secondFailure.fileName).to.equal('file2.png');\n        (0, _chai.expect)(secondFailure.message).to.equal('Error: No upload for you');\n      });\n      (0, _mocha.it)('yields errors when uploads fail', async function () {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template({\n          \"id\": \"1cqLKxEG\",\n          \"block\": \"{\\\"symbols\\\":[\\\"uploader\\\",\\\"error\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-uploader\\\",null,[[\\\"files\\\"],[[25,[\\\"files\\\"]]]],{\\\"statements\\\":[[4,\\\"each\\\",[[24,1,[\\\"errors\\\"]]],null,{\\\"statements\\\":[[0,\\\"                        \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"error-fileName\\\"],[9],[1,[24,2,[\\\"fileName\\\"]],false],[10],[0,\\\"\\\\n                        \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"error-message\\\"],[9],[1,[24,2,[\\\"message\\\"]],false],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null]],\\\"parameters\\\":[1]},null],[0,\\\"            \\\"]],\\\"hasEval\\\":false}\",\n          \"meta\": {}\n        }));\n        this.set('files', [(0, _fileUpload.createFile)(['test'], {\n          name: 'test.png'\n        })]);\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)((0, _testHelpers.find)('.error-fileName').textContent).to.equal('test.png');\n        (0, _chai.expect)((0, _testHelpers.find)('.error-message').textContent).to.equal('Error: No upload for you');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/gh-validation-status-container-test\", [\"ember-data\", \"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_emberData, _mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  const Errors = _emberData.default.Errors;\n  (0, _mocha.describe)('Integration: Component: gh-validation-status-container', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    beforeEach(function () {\n      let testObject = Ember.Object.create();\n      testObject.set('name', 'Test');\n      testObject.set('hasValidated', []);\n      testObject.set('errors', Errors.create());\n      this.set('testObject', testObject);\n    });\n    (0, _mocha.it)('has no success/error class by default', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"90aRh9Ay\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-validation-status-container\\\",null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[25,[\\\"testObject\\\",\\\"errors\\\"]],[25,[\\\"testObject\\\",\\\"hasValidated\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('error');\n    });\n    (0, _mocha.it)('has success class when valid', async function () {\n      this.get('testObject.hasValidated').push('name');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"90aRh9Ay\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-validation-status-container\\\",null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[25,[\\\"testObject\\\",\\\"errors\\\"]],[25,[\\\"testObject\\\",\\\"hasValidated\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('error');\n    });\n    (0, _mocha.it)('has error class when invalid', async function () {\n      this.get('testObject.hasValidated').push('name');\n      this.get('testObject.errors').add('name', 'has error');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"90aRh9Ay\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-validation-status-container\\\",null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[25,[\\\"testObject\\\",\\\"errors\\\"]],[25,[\\\"testObject\\\",\\\"hasValidated\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.not.have.class('success');\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.have.class('error');\n    });\n    (0, _mocha.it)('still renders if hasValidated is undefined', async function () {\n      this.set('testObject.hasValidated', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"90aRh9Ay\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"gh-validation-status-container\\\",null,[[\\\"class\\\",\\\"property\\\",\\\"errors\\\",\\\"hasValidated\\\"],[\\\"gh-test\\\",\\\"name\\\",[25,[\\\"testObject\\\",\\\"errors\\\"]],[25,[\\\"testObject\\\",\\\"hasValidated\\\"]]]],{\\\"statements\\\":[],\\\"parameters\\\":[]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)((0, _testHelpers.find)('.gh-test')).to.exist;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/components/modal-transfer-owner-test\", [\"sinon\", \"@ember/test-helpers\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _testHelpers, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Component: modal-transfer-owner', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('triggers confirm action', async function () {\n      let confirm = _sinon.default.stub();\n\n      let closeModal = _sinon.default.spy();\n\n      confirm.returns(Ember.RSVP.resolve({}));\n      this.set('confirm', confirm);\n      this.set('closeModal', closeModal);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"pNdlkQ8Q\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"modal-transfer-owner\\\",null,[[\\\"confirm\\\",\\\"closeModal\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"confirm\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"closeModal\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.gh-btn.gh-btn-red');\n      (0, _chai.expect)(confirm.calledOnce, 'confirm called').to.be.true;\n      (0, _chai.expect)(closeModal.calledOnce, 'closeModal called').to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/background-image-style-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: background-image-style', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"dKTSW2Cn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[\\\"test.png\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test.png);');\n    });\n    (0, _mocha.it)('escapes URLs', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"FilfC/rk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[\\\"test image.png\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test%20image.png);');\n    });\n    (0, _mocha.it)('handles already escaped URLs', async function () {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"KMmq5O6A\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[\\\"test%20image.png\\\"],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('background-image: url(test%20image.png);');\n    });\n    (0, _mocha.it)('handles empty URLs', async function () {\n      this.set('testImage', undefined);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YVQh6zP5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[[25,[\\\"testImage\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element, 'undefined').to.have.trimmed.text('');\n      this.set('testImage', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YVQh6zP5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[[25,[\\\"testImage\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element, 'null').to.have.trimmed.text('');\n      this.set('testImage', '');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YVQh6zP5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"background-image-style\\\",[[25,[\\\"testImage\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element, 'blank').to.have.trimmed.text('');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/clean-basic-html-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: clean-basic-html', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders', async function () {\n      this.set('inputValue', '1234');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"X92PlVS1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"clean-basic-html\\\",[[25,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.text('1234');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/helpers/sanitize-html-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\"], function (_mocha, _chai, _testHelpers, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Helper: sanitize-html', function () {\n    (0, _emberMocha.setupRenderingTest)();\n    (0, _mocha.it)('renders html', async function () {\n      this.set('inputValue', '<strong>bold</strong>');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vwt4yinG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"sanitize-html\\\",[[25,[\\\"inputValue\\\"]]],null],true]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.html('<strong>bold</strong>');\n    });\n    (0, _mocha.it)('replaces scripts', async function () {\n      this.set('inputValue', '<script></script>');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vwt4yinG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"sanitize-html\\\",[[25,[\\\"inputValue\\\"]]],null],true]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      (0, _chai.expect)(this.element).to.have.trimmed.html('<pre class=\"js-embed-placeholder\">Embedded JavaScript</pre>');\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/ajax-test\", [\"pretender\", \"ghost-admin/config/environment\", \"mocha\", \"chai\", \"ember-ajax/errors\", \"ghost-admin/services/ajax\", \"ember-mocha\"], function (_pretender, _environment, _mocha, _chai, _errors, _ajax, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function stubAjaxEndpoint(server) {\n    let response = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n    server.get('/test/', function () {\n      return [code, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(response)];\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: ajax', function () {\n    (0, _emberMocha.setupTest)('service:ajax', {\n      integration: true\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('adds Ghost version header to requests', function (done) {\n      let version = _environment.default.APP.version;\n      let ajax = this.subject();\n      stubAjaxEndpoint(server, {});\n      ajax.request('/test/').then(() => {\n        let _server$handledReques = _slicedToArray(server.handledRequests, 1),\n            request = _server$handledReques[0];\n\n        (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses single message response text', function (done) {\n      let error = {\n        message: 'Test Error'\n      };\n      stubAjaxEndpoint(server, error, 500);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(1);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('Test Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses single error response text', function (done) {\n      let error = {\n        error: 'Test Error'\n      };\n      stubAjaxEndpoint(server, error, 500);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(1);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('Test Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('correctly parses multiple error messages', function (done) {\n      let error = {\n        errors: ['First Error', 'Second Error']\n      };\n      stubAjaxEndpoint(server, error, 500);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true();\n      }).catch(error => {\n        (0, _chai.expect)(error.payload.errors.length).to.equal(2);\n        (0, _chai.expect)(error.payload.errors[0].message).to.equal('First Error');\n        (0, _chai.expect)(error.payload.errors[1].message).to.equal('Second Error');\n        done();\n      });\n    });\n    (0, _mocha.it)('returns default error object for non built-in error', function (done) {\n      stubAjaxEndpoint(server, {}, 500);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _errors.isAjaxError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for built-in errors', function (done) {\n      stubAjaxEndpoint(server, '', 401);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _errors.isUnauthorizedError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for VersionMismatchError', function (done) {\n      server.get('/test/', function () {\n        return [400, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          errors: [{\n            type: 'VersionMismatchError',\n            statusCode: 400\n          }]\n        })];\n      });\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isVersionMismatchError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for RequestEntityTooLargeError on 413 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 413);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isRequestEntityTooLargeError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for UnsupportedMediaTypeError on 415 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 415);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isUnsupportedMediaTypeError)(error)).to.be.true;\n        done();\n      });\n    });\n    (0, _mocha.it)('handles error checking for MaintenanceError on 503 errors', function (done) {\n      stubAjaxEndpoint(server, {}, 503);\n      let ajax = this.subject();\n      ajax.request('/test/').then(() => {\n        (0, _chai.expect)(false).to.be.true;\n      }).catch(error => {\n        (0, _chai.expect)((0, _ajax.isMaintenanceError)(error)).to.be.true;\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/config-test\", [\"pretender\", \"ember-test-helpers/wait\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _wait, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Service: config', function () {\n    (0, _emberMocha.setupTest)('service:config', {\n      integration: true\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('returns a list of timezones in the expected format', function (done) {\n      let service = this.subject();\n      service.get('availableTimezones').then(function (timezones) {\n        (0, _chai.expect)(timezones.length).to.equal(66);\n        (0, _chai.expect)(timezones[0].name).to.equal('Pacific/Pago_Pago');\n        (0, _chai.expect)(timezones[0].label).to.equal('(GMT -11:00) Midway Island, Samoa');\n        (0, _chai.expect)(timezones[1].name).to.equal('Pacific/Honolulu');\n        (0, _chai.expect)(timezones[1].label).to.equal('(GMT -10:00) Hawaii');\n        done();\n      });\n    });\n    (0, _mocha.it)('normalizes blogUrl to non-trailing-slash', function (done) {\n      let stubBlogUrl = function stubBlogUrl(url) {\n        server.get('/ghost/api/v2/admin/config/', function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({})];\n        });\n        server.get('/ghost/api/v2/admin/site/', function () {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({\n            site: {\n              url\n            }\n          })];\n        });\n      };\n\n      let service = this.subject();\n      stubBlogUrl('http://localhost:2368/');\n      service.fetch().then(() => {\n        (0, _chai.expect)(service.get('blogUrl'), 'trailing-slash').to.equal('http://localhost:2368');\n      });\n      (0, _wait.default)().then(() => {\n        stubBlogUrl('http://localhost:2368');\n        service.fetch().then(() => {\n          (0, _chai.expect)(service.get('blogUrl'), 'non-trailing-slash').to.equal('http://localhost:2368');\n          done();\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/feature-test\", [\"ghost-admin/services/feature\", \"pretender\", \"ember-test-helpers/wait\", \"mocha\", \"chai\", \"ember-mocha\"], function (_feature, _pretender, _wait, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function stubSettings(server, labs) {\n    let validSave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let settings = [{\n      id: '1',\n      type: 'blog',\n      key: 'labs',\n      value: JSON.stringify(labs)\n    }];\n    server.get('/ghost/api/v2/admin/settings/', function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        settings\n      })];\n    });\n    server.put('/ghost/api/v2/admin/settings/', function (request) {\n      let statusCode = validSave ? 200 : 400;\n      let response = validSave ? request.requestBody : JSON.stringify({\n        errors: [{\n          message: 'Test Error'\n        }]\n      });\n      return [statusCode, {\n        'Content-Type': 'application/json'\n      }, response];\n    });\n  }\n\n  function stubUser(server, accessibility) {\n    let validSave = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let users = [{\n      id: '1',\n      // Add extra properties for the validations\n      name: 'Test User',\n      email: 'test@example.com',\n      accessibility: JSON.stringify(accessibility),\n      roles: [{\n        id: 1,\n        name: 'Owner',\n        description: 'Owner'\n      }]\n    }];\n    server.get('/ghost/api/v2/admin/users/me/', function () {\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        users\n      })];\n    });\n    server.put('/ghost/api/v2/admin/users/1/', function (request) {\n      let statusCode = validSave ? 200 : 400;\n      let response = validSave ? request.requestBody : JSON.stringify({\n        errors: [{\n          message: 'Test Error'\n        }]\n      });\n      return [statusCode, {\n        'Content-Type': 'application/json'\n      }, response];\n    });\n  }\n\n  function addTestFlag() {\n    _feature.default.reopen({\n      testFlag: (0, _feature.feature)('testFlag'),\n      testUserFlag: (0, _feature.feature)('testUserFlag', {\n        user: true\n      })\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: feature', function () {\n    (0, _emberMocha.setupTest)('service:feature', {\n      integration: true\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads labs and user settings correctly', function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {\n        testUserFlag: true\n      });\n      addTestFlag();\n      let service = this.subject();\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns false for set flag with config false and labs false', function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config true and labs false', function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', true);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config false and labs true', function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with config true and labs true', function () {\n      stubSettings(server, {\n        testFlag: true\n      });\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', true);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('labs.testFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('returns false for set flag with accessibility false', function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let service = this.subject();\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('accessibility.testUserFlag')).to.be.false;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n      });\n    });\n    (0, _mocha.it)('returns true for set flag with accessibility true', function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: true\n      });\n      addTestFlag();\n      let service = this.subject();\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('accessibility.testUserFlag')).to.be.true;\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('saves labs setting correctly', function () {\n      stubSettings(server, {\n        testFlag: false\n      });\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testFlag', true);\n        });\n        return (0, _wait.default)().then(() => {\n          (0, _chai.expect)(server.handlers[1].numberOfCalls).to.equal(1);\n          (0, _chai.expect)(service.get('testFlag')).to.be.true;\n        });\n      });\n    });\n    (0, _mocha.it)('saves accessibility setting correctly', function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      });\n      addTestFlag();\n      let service = this.subject();\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testUserFlag', true);\n        });\n        return (0, _wait.default)().then(() => {\n          (0, _chai.expect)(server.handlers[3].numberOfCalls).to.equal(1);\n          (0, _chai.expect)(service.get('testUserFlag')).to.be.true;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for server errors on labs save', function () {\n      stubSettings(server, {\n        testFlag: false\n      }, false);\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testFlag', true);\n        });\n        return (0, _wait.default)().then(() => {\n          (0, _chai.expect)(server.handlers[1].numberOfCalls, 'PUT call is made').to.equal(1);\n          (0, _chai.expect)(service.get('notifications.alerts').length, 'number of alerts shown').to.equal(1);\n          (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for server errors on accessibility save', function () {\n      stubSettings(server, {});\n      stubUser(server, {\n        testUserFlag: false\n      }, false);\n      addTestFlag();\n      let service = this.subject();\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        Ember.run(() => {\n          service.set('testUserFlag', true);\n        });\n        return (0, _wait.default)().then(() => {\n          (0, _chai.expect)(server.handlers[3].numberOfCalls, 'PUT call is made').to.equal(1);\n          (0, _chai.expect)(service.get('notifications.alerts').length, 'number of alerts shown').to.equal(1);\n          (0, _chai.expect)(service.get('testUserFlag')).to.be.false;\n        });\n      });\n    });\n    (0, _mocha.it)('notifies for validation errors', function () {\n      stubSettings(server, {\n        testFlag: false\n      }, true, false);\n      stubUser(server, {});\n      addTestFlag();\n      let service = this.subject();\n      service.get('config').set('testFlag', false);\n      return service.fetch().then(() => {\n        (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        Ember.run(() => {\n          (0, _chai.expect)(() => {\n            service.set('testFlag', true);\n          }, Ember.Error, 'threw validation error');\n        });\n        return (0, _wait.default)().then(() => {\n          // ensure validation is happening before the API is hit\n          (0, _chai.expect)(server.handlers[1].numberOfCalls).to.equal(0);\n          (0, _chai.expect)(service.get('testFlag')).to.be.false;\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/lazy-loader-test\", [\"jquery\", \"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_jquery, _pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Integration: Service: lazy-loader', function () {\n    (0, _emberMocha.setupTest)('service:lazy-loader', {\n      integration: true\n    });\n    let server;\n    let ghostPaths = {\n      adminRoot: '/assets/'\n    };\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('loads a script correctly and only once', async function () {\n      let subject = this.subject({\n        ghostPaths,\n        scriptPromises: {},\n        testing: false\n      }); // first load should add script element\n\n      await subject.loadScript('test', 'lazy-test.js').then(() => {}).catch(() => {});\n      (0, _chai.expect)(document.querySelectorAll('script[src=\"/assets/lazy-test.js\"]').length, 'no of script tags on first load').to.equal(1); // second load should not add another script element\n\n      await subject.loadScript('test', '/assets/lazy-test.js').then(() => {}).catch(() => {});\n      (0, _chai.expect)(document.querySelectorAll('script[src=\"/assets/lazy-test.js\"]').length, 'no of script tags on second load').to.equal(1);\n    });\n    (0, _mocha.it)('loads styles correctly', function () {\n      let subject = this.subject({\n        ghostPaths,\n        testing: false\n      });\n      return subject.loadStyle('testing', 'style.css').catch(() => {\n        // we add a catch handler here because `/assets/style.css` doesn't exist\n        (0, _chai.expect)((0, _jquery.default)('#testing-styles').length).to.equal(1);\n        (0, _chai.expect)((0, _jquery.default)('#testing-styles').attr('href')).to.equal('/assets/style.css');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/slug-generator-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function stubSlugEndpoint(server, type, slug) {\n    server.get('/ghost/api/v2/admin/slugs/:type/:slug/', function (request) {\n      (0, _chai.expect)(request.params.type).to.equal(type);\n      (0, _chai.expect)(request.params.slug).to.equal(slug);\n      return [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        slugs: [{\n          slug: Ember.String.dasherize(slug)\n        }]\n      })];\n    });\n  }\n\n  (0, _mocha.describe)('Integration: Service: slug-generator', function () {\n    (0, _emberMocha.setupTest)('service:slug-generator', {\n      integration: true\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('returns empty if no slug is provided', function (done) {\n      let service = this.subject();\n      service.generateSlug('post', '').then(function (slug) {\n        (0, _chai.expect)(slug).to.equal('');\n        done();\n      });\n    });\n    (0, _mocha.it)('calls correct endpoint and returns correct data', function (done) {\n      let rawSlug = 'a test post';\n      stubSlugEndpoint(server, 'post', rawSlug);\n      let service = this.subject();\n      service.generateSlug('post', rawSlug).then(function (slug) {\n        (0, _chai.expect)(slug).to.equal(Ember.String.dasherize(rawSlug));\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/integration/services/store-test\", [\"pretender\", \"ghost-admin/config/environment\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _environment, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Integration: Service: store', function () {\n    (0, _emberMocha.setupTest)('service:store', {\n      integration: true\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('adds Ghost version header to requests', function (done) {\n      let version = _environment.default.APP.version;\n      let store = this.subject();\n      server.get('/ghost/api/v2/admin/posts/1/', function () {\n        return [404, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({})];\n      });\n      store.find('post', 1).catch(() => {\n        let _server$handledReques = _slicedToArray(server.handledRequests, 1),\n            request = _server$handledReques[0];\n\n        (0, _chai.expect)(request.requestHeaders['X-Ghost-Version']).to.equal(version);\n        done();\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  describe('ESLint | app', function () {\n    it('adapters/application.js', function () {// test passed\n    });\n    it('adapters/base.js', function () {// test passed\n    });\n    it('adapters/embedded-relation-adapter.js', function () {// test passed\n    });\n    it('adapters/page.js', function () {// test passed\n    });\n    it('adapters/post.js', function () {// test passed\n    });\n    it('adapters/setting.js', function () {// test passed\n    });\n    it('adapters/tag.js', function () {// test passed\n    });\n    it('adapters/theme.js', function () {// test passed\n    });\n    it('adapters/user.js', function () {// test passed\n    });\n    it('app.js', function () {// test passed\n    });\n    it('authenticators/cookie.js', function () {// test passed\n    });\n    it('components/aspect-ratio-box.js', function () {// test passed\n    });\n    it('components/gh-activating-list-item.js', function () {// test passed\n    });\n    it('components/gh-alert.js', function () {// test passed\n    });\n    it('components/gh-alerts.js', function () {// test passed\n    });\n    it('components/gh-app.js', function () {// test passed\n    });\n    it('components/gh-basic-dropdown.js', function () {// test passed\n    });\n    it('components/gh-blog-url.js', function () {// test passed\n    });\n    it('components/gh-cm-editor.js', function () {// test passed\n    });\n    it('components/gh-content-cover.js', function () {// test passed\n    });\n    it('components/gh-date-time-picker.js', function () {// test passed\n    });\n    it('components/gh-download-count.js', function () {// test passed\n    });\n    it('components/gh-dropdown-button.js', function () {// test passed\n    });\n    it('components/gh-dropdown.js', function () {// test passed\n    });\n    it('components/gh-editor-post-status.js', function () {// test passed\n    });\n    it('components/gh-editor.js', function () {// test passed\n    });\n    it('components/gh-error-message.js', function () {// test passed\n    });\n    it('components/gh-feature-flag.js', function () {// test passed\n    });\n    it('components/gh-file-input.js', function () {// test passed\n    });\n    it('components/gh-file-upload.js', function () {// test passed\n    });\n    it('components/gh-file-uploader.js', function () {// test passed\n    });\n    it('components/gh-form-group.js', function () {// test passed\n    });\n    it('components/gh-fullscreen-modal.js', function () {// test passed\n    });\n    it('components/gh-image-uploader-with-preview.js', function () {// test passed\n    });\n    it('components/gh-image-uploader.js', function () {// test passed\n    });\n    it('components/gh-infinity-loader.js', function () {// test passed\n    });\n    it('components/gh-koenig-editor.js', function () {// test passed\n    });\n    it('components/gh-loading-spinner.js', function () {// test passed\n    });\n    it('components/gh-main.js', function () {// test passed\n    });\n    it('components/gh-markdown-editor.js', function () {// test passed\n    });\n    it('components/gh-member-avatar.js', function () {// test passed\n    });\n    it('components/gh-mobile-nav-bar.js', function () {// test passed\n    });\n    it('components/gh-nav-menu.js', function () {// test passed\n    });\n    it('components/gh-navitem-url-input.js', function () {// test passed\n    });\n    it('components/gh-navitem.js', function () {// test passed\n    });\n    it('components/gh-notification.js', function () {// test passed\n    });\n    it('components/gh-notifications.js', function () {// test passed\n    });\n    it('components/gh-post-settings-menu.js', function () {// test passed\n    });\n    it('components/gh-posts-list-item.js', function () {// test passed\n    });\n    it('components/gh-profile-image.js', function () {// test passed\n    });\n    it('components/gh-progress-bar.js', function () {// test passed\n    });\n    it('components/gh-psm-authors-input.js', function () {// test passed\n    });\n    it('components/gh-psm-tags-input.js', function () {// test passed\n    });\n    it('components/gh-psm-template-select.js', function () {// test passed\n    });\n    it('components/gh-publishmenu-draft.js', function () {// test passed\n    });\n    it('components/gh-publishmenu-published.js', function () {// test passed\n    });\n    it('components/gh-publishmenu-scheduled.js', function () {// test passed\n    });\n    it('components/gh-publishmenu.js', function () {// test passed\n    });\n    it('components/gh-scheduled-post-countdown.js', function () {// test passed\n    });\n    it('components/gh-scroll-trigger.js', function () {// test passed\n    });\n    it('components/gh-search-input-trigger.js', function () {// test passed\n    });\n    it('components/gh-search-input.js', function () {// test passed\n    });\n    it('components/gh-simplemde.js', function () {// test passed\n    });\n    it('components/gh-site-iframe.js', function () {// test passed\n    });\n    it('components/gh-skip-link.js', function () {// test passed\n    });\n    it('components/gh-subscribers-table.js', function () {// test passed\n    });\n    it('components/gh-tag-settings-form.js', function () {// test passed\n    });\n    it('components/gh-tag.js', function () {// test passed\n    });\n    it('components/gh-tags-management-container.js', function () {// test passed\n    });\n    it('components/gh-task-button.js', function () {// test passed\n    });\n    it('components/gh-text-input.js', function () {// test passed\n    });\n    it('components/gh-textarea.js', function () {// test passed\n    });\n    it('components/gh-theme-error-li.js', function () {// test passed\n    });\n    it('components/gh-theme-table.js', function () {// test passed\n    });\n    it('components/gh-timezone-select.js', function () {// test passed\n    });\n    it('components/gh-token-input.js', function () {// test passed\n    });\n    it('components/gh-token-input/select-multiple.js', function () {// test passed\n    });\n    it('components/gh-token-input/select.js', function () {// test passed\n    });\n    it('components/gh-token-input/suggested-option.js', function () {// test passed\n    });\n    it('components/gh-token-input/tag-token.js', function () {// test passed\n    });\n    it('components/gh-token-input/trigger.js', function () {// test passed\n    });\n    it('components/gh-tour-item.js', function () {// test passed\n    });\n    it('components/gh-trim-focus-input.js', function () {// test passed\n    });\n    it('components/gh-unsplash-photo.js', function () {// test passed\n    });\n    it('components/gh-unsplash.js', function () {// test passed\n    });\n    it('components/gh-uploader.js', function () {// test passed\n    });\n    it('components/gh-url-preview.js', function () {// test passed\n    });\n    it('components/gh-user-active.js', function () {// test passed\n    });\n    it('components/gh-user-invited.js', function () {// test passed\n    });\n    it('components/gh-user-list-item.js', function () {// test passed\n    });\n    it('components/gh-validation-status-container.js', function () {// test passed\n    });\n    it('components/gh-view-title.js', function () {// test passed\n    });\n    it('components/infinity-loader.js', function () {// test passed\n    });\n    it('components/modal-base.js', function () {// test passed\n    });\n    it('components/modal-delete-all.js', function () {// test passed\n    });\n    it('components/modal-delete-integration.js', function () {// test passed\n    });\n    it('components/modal-delete-member.js', function () {// test passed\n    });\n    it('components/modal-delete-post.js', function () {// test passed\n    });\n    it('components/modal-delete-subscriber.js', function () {// test passed\n    });\n    it('components/modal-delete-tag.js', function () {// test passed\n    });\n    it('components/modal-delete-theme.js', function () {// test passed\n    });\n    it('components/modal-delete-user.js', function () {// test passed\n    });\n    it('components/modal-delete-webhook.js', function () {// test passed\n    });\n    it('components/modal-import-subscribers.js', function () {// test passed\n    });\n    it('components/modal-invite-new-user.js', function () {// test passed\n    });\n    it('components/modal-leave-editor.js', function () {// test passed\n    });\n    it('components/modal-leave-settings.js', function () {// test passed\n    });\n    it('components/modal-markdown-help.js', function () {// test passed\n    });\n    it('components/modal-new-integration.js', function () {// test passed\n    });\n    it('components/modal-new-subscriber.js', function () {// test passed\n    });\n    it('components/modal-re-authenticate.js', function () {// test passed\n    });\n    it('components/modal-suspend-user.js', function () {// test passed\n    });\n    it('components/modal-theme-warnings.js', function () {// test passed\n    });\n    it('components/modal-transfer-owner.js', function () {// test passed\n    });\n    it('components/modal-unsuspend-user.js', function () {// test passed\n    });\n    it('components/modal-upload-image.js', function () {// test passed\n    });\n    it('components/modal-upload-theme.js', function () {// test passed\n    });\n    it('components/modal-webhook-form.js', function () {// test passed\n    });\n    it('components/power-select-vertical-collection-options.js', function () {// test passed\n    });\n    it('components/power-select/trigger.js', function () {// test passed\n    });\n    it('controllers/about.js', function () {// test passed\n    });\n    it('controllers/application.js', function () {// test passed\n    });\n    it('controllers/editor.js', function () {// test passed\n    });\n    it('controllers/error.js', function () {// test passed\n    });\n    it('controllers/member.js', function () {// test passed\n    });\n    it('controllers/members.js', function () {// test passed\n    });\n    it('controllers/pages-loading.js', function () {// test passed\n    });\n    it('controllers/pages.js', function () {// test passed\n    });\n    it('controllers/posts-loading.js', function () {// test passed\n    });\n    it('controllers/posts.js', function () {// test passed\n    });\n    it('controllers/reset.js', function () {// test passed\n    });\n    it('controllers/settings/code-injection.js', function () {// test passed\n    });\n    it('controllers/settings/design.js', function () {// test passed\n    });\n    it('controllers/settings/general.js', function () {// test passed\n    });\n    it('controllers/settings/integration.js', function () {// test passed\n    });\n    it('controllers/settings/integration/webhooks/edit.js', function () {// test passed\n    });\n    it('controllers/settings/integration/webhooks/new.js', function () {// test passed\n    });\n    it('controllers/settings/integrations.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/amp.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/new.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/slack.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/unsplash.js', function () {// test passed\n    });\n    it('controllers/settings/integrations/zapier.js', function () {// test passed\n    });\n    it('controllers/settings/labs.js', function () {// test passed\n    });\n    it('controllers/settings/tags.js', function () {// test passed\n    });\n    it('controllers/settings/tags/tag.js', function () {// test passed\n    });\n    it('controllers/setup.js', function () {// test passed\n    });\n    it('controllers/setup/three.js', function () {// test passed\n    });\n    it('controllers/setup/two.js', function () {// test passed\n    });\n    it('controllers/signin.js', function () {// test passed\n    });\n    it('controllers/signup.js', function () {// test passed\n    });\n    it('controllers/site.js', function () {// test passed\n    });\n    it('controllers/staff/index.js', function () {// test passed\n    });\n    it('controllers/staff/user.js', function () {// test passed\n    });\n    it('controllers/subscribers.js', function () {// test passed\n    });\n    it('helpers/author-names.js', function () {// test passed\n    });\n    it('helpers/background-image-style.js', function () {// test passed\n    });\n    it('helpers/event-name.js', function () {// test passed\n    });\n    it('helpers/gh-count-characters.js', function () {// test passed\n    });\n    it('helpers/gh-count-down-characters.js', function () {// test passed\n    });\n    it('helpers/gh-format-html.js', function () {// test passed\n    });\n    it('helpers/gh-format-post-time.js', function () {// test passed\n    });\n    it('helpers/gh-path.js', function () {// test passed\n    });\n    it('helpers/gh-user-can-admin.js', function () {// test passed\n    });\n    it('helpers/highlighted-text.js', function () {// test passed\n    });\n    it('helpers/integration-icon-style.js', function () {// test passed\n    });\n    it('helpers/is-equal.js', function () {// test passed\n    });\n    it('helpers/is-not.js', function () {// test passed\n    });\n    it('helpers/ui-btn-span.js', function () {// test passed\n    });\n    it('helpers/ui-btn.js', function () {// test passed\n    });\n    it('helpers/ui-text.js', function () {// test passed\n    });\n    it('initializers/ember-simple-auth.js', function () {// test passed\n    });\n    it('initializers/trailing-hash.js', function () {// test passed\n    });\n    it('initializers/upgrade-status.js', function () {// test passed\n    });\n    it('mixins/body-event-listener.js', function () {// test passed\n    });\n    it('mixins/current-user-settings.js', function () {// test passed\n    });\n    it('mixins/dropdown-mixin.js', function () {// test passed\n    });\n    it('mixins/pagination.js', function () {// test passed\n    });\n    it('mixins/settings-menu-component.js', function () {// test passed\n    });\n    it('mixins/shortcuts-route.js', function () {// test passed\n    });\n    it('mixins/shortcuts.js', function () {// test passed\n    });\n    it('mixins/slug-url.js', function () {// test passed\n    });\n    it('mixins/style-body.js', function () {// test passed\n    });\n    it('mixins/text-input.js', function () {// test passed\n    });\n    it('mixins/unauthenticated-route-mixin.js', function () {// test passed\n    });\n    it('mixins/validation-engine.js', function () {// test passed\n    });\n    it('mixins/validation-state.js', function () {// test passed\n    });\n    it('models/api-key.js', function () {// test passed\n    });\n    it('models/integration.js', function () {// test passed\n    });\n    it('models/invite.js', function () {// test passed\n    });\n    it('models/member-subscription.js', function () {// test passed\n    });\n    it('models/member.js', function () {// test passed\n    });\n    it('models/navigation-item.js', function () {// test passed\n    });\n    it('models/notification.js', function () {// test passed\n    });\n    it('models/page.js', function () {// test passed\n    });\n    it('models/post.js', function () {// test passed\n    });\n    it('models/role.js', function () {// test passed\n    });\n    it('models/setting.js', function () {// test passed\n    });\n    it('models/slack-integration.js', function () {// test passed\n    });\n    it('models/subscriber.js', function () {// test passed\n    });\n    it('models/tag.js', function () {// test passed\n    });\n    it('models/theme.js', function () {// test passed\n    });\n    it('models/unsplash-integration.js', function () {// test passed\n    });\n    it('models/user.js', function () {// test passed\n    });\n    it('models/webhook.js', function () {// test passed\n    });\n    it('resolver.js', function () {// test passed\n    });\n    it('router.js', function () {// test passed\n    });\n    it('routes/about.js', function () {// test passed\n    });\n    it('routes/application.js', function () {// test passed\n    });\n    it('routes/authenticated.js', function () {// test passed\n    });\n    it('routes/editor.js', function () {// test passed\n    });\n    it('routes/editor/edit.js', function () {// test passed\n    });\n    it('routes/editor/index.js', function () {// test passed\n    });\n    it('routes/editor/new.js', function () {// test passed\n    });\n    it('routes/error404.js', function () {// test passed\n    });\n    it('routes/home.js', function () {// test passed\n    });\n    it('routes/member.js', function () {// test passed\n    });\n    it('routes/members.js', function () {// test passed\n    });\n    it('routes/pages.js', function () {// test passed\n    });\n    it('routes/posts.js', function () {// test passed\n    });\n    it('routes/reset.js', function () {// test passed\n    });\n    it('routes/settings/code-injection.js', function () {// test passed\n    });\n    it('routes/settings/design.js', function () {// test passed\n    });\n    it('routes/settings/design/uploadtheme.js', function () {// test passed\n    });\n    it('routes/settings/general.js', function () {// test passed\n    });\n    it('routes/settings/integration.js', function () {// test passed\n    });\n    it('routes/settings/integration/webhooks/edit.js', function () {// test passed\n    });\n    it('routes/settings/integration/webhooks/new.js', function () {// test passed\n    });\n    it('routes/settings/integrations.js', function () {// test passed\n    });\n    it('routes/settings/integrations/amp.js', function () {// test passed\n    });\n    it('routes/settings/integrations/new.js', function () {// test passed\n    });\n    it('routes/settings/integrations/slack.js', function () {// test passed\n    });\n    it('routes/settings/integrations/unsplash.js', function () {// test passed\n    });\n    it('routes/settings/integrations/zapier.js', function () {// test passed\n    });\n    it('routes/settings/labs.js', function () {// test passed\n    });\n    it('routes/settings/tags.js', function () {// test passed\n    });\n    it('routes/settings/tags/index.js', function () {// test passed\n    });\n    it('routes/settings/tags/new.js', function () {// test passed\n    });\n    it('routes/settings/tags/tag.js', function () {// test passed\n    });\n    it('routes/setup.js', function () {// test passed\n    });\n    it('routes/setup/index.js', function () {// test passed\n    });\n    it('routes/setup/three.js', function () {// test passed\n    });\n    it('routes/signin.js', function () {// test passed\n    });\n    it('routes/signout.js', function () {// test passed\n    });\n    it('routes/signup.js', function () {// test passed\n    });\n    it('routes/site.js', function () {// test passed\n    });\n    it('routes/staff/index.js', function () {// test passed\n    });\n    it('routes/staff/user.js', function () {// test passed\n    });\n    it('routes/subscribers.js', function () {// test passed\n    });\n    it('routes/subscribers/import.js', function () {// test passed\n    });\n    it('routes/subscribers/new.js', function () {// test passed\n    });\n    it('serializers/api-key.js', function () {// test passed\n    });\n    it('serializers/application.js', function () {// test passed\n    });\n    it('serializers/integration.js', function () {// test passed\n    });\n    it('serializers/invite.js', function () {// test passed\n    });\n    it('serializers/notification.js', function () {// test passed\n    });\n    it('serializers/page.js', function () {// test passed\n    });\n    it('serializers/post.js', function () {// test passed\n    });\n    it('serializers/role.js', function () {// test passed\n    });\n    it('serializers/setting.js', function () {// test passed\n    });\n    it('serializers/subscriber.js', function () {// test passed\n    });\n    it('serializers/tag.js', function () {// test passed\n    });\n    it('serializers/theme.js', function () {// test passed\n    });\n    it('serializers/user.js', function () {// test passed\n    });\n    it('serializers/webhook.js', function () {// test passed\n    });\n    it('services/ajax.js', function () {// test passed\n    });\n    it('services/clock.js', function () {// test passed\n    });\n    it('services/config.js', function () {// test passed\n    });\n    it('services/dropdown.js', function () {// test passed\n    });\n    it('services/event-bus.js', function () {// test passed\n    });\n    it('services/feature.js', function () {// test passed\n    });\n    it('services/ghost-paths.js', function () {// test passed\n    });\n    it('services/lazy-loader.js', function () {// test passed\n    });\n    it('services/media-queries.js', function () {// test passed\n    });\n    it('services/media.js', function () {// test passed\n    });\n    it('services/notifications.js', function () {// test passed\n    });\n    it('services/resize-detector.js', function () {// test passed\n    });\n    it('services/session.js', function () {// test passed\n    });\n    it('services/settings.js', function () {// test passed\n    });\n    it('services/slug-generator.js', function () {// test passed\n    });\n    it('services/tour.js', function () {// test passed\n    });\n    it('services/ui.js', function () {// test passed\n    });\n    it('services/unsplash.js', function () {// test passed\n    });\n    it('services/upgrade-status.js', function () {// test passed\n    });\n    it('session-stores/application.js', function () {// test passed\n    });\n    it('transforms/facebook-url-user.js', function () {// test passed\n    });\n    it('transforms/json-string.js', function () {// test passed\n    });\n    it('transforms/member-subscription.js', function () {// test passed\n    });\n    it('transforms/moment-date.js', function () {// test passed\n    });\n    it('transforms/moment-utc.js', function () {// test passed\n    });\n    it('transforms/navigation-settings.js', function () {// test passed\n    });\n    it('transforms/raw.js', function () {// test passed\n    });\n    it('transforms/slack-settings.js', function () {// test passed\n    });\n    it('transforms/twitter-url-user.js', function () {// test passed\n    });\n    it('transforms/unsplash-settings.js', function () {// test passed\n    });\n    it('transitions.js', function () {// test passed\n    });\n    it('transitions/wormhole.js', function () {// test passed\n    });\n    it('utils/bound-one-way.js', function () {// test passed\n    });\n    it('utils/caja-sanitizers.js', function () {// test passed\n    });\n    it('utils/copy-text-to-clipboard.js', function () {// test passed\n    });\n    it('utils/ctrl-or-cmd.js', function () {// test passed\n    });\n    it('utils/document-title.js', function () {// test passed\n    });\n    it('utils/format-markdown.js', function () {// test passed\n    });\n    it('utils/ghost-paths.js', function () {// test passed\n    });\n    it('utils/isFinite.js', function () {// test passed\n    });\n    it('utils/isNumber.js', function () {// test passed\n    });\n    it('utils/link-component.js', function () {// test passed\n    });\n    it('utils/random-password.js', function () {// test passed\n    });\n    it('utils/route.js', function () {// test passed\n    });\n    it('utils/titleize.js', function () {// test passed\n    });\n    it('utils/window-proxy.js', function () {// test passed\n    });\n    it('validators/base.js', function () {// test passed\n    });\n    it('validators/integration.js', function () {// test passed\n    });\n    it('validators/invite-user.js', function () {// test passed\n    });\n    it('validators/mixins/password.js', function () {// test passed\n    });\n    it('validators/nav-item.js', function () {// test passed\n    });\n    it('validators/new-user.js', function () {// test passed\n    });\n    it('validators/post.js', function () {// test passed\n    });\n    it('validators/reset.js', function () {// test passed\n    });\n    it('validators/setting.js', function () {// test passed\n    });\n    it('validators/setup.js', function () {// test passed\n    });\n    it('validators/signin.js', function () {// test passed\n    });\n    it('validators/signup.js', function () {// test passed\n    });\n    it('validators/slack-integration.js', function () {// test passed\n    });\n    it('validators/subscriber.js', function () {// test passed\n    });\n    it('validators/tag-settings.js', function () {// test passed\n    });\n    it('validators/user.js', function () {// test passed\n    });\n    it('validators/webhook.js', function () {// test passed\n    });\n  });\n});","define(\"ghost-admin/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  describe('ESLint | tests', function () {\n    it('acceptance/authentication-test.js', function () {// test passed\n    });\n    it('acceptance/content-test.js', function () {// test passed\n    });\n    it('acceptance/custom-post-templates-test.js', function () {// test passed\n    });\n    it('acceptance/editor-test.js', function () {// test passed\n    });\n    it('acceptance/error-handling-test.js', function () {// test passed\n    });\n    it('acceptance/members-test.js', function () {// test passed\n    });\n    it('acceptance/password-reset-test.js', function () {// test passed\n    });\n    it('acceptance/settings/amp-test.js', function () {// test passed\n    });\n    it('acceptance/settings/code-injection-test.js', function () {// test passed\n    });\n    it('acceptance/settings/design-test.js', function () {// test passed\n    });\n    it('acceptance/settings/general-test.js', function () {// test passed\n    });\n    it('acceptance/settings/integrations-test.js', function () {// test passed\n    });\n    it('acceptance/settings/labs-test.js', function () {// test passed\n    });\n    it('acceptance/settings/slack-test.js', function () {// test passed\n    });\n    it('acceptance/settings/tags-test.js', function () {// test passed\n    });\n    it('acceptance/settings/unsplash-test.js', function () {// test passed\n    });\n    it('acceptance/settings/zapier-test.js', function () {// test passed\n    });\n    it('acceptance/setup-test.js', function () {// test passed\n    });\n    it('acceptance/signin-test.js', function () {// test passed\n    });\n    it('acceptance/signup-test.js', function () {// test passed\n    });\n    it('acceptance/staff-test.js', function () {// test passed\n    });\n    it('acceptance/subscribers-test.js', function () {// test passed\n    });\n    it('helpers/adapter-error.js', function () {// test passed\n    });\n    it('helpers/file-upload.js', function () {// test passed\n    });\n    it('helpers/find.js', function () {// test passed\n    });\n    it('helpers/resolver.js', function () {// test passed\n    });\n    it('helpers/visit.js', function () {// test passed\n    });\n    it('integration/adapters/tag-test.js', function () {// test passed\n    });\n    it('integration/adapters/user-test.js', function () {// test passed\n    });\n    it('integration/components/gh-alert-test.js', function () {// test passed\n    });\n    it('integration/components/gh-alerts-test.js', function () {// test passed\n    });\n    it('integration/components/gh-basic-dropdown-test.js', function () {// test passed\n    });\n    it('integration/components/gh-cm-editor-test.js', function () {// test passed\n    });\n    it('integration/components/gh-download-count-test.js', function () {// test passed\n    });\n    it('integration/components/gh-feature-flag-test.js', function () {// test passed\n    });\n    it('integration/components/gh-file-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-image-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-image-uploader-with-preview-test.js', function () {// test passed\n    });\n    it('integration/components/gh-member-avatar-test.js', function () {// test passed\n    });\n    it('integration/components/gh-navitem-test.js', function () {// test passed\n    });\n    it('integration/components/gh-navitem-url-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-notification-test.js', function () {// test passed\n    });\n    it('integration/components/gh-notifications-test.js', function () {// test passed\n    });\n    it('integration/components/gh-profile-image-test.js', function () {// test passed\n    });\n    it('integration/components/gh-psm-tags-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-psm-template-select-test.js', function () {// test passed\n    });\n    it('integration/components/gh-search-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-tag-settings-form-test.js', function () {// test passed\n    });\n    it('integration/components/gh-task-button-test.js', function () {// test passed\n    });\n    it('integration/components/gh-theme-table-test.js', function () {// test passed\n    });\n    it('integration/components/gh-timezone-select-test.js', function () {// test passed\n    });\n    it('integration/components/gh-trim-focus-input-test.js', function () {// test passed\n    });\n    it('integration/components/gh-unsplash-photo-test.js', function () {// test passed\n    });\n    it('integration/components/gh-unsplash-test.js', function () {// test passed\n    });\n    it('integration/components/gh-uploader-test.js', function () {// test passed\n    });\n    it('integration/components/gh-validation-status-container-test.js', function () {// test passed\n    });\n    it('integration/components/modal-transfer-owner-test.js', function () {// test passed\n    });\n    it('integration/helpers/background-image-style-test.js', function () {// test passed\n    });\n    it('integration/helpers/clean-basic-html-test.js', function () {// test passed\n    });\n    it('integration/helpers/sanitize-html-test.js', function () {// test passed\n    });\n    it('integration/services/ajax-test.js', function () {// test passed\n    });\n    it('integration/services/config-test.js', function () {// test passed\n    });\n    it('integration/services/feature-test.js', function () {// test passed\n    });\n    it('integration/services/lazy-loader-test.js', function () {// test passed\n    });\n    it('integration/services/slug-generator-test.js', function () {// test passed\n    });\n    it('integration/services/store-test.js', function () {// test passed\n    });\n    it('test-helper.js', function () {// test passed\n    });\n    it('unit/authenticators/cookie-test.js', function () {// test passed\n    });\n    it('unit/components/gh-alert-test.js', function () {// test passed\n    });\n    it('unit/components/gh-app-test.js', function () {// test passed\n    });\n    it('unit/components/gh-navitem-url-input-test.js', function () {// test passed\n    });\n    it('unit/components/gh-notification-test.js', function () {// test passed\n    });\n    it('unit/components/gh-post-settings-menu-test.js', function () {// test passed\n    });\n    it('unit/components/gh-url-preview-test.js', function () {// test passed\n    });\n    it('unit/components/gh-user-active-test.js', function () {// test passed\n    });\n    it('unit/components/gh-user-invited-test.js', function () {// test passed\n    });\n    it('unit/controllers/editor-test.js', function () {// test passed\n    });\n    it('unit/controllers/settings/design-test.js', function () {// test passed\n    });\n    it('unit/controllers/subscribers-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-count-characters-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-count-down-characters-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-format-post-time-test.js', function () {// test passed\n    });\n    it('unit/helpers/gh-user-can-admin-test.js', function () {// test passed\n    });\n    it('unit/helpers/highlighted-text-test.js', function () {// test passed\n    });\n    it('unit/helpers/is-equal-test.js', function () {// test passed\n    });\n    it('unit/helpers/is-not-test.js', function () {// test passed\n    });\n    it('unit/mixins/validation-engine-test.js', function () {// test passed\n    });\n    it('unit/models/api-key-test.js', function () {// test passed\n    });\n    it('unit/models/integration-test.js', function () {// test passed\n    });\n    it('unit/models/invite-test.js', function () {// test passed\n    });\n    it('unit/models/member-test.js', function () {// test passed\n    });\n    it('unit/models/navigation-item-test.js', function () {// test passed\n    });\n    it('unit/models/post-test.js', function () {// test passed\n    });\n    it('unit/models/role-test.js', function () {// test passed\n    });\n    it('unit/models/setting-test.js', function () {// test passed\n    });\n    it('unit/models/subscriber-test.js', function () {// test passed\n    });\n    it('unit/models/tag-test.js', function () {// test passed\n    });\n    it('unit/models/user-test.js', function () {// test passed\n    });\n    it('unit/models/webhook-test.js', function () {// test passed\n    });\n    it('unit/serializers/api-key-test.js', function () {// test passed\n    });\n    it('unit/serializers/integration-test.js', function () {// test passed\n    });\n    it('unit/serializers/notification-test.js', function () {// test passed\n    });\n    it('unit/serializers/post-test.js', function () {// test passed\n    });\n    it('unit/serializers/role-test.js', function () {// test passed\n    });\n    it('unit/serializers/setting-test.js', function () {// test passed\n    });\n    it('unit/serializers/subscriber-test.js', function () {// test passed\n    });\n    it('unit/serializers/tag-test.js', function () {// test passed\n    });\n    it('unit/serializers/user-test.js', function () {// test passed\n    });\n    it('unit/serializers/webhook-test.js', function () {// test passed\n    });\n    it('unit/services/event-bus-test.js', function () {// test passed\n    });\n    it('unit/services/notifications-test.js', function () {// test passed\n    });\n    it('unit/services/resize-detector-test.js', function () {// test passed\n    });\n    it('unit/services/ui-test.js', function () {// test passed\n    });\n    it('unit/services/unsplash-test.js', function () {// test passed\n    });\n    it('unit/services/upgrade-status-test.js', function () {// test passed\n    });\n    it('unit/transforms/facebook-url-user-test.js', function () {// test passed\n    });\n    it('unit/transforms/json-string-test.js', function () {// test passed\n    });\n    it('unit/transforms/navigation-settings-test.js', function () {// test passed\n    });\n    it('unit/transforms/slack-settings-test.js', function () {// test passed\n    });\n    it('unit/transforms/twitter-url-user-test.js', function () {// test passed\n    });\n    it('unit/transforms/unsplash-settings-test.js', function () {// test passed\n    });\n    it('unit/utils/ghost-paths-test.js', function () {// test passed\n    });\n    it('unit/validators/nav-item-test.js', function () {// test passed\n    });\n    it('unit/validators/post-test.js', function () {// test passed\n    });\n    it('unit/validators/slack-integration-test.js', function () {// test passed\n    });\n    it('unit/validators/subscriber-test.js', function () {// test passed\n    });\n    it('unit/validators/tag-settings-test.js', function () {// test passed\n    });\n  });\n});","define(\"ghost-admin/tests/test-helper\", [\"ghost-admin/app\", \"ghost-admin/config/environment\", \"ember-exam/test-support/load\", \"ember-raf-scheduler/test-support/register-waiter\", \"@ember/test-helpers\"], function (_app, _environment, _load, _registerWaiter, _testHelpers) {\n  \"use strict\";\n\n  (0, _load.default)();\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _registerWaiter.default)();\n  mocha.setup({\n    timeout: 15000,\n    slow: 500\n  });\n});","define(\"ghost-admin/tests/unit/authenticators/cookie-test\", [\"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  const mockAjax = Ember.Service.extend({\n    skipSessionDeletion: false,\n\n    init() {\n      this._super(...arguments);\n\n      this.post = _sinon.default.stub().resolves();\n      this.del = _sinon.default.stub().resolves();\n    }\n\n  });\n  const mockGhostPaths = Ember.Service.extend({\n    apiRoot: '/ghost/api/v2/admin'\n  });\n  (0, _mocha.describe)('Unit: Authenticator: cookie', () => {\n    (0, _emberMocha.setupTest)('authenticator:cookie', {});\n    (0, _mocha.beforeEach)(function () {\n      this.register('service:ajax', mockAjax);\n      this.inject.service('ajax', {\n        as: 'ajax'\n      });\n      this.register('service:ghost-paths', mockGhostPaths);\n      this.inject.service('ghost-paths', {\n        as: 'ghostPaths'\n      });\n    });\n    (0, _mocha.describe)('#restore', function () {\n      (0, _mocha.it)('returns a resolving promise', function () {\n        return this.subject().restore();\n      });\n    });\n    (0, _mocha.describe)('#authenticate', function () {\n      (0, _mocha.it)('posts the username and password to the sessionEndpoint and returns the promise', function () {\n        let authenticator = this.subject();\n        let post = authenticator.ajax.post;\n        return authenticator.authenticate('AzureDiamond', 'hunter2').then(() => {\n          (0, _chai.expect)(post.args[0][0]).to.equal('/ghost/api/v2/admin/session');\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            data: {\n              username: 'AzureDiamond',\n              password: 'hunter2'\n            }\n          });\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            dataType: 'text'\n          });\n          (0, _chai.expect)(post.args[0][1]).to.deep.include({\n            contentType: 'application/json;charset=utf-8'\n          });\n        });\n      });\n    });\n    (0, _mocha.describe)('#invalidate', function () {\n      (0, _mocha.it)('makes a delete request to the sessionEndpoint', function () {\n        let authenticator = this.subject();\n        let del = authenticator.ajax.del;\n        return authenticator.invalidate().then(() => {\n          (0, _chai.expect)(del.args[0][0]).to.equal('/ghost/api/v2/admin/session');\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-alert-test\", [\"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-alert', function () {\n    (0, _emberMocha.setupComponentTest)('gh-alert', {\n      unit: true,\n      // specify the other units that are required for this test\n      needs: ['service:notifications', 'helper:svg-jar']\n    });\n    (0, _mocha.it)('closes notification through notifications service', function () {\n      let component = this.subject();\n      let notifications = {};\n      let notification = {\n        message: 'Test close',\n        type: 'success'\n      };\n      notifications.closeNotification = _sinon.default.spy();\n      component.set('notifications', notifications);\n      component.set('message', notification);\n      this.$().find('button').click();\n      (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-app-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-app', function () {\n    (0, _emberMocha.setupComponentTest)('gh-app', {\n      unit: true // specify the other units that are required for this test\n      // needs: ['component:foo', 'helper:bar']\n\n    });\n    (0, _mocha.it)('renders', function () {\n      // creates the component instance\n      let component = this.subject();\n      (0, _chai.expect)(component._state).to.equal('preRender'); // renders the component on the page\n\n      this.render();\n      (0, _chai.expect)(component._state).to.equal('inDOM');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-navitem-url-input-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-navitem-url-input', function () {\n    (0, _emberMocha.setupComponentTest)('gh-navitem-url-input', {\n      unit: true\n    });\n    (0, _mocha.it)('identifies a URL as the base URL', function () {\n      let component = this.subject({\n        url: '',\n        baseUrl: 'http://example.com/'\n      });\n      this.render();\n      Ember.run(function () {\n        component.set('value', 'http://example.com/');\n      });\n      (0, _chai.expect)(component.get('isBaseUrl')).to.be.ok;\n      Ember.run(function () {\n        component.set('value', 'http://example.com/go/');\n      });\n      (0, _chai.expect)(component.get('isBaseUrl')).to.not.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-notification-test\", [\"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-notification', function () {\n    (0, _emberMocha.setupComponentTest)('gh-notification', {\n      unit: true,\n      // specify the other units that are required for this test\n      needs: ['service:notifications', 'helper:svg-jar']\n    });\n    (0, _mocha.it)('closes notification through notifications service', function () {\n      let component = this.subject();\n      let notifications = {};\n      let notification = {\n        message: 'Test close',\n        type: 'success'\n      };\n      notifications.closeNotification = _sinon.default.spy();\n      component.set('notifications', notifications);\n      component.set('message', notification);\n      this.$().find('button').click();\n      (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be.true;\n    }); // skipped due to random failures on Travis - https://github.com/TryGhost/Ghost/issues/10308\n\n    _mocha.it.skip('closes notification when animationend event is triggered', function (done) {\n      let component = this.subject();\n      let notifications = {};\n      let notification = {\n        message: 'Test close',\n        type: 'success'\n      };\n      notifications.closeNotification = _sinon.default.spy();\n      component.set('notifications', notifications);\n      component.set('message', notification); // shorten the animation delay to speed up test\n\n      this.$().css('animation-delay', '0.1s');\n      setTimeout(function () {\n        (0, _chai.expect)(notifications.closeNotification.calledWith(notification)).to.be.true;\n        done();\n      }, 150);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-post-settings-menu-test\", [\"ghost-admin/utils/bound-one-way\", \"mocha\", \"chai\", \"ember-mocha\"], function (_boundOneWay, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function K() {\n    return this;\n  } // TODO: convert to integration tests\n\n\n  _mocha.describe.skip('Unit: Component: post-settings-menu', function () {\n    (0, _emberMocha.setupComponentTest)('gh-post-settings-menu', {\n      needs: ['service:notifications', 'service:slug-generator', 'service:settings']\n    });\n    (0, _mocha.it)('slugValue is one-way bound to post.slug', function () {\n      let component = this.subject({\n        post: Ember.Object.create({\n          slug: 'a-slug'\n        })\n      });\n      (0, _chai.expect)(component.get('post.slug')).to.equal('a-slug');\n      (0, _chai.expect)(component.get('slugValue')).to.equal('a-slug');\n      Ember.run(function () {\n        component.set('post.slug', 'changed-slug');\n        (0, _chai.expect)(component.get('slugValue')).to.equal('changed-slug');\n      });\n      Ember.run(function () {\n        component.set('slugValue', 'changed-directly');\n        (0, _chai.expect)(component.get('post.slug')).to.equal('changed-slug');\n        (0, _chai.expect)(component.get('slugValue')).to.equal('changed-directly');\n      });\n      Ember.run(function () {\n        // test that the one-way binding is still in place\n        component.set('post.slug', 'should-update');\n        (0, _chai.expect)(component.get('slugValue')).to.equal('should-update');\n      });\n    });\n    (0, _mocha.it)('metaTitleScratch is one-way bound to post.metaTitle', function () {\n      let component = this.subject({\n        post: Ember.Object.extend({\n          metaTitle: 'a title',\n          metaTitleScratch: (0, _boundOneWay.default)('metaTitle')\n        }).create()\n      });\n      (0, _chai.expect)(component.get('post.metaTitle')).to.equal('a title');\n      (0, _chai.expect)(component.get('metaTitleScratch')).to.equal('a title');\n      Ember.run(function () {\n        component.set('post.metaTitle', 'a different title');\n        (0, _chai.expect)(component.get('metaTitleScratch')).to.equal('a different title');\n      });\n      Ember.run(function () {\n        component.set('metaTitleScratch', 'changed directly');\n        (0, _chai.expect)(component.get('post.metaTitle')).to.equal('a different title');\n        (0, _chai.expect)(component.get('post.metaTitleScratch')).to.equal('changed directly');\n      });\n      Ember.run(function () {\n        // test that the one-way binding is still in place\n        component.set('post.metaTitle', 'should update');\n        (0, _chai.expect)(component.get('metaTitleScratch')).to.equal('should update');\n      });\n    });\n    (0, _mocha.it)('metaDescriptionScratch is one-way bound to post.metaDescription', function () {\n      let component = this.subject({\n        post: Ember.Object.extend({\n          metaDescription: 'a description',\n          metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription')\n        }).create()\n      });\n      (0, _chai.expect)(component.get('post.metaDescription')).to.equal('a description');\n      (0, _chai.expect)(component.get('metaDescriptionScratch')).to.equal('a description');\n      Ember.run(function () {\n        component.set('post.metaDescription', 'a different description');\n        (0, _chai.expect)(component.get('metaDescriptionScratch')).to.equal('a different description');\n      });\n      Ember.run(function () {\n        component.set('metaDescriptionScratch', 'changed directly');\n        (0, _chai.expect)(component.get('post.metaDescription')).to.equal('a different description');\n        (0, _chai.expect)(component.get('metaDescriptionScratch')).to.equal('changed directly');\n      });\n      Ember.run(function () {\n        // test that the one-way binding is still in place\n        component.set('post.metaDescription', 'should update');\n        (0, _chai.expect)(component.get('metaDescriptionScratch')).to.equal('should update');\n      });\n    });\n    (0, _mocha.describe)('seoTitle', function () {\n      (0, _mocha.it)('should be the metaTitle if one exists', function () {\n        let component = this.subject({\n          post: Ember.Object.extend({\n            titleScratch: 'should not be used',\n            metaTitle: 'a meta-title',\n            metaTitleScratch: (0, _boundOneWay.default)('metaTitle')\n          }).create()\n        });\n        (0, _chai.expect)(component.get('seoTitle')).to.equal('a meta-title');\n      });\n      (0, _mocha.it)('should default to the title if an explicit meta-title does not exist', function () {\n        let component = this.subject({\n          post: Ember.Object.create({\n            titleScratch: 'should be the meta-title'\n          })\n        });\n        (0, _chai.expect)(component.get('seoTitle')).to.equal('should be the meta-title');\n      });\n      (0, _mocha.it)('should be the metaTitle if both title and metaTitle exist', function () {\n        let component = this.subject({\n          post: Ember.Object.extend({\n            titleScratch: 'a title',\n            metaTitle: 'a meta-title',\n            metaTitleScratch: (0, _boundOneWay.default)('metaTitle')\n          }).create()\n        });\n        (0, _chai.expect)(component.get('seoTitle')).to.equal('a meta-title');\n      });\n      (0, _mocha.it)('should revert to the title if explicit metaTitle is removed', function () {\n        let component = this.subject({\n          post: Ember.Object.extend({\n            titleScratch: 'a title',\n            metaTitle: 'a meta-title',\n            metaTitleScratch: (0, _boundOneWay.default)('metaTitle')\n          }).create()\n        });\n        (0, _chai.expect)(component.get('seoTitle')).to.equal('a meta-title');\n        Ember.run(function () {\n          component.set('post.metaTitle', '');\n          (0, _chai.expect)(component.get('seoTitle')).to.equal('a title');\n        });\n      });\n      (0, _mocha.it)('should truncate to 70 characters with an appended ellipsis', function () {\n        let longTitle = new Array(100).join('a');\n        let component = this.subject({\n          post: Ember.Object.create()\n        });\n        (0, _chai.expect)(longTitle.length).to.equal(99);\n        Ember.run(function () {\n          let expected = \"\".concat(longTitle.substr(0, 70), \"&hellip;\");\n          component.set('metaTitleScratch', longTitle);\n          (0, _chai.expect)(component.get('seoTitle').toString().length).to.equal(78);\n          (0, _chai.expect)(component.get('seoTitle').toString()).to.equal(expected);\n        });\n      });\n    });\n    (0, _mocha.describe)('seoDescription', function () {\n      (0, _mocha.it)('should be the metaDescription if one exists', function () {\n        let component = this.subject({\n          post: Ember.Object.extend({\n            metaDescription: 'a description',\n            metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription')\n          }).create()\n        });\n        (0, _chai.expect)(component.get('seoDescription')).to.equal('a description');\n      });\n      (0, _mocha.it)('should be generated from the rendered mobiledoc if not explicitly set', function () {\n        let component = this.subject({\n          post: Ember.Object.extend({\n            metaDescription: null,\n            metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription'),\n            author: Ember.RSVP.resolve(),\n\n            init() {\n              this._super(...arguments);\n\n              this.scratch = {\n                cards: [['markdown-card', {\n                  markdown: '# This is a <strong>test</strong> <script>foo</script>'\n                }]]\n              };\n            }\n\n          }).create()\n        });\n        (0, _chai.expect)(component.get('seoDescription')).to.equal('This is a test');\n      });\n      (0, _mocha.it)('should truncate to 156 characters with an appended ellipsis', function () {\n        let longDescription = new Array(200).join('a');\n        let component = this.subject({\n          post: Ember.Object.create()\n        });\n        (0, _chai.expect)(longDescription.length).to.equal(199);\n        Ember.run(function () {\n          let expected = \"\".concat(longDescription.substr(0, 156), \"&hellip;\");\n          component.set('metaDescriptionScratch', longDescription);\n          (0, _chai.expect)(component.get('seoDescription').toString().length).to.equal(164);\n          (0, _chai.expect)(component.get('seoDescription').toString()).to.equal(expected);\n        });\n      });\n    });\n    (0, _mocha.describe)('seoURL', function () {\n      (0, _mocha.it)('should be the URL of the blog if no post slug exists', function () {\n        let component = this.subject({\n          config: Ember.Object.create({\n            blogUrl: 'http://my-ghost-blog.com'\n          }),\n          post: Ember.Object.create()\n        });\n        (0, _chai.expect)(component.get('seoURL')).to.equal('http://my-ghost-blog.com/');\n      });\n      (0, _mocha.it)('should be the URL of the blog plus the post slug', function () {\n        let component = this.subject({\n          config: Ember.Object.create({\n            blogUrl: 'http://my-ghost-blog.com'\n          }),\n          post: Ember.Object.create({\n            slug: 'post-slug'\n          })\n        });\n        (0, _chai.expect)(component.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n      });\n      (0, _mocha.it)('should update when the post slug changes', function () {\n        let component = this.subject({\n          config: Ember.Object.create({\n            blogUrl: 'http://my-ghost-blog.com'\n          }),\n          post: Ember.Object.create({\n            slug: 'post-slug'\n          })\n        });\n        (0, _chai.expect)(component.get('seoURL')).to.equal('http://my-ghost-blog.com/post-slug/');\n        Ember.run(function () {\n          component.set('post.slug', 'changed-slug');\n          (0, _chai.expect)(component.get('seoURL')).to.equal('http://my-ghost-blog.com/changed-slug/');\n        });\n      });\n      (0, _mocha.it)('should truncate a long URL to 70 characters with an appended ellipsis', function () {\n        let blogURL = 'http://my-ghost-blog.com';\n        let longSlug = new Array(75).join('a');\n        let component = this.subject({\n          config: Ember.Object.create({\n            blogUrl: blogURL\n          }),\n          post: Ember.Object.create({\n            slug: longSlug\n          })\n        });\n        let expected;\n        (0, _chai.expect)(longSlug.length).to.equal(74);\n        expected = \"\".concat(blogURL, \"/\").concat(longSlug, \"/\");\n        expected = \"\".concat(expected.substr(0, 70), \"&hellip;\");\n        (0, _chai.expect)(component.get('seoURL').toString().length).to.equal(78);\n        (0, _chai.expect)(component.get('seoURL').toString()).to.equal(expected);\n      });\n    });\n    (0, _mocha.describe)('toggleFeatured', function () {\n      (0, _mocha.it)('should toggle the featured property', function () {\n        let component = this.subject({\n          post: Ember.Object.create({\n            featured: false,\n            isNew: true\n          })\n        });\n        Ember.run(function () {\n          component.send('toggleFeatured');\n          (0, _chai.expect)(component.get('post.featured')).to.be.ok;\n        });\n      });\n      (0, _mocha.it)('should not save the post if it is still new', function () {\n        let component = this.subject({\n          post: Ember.Object.create({\n            featured: false,\n            isNew: true,\n\n            save() {\n              this.incrementProperty('saved');\n              return Ember.RSVP.resolve();\n            }\n\n          })\n        });\n        Ember.run(function () {\n          component.send('toggleFeatured');\n          (0, _chai.expect)(component.get('post.featured')).to.be.ok;\n          (0, _chai.expect)(component.get('post.saved')).to.not.be.ok;\n        });\n      });\n      (0, _mocha.it)('should save the post if it is not new', function () {\n        let component = this.subject({\n          post: Ember.Object.create({\n            featured: false,\n            isNew: false,\n\n            save() {\n              this.incrementProperty('saved');\n              return Ember.RSVP.resolve();\n            }\n\n          })\n        });\n        Ember.run(function () {\n          component.send('toggleFeatured');\n          (0, _chai.expect)(component.get('post.featured')).to.be.ok;\n          (0, _chai.expect)(component.get('post.saved')).to.equal(1);\n        });\n      });\n    });\n    (0, _mocha.describe)('updateSlug', function () {\n      (0, _mocha.it)('should reset slugValue to the previous slug when the new slug is blank or unchanged', function () {\n        let component = this.subject({\n          post: Ember.Object.create({\n            slug: 'slug'\n          })\n        });\n        Ember.run(function () {\n          // unchanged\n          component.set('slugValue', 'slug');\n          component.send('updateSlug', component.get('slugValue'));\n          (0, _chai.expect)(component.get('post.slug')).to.equal('slug');\n          (0, _chai.expect)(component.get('slugValue')).to.equal('slug');\n        });\n        Ember.run(function () {\n          // unchanged after trim\n          component.set('slugValue', 'slug  ');\n          component.send('updateSlug', component.get('slugValue'));\n          (0, _chai.expect)(component.get('post.slug')).to.equal('slug');\n          (0, _chai.expect)(component.get('slugValue')).to.equal('slug');\n        });\n        Ember.run(function () {\n          // blank\n          component.set('slugValue', '');\n          component.send('updateSlug', component.get('slugValue'));\n          (0, _chai.expect)(component.get('post.slug')).to.equal('slug');\n          (0, _chai.expect)(component.get('slugValue')).to.equal('slug');\n        });\n      });\n      (0, _mocha.it)('should not set a new slug if the server-generated slug matches existing slug', function (done) {\n        let component = this.subject({\n          slugGenerator: Ember.Object.create({\n            generateSlug(slugType, str) {\n              let promise = Ember.RSVP.resolve(str.split('#')[0]);\n              this.set('lastPromise', promise);\n              return promise;\n            }\n\n          }),\n          post: Ember.Object.create({\n            slug: 'whatever'\n          })\n        });\n        Ember.run(function () {\n          component.set('slugValue', 'whatever#slug');\n          component.send('updateSlug', component.get('slugValue'));\n          Ember.RSVP.resolve(component.get('lastPromise')).then(function () {\n            (0, _chai.expect)(component.get('post.slug')).to.equal('whatever');\n            done();\n          }).catch(done);\n        });\n      });\n      (0, _mocha.it)('should not set a new slug if the only change is to the appended increment value', function (done) {\n        let component = this.subject({\n          slugGenerator: Ember.Object.create({\n            generateSlug(slugType, str) {\n              let sanitizedStr = str.replace(/[^a-zA-Z]/g, '');\n              let promise = Ember.RSVP.resolve(\"\".concat(sanitizedStr, \"-2\"));\n              this.set('lastPromise', promise);\n              return promise;\n            }\n\n          }),\n          post: Ember.Object.create({\n            slug: 'whatever'\n          })\n        });\n        Ember.run(function () {\n          component.set('slugValue', 'whatever!');\n          component.send('updateSlug', component.get('slugValue'));\n          Ember.RSVP.resolve(component.get('lastPromise')).then(function () {\n            (0, _chai.expect)(component.get('post.slug')).to.equal('whatever');\n            done();\n          }).catch(done);\n        });\n      });\n      (0, _mocha.it)('should set the slug if the new slug is different', function (done) {\n        let component = this.subject({\n          slugGenerator: Ember.Object.create({\n            generateSlug(slugType, str) {\n              let promise = Ember.RSVP.resolve(str);\n              this.set('lastPromise', promise);\n              return promise;\n            }\n\n          }),\n          post: Ember.Object.create({\n            slug: 'whatever',\n            save: K\n          })\n        });\n        Ember.run(function () {\n          component.set('slugValue', 'changed');\n          component.send('updateSlug', component.get('slugValue'));\n          Ember.RSVP.resolve(component.get('lastPromise')).then(function () {\n            (0, _chai.expect)(component.get('post.slug')).to.equal('changed');\n            done();\n          }).catch(done);\n        });\n      });\n      (0, _mocha.it)('should save the post when the slug changes and the post is not new', function (done) {\n        let component = this.subject({\n          slugGenerator: Ember.Object.create({\n            generateSlug(slugType, str) {\n              let promise = Ember.RSVP.resolve(str);\n              this.set('lastPromise', promise);\n              return promise;\n            }\n\n          }),\n          post: Ember.Object.create({\n            slug: 'whatever',\n            saved: 0,\n            isNew: false,\n\n            save() {\n              this.incrementProperty('saved');\n            }\n\n          })\n        });\n        Ember.run(function () {\n          component.set('slugValue', 'changed');\n          component.send('updateSlug', component.get('slugValue'));\n          Ember.RSVP.resolve(component.get('lastPromise')).then(function () {\n            (0, _chai.expect)(component.get('post.slug')).to.equal('changed');\n            (0, _chai.expect)(component.get('post.saved')).to.equal(1);\n            done();\n          }).catch(done);\n        });\n      });\n      (0, _mocha.it)('should not save the post when the slug changes and the post is new', function (done) {\n        let component = this.subject({\n          slugGenerator: Ember.Object.create({\n            generateSlug(slugType, str) {\n              let promise = Ember.RSVP.resolve(str);\n              this.set('lastPromise', promise);\n              return promise;\n            }\n\n          }),\n          post: Ember.Object.create({\n            slug: 'whatever',\n            saved: 0,\n            isNew: true,\n\n            save() {\n              this.incrementProperty('saved');\n            }\n\n          })\n        });\n        Ember.run(function () {\n          component.set('slugValue', 'changed');\n          component.send('updateSlug', component.get('slugValue'));\n          Ember.RSVP.resolve(component.get('lastPromise')).then(function () {\n            (0, _chai.expect)(component.get('post.slug')).to.equal('changed');\n            (0, _chai.expect)(component.get('post.saved')).to.equal(0);\n            done();\n          }).catch(done);\n        });\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-url-preview-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-url-preview', function () {\n    (0, _emberMocha.setupComponentTest)('gh-url-preview', {\n      unit: true,\n      needs: ['service:config']\n    });\n    (0, _mocha.it)('generates the correct preview URL with a prefix', function () {\n      let component = this.subject({\n        prefix: 'tag',\n        slug: 'test-slug',\n        tagName: 'p',\n        classNames: 'test-class',\n        config: {\n          blogUrl: 'http://my-ghost-blog.com'\n        }\n      });\n      this.render();\n      (0, _chai.expect)(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\n    });\n    (0, _mocha.it)('generates the correct preview URL without a prefix', function () {\n      let component = this.subject({\n        slug: 'test-slug',\n        tagName: 'p',\n        classNames: 'test-class',\n        config: {\n          blogUrl: 'http://my-ghost-blog.com'\n        }\n      });\n      this.render();\n      (0, _chai.expect)(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-user-active-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-user-active', function () {\n    (0, _emberMocha.setupComponentTest)('gh-user-active', {\n      unit: true,\n      // specify the other units that are required for this test\n      needs: ['service:ghostPaths']\n    });\n    (0, _mocha.it)('renders', function () {\n      // creates the component instance\n      let component = this.subject();\n      (0, _chai.expect)(component._state).to.equal('preRender'); // renders the component on the page\n\n      this.render();\n      (0, _chai.expect)(component._state).to.equal('inDOM');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/components/gh-user-invited-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Component: gh-user-invited', function () {\n    (0, _emberMocha.setupComponentTest)('gh-user-invited', {\n      unit: true,\n      // specify the other units that are required for this test\n      needs: ['service:notifications']\n    });\n    (0, _mocha.it)('renders', function () {\n      // creates the component instance\n      let component = this.subject();\n      (0, _chai.expect)(component._state).to.equal('preRender'); // renders the component on the page\n\n      this.render();\n      (0, _chai.expect)(component._state).to.equal('inDOM');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/controllers/editor-test\", [\"mocha\", \"chai\", \"@ember/test-helpers\", \"ember-mocha\", \"ember-concurrency\"], function (_mocha, _chai, _testHelpers, _emberMocha, _emberConcurrency) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Controller: editor', function () {\n    (0, _emberMocha.setupTest)();\n    (0, _mocha.describe)('generateSlug', function () {\n      (0, _mocha.it)('should generate a slug and set it on the post', async function () {\n        let controller = this.owner.lookup('controller:editor');\n        controller.set('slugGenerator', Ember.Object.create({\n          generateSlug(slugType, str) {\n            return Ember.RSVP.resolve(\"\".concat(str, \"-slug\"));\n          }\n\n        }));\n        controller.set('post', Ember.Object.create({\n          slug: ''\n        }));\n        controller.set('post.titleScratch', 'title');\n        await (0, _testHelpers.settled)();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('');\n        await controller.get('generateSlug').perform();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('title-slug');\n      });\n      (0, _mocha.it)('should not set the destination if the title is \"(Untitled)\" and the post already has a slug', async function () {\n        let controller = this.owner.lookup('controller:editor');\n        controller.set('slugGenerator', Ember.Object.create({\n          generateSlug(slugType, str) {\n            return Ember.RSVP.resolve(\"\".concat(str, \"-slug\"));\n          }\n\n        }));\n        controller.set('post', Ember.Object.create({\n          slug: 'whatever'\n        }));\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('whatever');\n        controller.set('post.titleScratch', '(Untitled)');\n        await controller.get('generateSlug').perform();\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('whatever');\n      });\n    });\n    (0, _mocha.describe)('saveTitle', function () {\n      beforeEach(function () {\n        this.controller = this.owner.lookup('controller:editor');\n        this.controller.set('target', {\n          send() {}\n\n        });\n      });\n      (0, _mocha.it)('should invoke generateSlug if the post is new and a title has not been set', async function () {\n        let controller = this.controller;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlug', (0, _emberConcurrency.task)(function* () {\n          this.set('post.slug', 'test-slug');\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: true\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.true;\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'test');\n        await controller.get('saveTitle').perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('test');\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('test-slug');\n      });\n      (0, _mocha.it)('should invoke generateSlug if the post is not new and it\\'s title is \"(Untitled)\"', async function () {\n        let controller = this.controller;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlug', (0, _emberConcurrency.task)(function* () {\n          this.set('post.slug', 'test-slug');\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: false,\n          title: '(Untitled)'\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.false;\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'New Title');\n        await controller.get('saveTitle').perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('New Title');\n        (0, _chai.expect)(controller.get('post.slug')).to.equal('test-slug');\n      });\n      (0, _mocha.it)('should not invoke generateSlug if the post is new but has a title', async function () {\n        let controller = this.controller;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlug', (0, _emberConcurrency.task)(function* () {\n          (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: true,\n          title: 'a title'\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.true;\n        (0, _chai.expect)(controller.get('post.title')).to.equal('a title');\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.not.be.ok;\n        controller.set('post.titleScratch', 'test');\n        await controller.get('saveTitle').perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('test');\n        (0, _chai.expect)(controller.get('post.slug')).to.not.be.ok;\n      });\n      (0, _mocha.it)('should not invoke generateSlug if the post is not new and the title is not \"(Untitled)\"', async function () {\n        let controller = this.controller;\n        controller.set('target', {\n          send() {}\n\n        });\n        Ember.defineProperty(controller, 'generateSlug', (0, _emberConcurrency.task)(function* () {\n          (0, _chai.expect)(false, 'generateSlug should not be called').to.equal(true);\n          yield Ember.RSVP.resolve();\n        }));\n        controller.set('post', Ember.Object.create({\n          isNew: false\n        }));\n        (0, _chai.expect)(controller.get('post.isNew')).to.be.false;\n        (0, _chai.expect)(controller.get('post.title')).to.not.be.ok;\n        controller.set('post.titleScratch', 'title');\n        await controller.get('saveTitle').perform();\n        (0, _chai.expect)(controller.get('post.titleScratch')).to.equal('title');\n        (0, _chai.expect)(controller.get('post.slug')).to.not.be.ok;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/controllers/settings/design-test\", [\"ghost-admin/models/navigation-item\", \"chai\", \"mocha\", \"ember-mocha\"], function (_navigationItem, _chai, _mocha, _emberMocha) {\n  \"use strict\";\n\n  // const navSettingJSON = `[\n  //     {\"label\":\"Home\",\"url\":\"/\"},\n  //     {\"label\":\"JS Test\",\"url\":\"javascript:alert('hello');\"},\n  //     {\"label\":\"About\",\"url\":\"/about\"},\n  //     {\"label\":\"Sub Folder\",\"url\":\"/blah/blah\"},\n  //     {\"label\":\"Telephone\",\"url\":\"tel:01234-567890\"},\n  //     {\"label\":\"Mailto\",\"url\":\"mailto:test@example.com\"},\n  //     {\"label\":\"External\",\"url\":\"https://example.com/testing?query=test#anchor\"},\n  //     {\"label\":\"No Protocol\",\"url\":\"//example.com\"}\n  // ]`;\n  (0, _mocha.describe)('Unit: Controller: settings/design', function () {\n    (0, _emberMocha.setupTest)('controller:settings/design', {\n      // Specify the other units that are required for this test.\n      needs: ['model:navigation-item', 'service:ajax', 'service:config', 'service:ghostPaths', 'service:notifications', 'service:session', 'service:upgrade-status', 'service:settings']\n    });\n    (0, _mocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n      let ctrl = this.subject();\n      ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n      (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n    });\n    (0, _mocha.it)('init: creates a new navigation item', function () {\n      let ctrl = this.subject();\n      Ember.run(() => {\n        (0, _chai.expect)(ctrl.get('newNavItem')).to.exist;\n        (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be.true;\n      });\n    });\n    (0, _mocha.it)('blogUrl: captures config and ensures trailing slash', function () {\n      let ctrl = this.subject();\n      ctrl.set('config.blogUrl', 'http://localhost:2368/blog');\n      (0, _chai.expect)(ctrl.get('blogUrl')).to.equal('http://localhost:2368/blog/');\n    });\n    (0, _mocha.it)('save: validates nav items', function (done) {\n      let ctrl = this.subject();\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/'\n          }), _navigationItem.default.create({\n            label: '',\n            url: '/second'\n          }), _navigationItem.default.create({\n            label: 'Third',\n            url: ''\n          })]\n        })); // blank item won't get added because the last item is incomplete\n\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(3);\n        ctrl.get('save').perform().then(function passedValidation() {\n          (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n          done();\n        }).catch(function failedValidation() {\n          let navItems = ctrl.get('settings.navigation');\n          (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n          (0, _chai.expect)(navItems[1].get('errors.firstObject.attribute')).to.equal('label');\n          (0, _chai.expect)(navItems[2].get('errors.firstObject.attribute')).to.equal('url');\n          done();\n        });\n      });\n    });\n    (0, _mocha.it)('save: ignores blank last item when saving', function (done) {\n      let ctrl = this.subject();\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/'\n          }), _navigationItem.default.create({\n            label: '',\n            url: ''\n          })]\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(2);\n        ctrl.get('save').perform().then(function passedValidation() {\n          (0, _chai.assert)(false, 'navigationItems weren\\'t validated on save');\n          done();\n        }).catch(function failedValidation() {\n          let navItems = ctrl.get('settings.navigation');\n          (0, _chai.expect)(navItems[0].get('errors').toArray()).to.be.empty;\n          done();\n        });\n      });\n    });\n    (0, _mocha.it)('action - addNavItem: adds item to navigationItems', function () {\n      let ctrl = this.subject();\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: 'First',\n            url: '/first',\n            last: true\n          })]\n        }));\n      });\n      (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n      ctrl.set('newNavItem.label', 'New');\n      ctrl.set('newNavItem.url', '/new');\n      Ember.run(() => {\n        ctrl.send('addNavItem');\n      });\n      (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(2);\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.label')).to.equal('New');\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.url')).to.equal('/new');\n      (0, _chai.expect)(ctrl.get('settings.navigation.lastObject.isNew')).to.be.false;\n      (0, _chai.expect)(ctrl.get('newNavItem.label')).to.be.empty;\n      (0, _chai.expect)(ctrl.get('newNavItem.url')).to.be.empty;\n      (0, _chai.expect)(ctrl.get('newNavItem.isNew')).to.be.true;\n    });\n    (0, _mocha.it)('action - addNavItem: doesn\\'t insert new item if last object is incomplete', function () {\n      let ctrl = this.subject();\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: [_navigationItem.default.create({\n            label: '',\n            url: '',\n            last: true\n          })]\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n        ctrl.send('addNavItem');\n        (0, _chai.expect)(ctrl.get('settings.navigation.length')).to.equal(1);\n      });\n    });\n    (0, _mocha.it)('action - deleteNavItem: removes item from navigationItems', function () {\n      let ctrl = this.subject();\n      let navItems = [_navigationItem.default.create({\n        label: 'First',\n        url: '/first'\n      }), _navigationItem.default.create({\n        label: 'Second',\n        url: '/second',\n        last: true\n      })];\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: navItems\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('label')).to.deep.equal(['First', 'Second']);\n        ctrl.send('deleteNavItem', ctrl.get('settings.navigation.firstObject'));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('label')).to.deep.equal(['Second']);\n      });\n    });\n    (0, _mocha.it)('action - updateUrl: updates URL on navigationItem', function () {\n      let ctrl = this.subject();\n      let navItems = [_navigationItem.default.create({\n        label: 'First',\n        url: '/first'\n      }), _navigationItem.default.create({\n        label: 'Second',\n        url: '/second',\n        last: true\n      })];\n      Ember.run(() => {\n        ctrl.set('settings', Ember.Object.create({\n          navigation: navItems\n        }));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('url')).to.deep.equal(['/first', '/second']);\n        ctrl.send('updateUrl', '/new', ctrl.get('settings.navigation.firstObject'));\n        (0, _chai.expect)(ctrl.get('settings.navigation').mapBy('url')).to.deep.equal(['/new', '/second']);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/controllers/subscribers-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Controller: subscribers', function () {\n    (0, _emberMocha.setupTest)('controller:subscribers', {\n      needs: ['service:notifications', 'service:session']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let controller = this.subject();\n      (0, _chai.expect)(controller).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-count-characters-test\", [\"ghost-admin/helpers/gh-count-characters\", \"mocha\", \"chai\"], function (_ghCountCharacters, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-count-characters', function () {\n    let defaultStyle = 'color: rgb(115, 138, 148);';\n    let errorStyle = 'color: rgb(240, 82, 48);';\n    (0, _mocha.it)('counts remaining chars', function () {\n      let result = (0, _ghCountCharacters.countCharacters)(['test']);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(defaultStyle, \"\\\">196</span>\"));\n    });\n    (0, _mocha.it)('warns when nearing limit', function () {\n      let result = (0, _ghCountCharacters.countCharacters)([Array(195 + 1).join('x')]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(errorStyle, \"\\\">5</span>\"));\n    });\n    (0, _mocha.it)('indicates too many chars', function () {\n      let result = (0, _ghCountCharacters.countCharacters)([Array(205 + 1).join('x')]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(errorStyle, \"\\\">-5</span>\"));\n    });\n    (0, _mocha.it)('counts multibyte correctly', function () {\n      let result = (0, _ghCountCharacters.countCharacters)(['💩']);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(defaultStyle, \"\\\">199</span>\")); // emoji + modifier is still two chars\n\n      result = (0, _ghCountCharacters.countCharacters)(['💃🏻']);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(defaultStyle, \"\\\">198</span>\"));\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-count-down-characters-test\", [\"ghost-admin/helpers/gh-count-down-characters\", \"mocha\", \"chai\"], function (_ghCountDownCharacters, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-count-down-characters', function () {\n    let validStyle = 'color: rgb(159, 187, 88);';\n    let errorStyle = 'color: rgb(226, 84, 64);';\n    (0, _mocha.it)('counts chars', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)(['test', 200]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(validStyle, \"\\\">4</span>\"));\n    });\n    (0, _mocha.it)('warns with too many chars', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)([Array(205 + 1).join('x'), 200]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(errorStyle, \"\\\">205</span>\"));\n    });\n    (0, _mocha.it)('counts multibyte correctly', function () {\n      let result = (0, _ghCountDownCharacters.countDownCharacters)(['💩', 200]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(validStyle, \"\\\">1</span>\")); // emoji + modifier is still two chars\n\n      result = (0, _ghCountDownCharacters.countDownCharacters)(['💃🏻', 200]);\n      (0, _chai.expect)(result.string).to.equal(\"<span class=\\\"word-count\\\" style=\\\"\".concat(validStyle, \"\\\">2</span>\"));\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-format-post-time-test\", [\"moment\", \"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_moment, _sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  // because why not?\n  const timezoneForTest = 'Iceland';\n  (0, _mocha.describe)('Unit: Helper: gh-format-post-time', function () {\n    (0, _emberMocha.setupTest)('helper:gh-format-post-time', {\n      unit: true,\n      needs: ['service:settings']\n    });\n\n    let sandbox = _sinon.default.createSandbox();\n\n    afterEach(function () {\n      sandbox.restore();\n    });\n\n    function runFormatCheck(helper, date1, utc, options) {\n      helper.set('settings', {\n        activeTimezone: timezoneForTest\n      });\n      let mockDate = (0, _moment.default)(date1); // Compute this before we override utc\n\n      let expectedTime = _moment.default.tz(mockDate, timezoneForTest).format('HH:mm');\n\n      let utcStub = sandbox.stub(_moment.default, 'utc');\n      utcStub.returns((0, _moment.default)(utc));\n      utcStub.onFirstCall().returns(mockDate);\n      let result = helper.compute([mockDate], options);\n      return {\n        expectedTime,\n        result\n      };\n    }\n\n    (0, _mocha.it)('returns basic time difference if post is draft', function () {\n      let helper = this.subject();\n\n      let mockDate = _moment.default.utc().subtract(1, 'hour');\n\n      let result = helper.compute([mockDate], {\n        draft: true\n      });\n      (0, _chai.expect)(result).to.equal('an hour ago');\n    });\n    (0, _mocha.it)('returns difference if post was published less than 15 minutes ago', function () {\n      let helper = this.subject();\n\n      let mockDate = _moment.default.utc().subtract(13, 'minutes');\n\n      let result = helper.compute([mockDate], {\n        published: true\n      });\n      (0, _chai.expect)(result).to.equal('13 minutes ago');\n    });\n    (0, _mocha.it)('returns difference if post is scheduled for less than 15 minutes from now', function () {\n      let helper = this.subject();\n\n      let mockDate = _moment.default.utc().add(13, 'minutes');\n\n      let result = helper.compute([mockDate], {\n        scheduled: true\n      });\n      (0, _chai.expect)(result).to.equal('in 13 minutes');\n    });\n    (0, _mocha.it)('returns correct format if post was published on the same day', function () {\n      let _runFormatCheck = runFormatCheck(this.subject(), '2017-09-06T16:00:00Z', '2017-09-06T18:00:00Z', {\n        published: true\n      }),\n          expectedTime = _runFormatCheck.expectedTime,\n          result = _runFormatCheck.result;\n\n      (0, _chai.expect)(result).to.equal(\"\".concat(expectedTime, \" Today\"));\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for the same day', function () {\n      let _runFormatCheck2 = runFormatCheck(this.subject(), '2017-09-06T18:00:00Z', '2017-09-06T16:00:00Z', {\n        scheduled: true\n      }),\n          expectedTime = _runFormatCheck2.expectedTime,\n          result = _runFormatCheck2.result;\n\n      (0, _chai.expect)(result).to.equal(\"at \".concat(expectedTime, \" Today\"));\n    });\n    (0, _mocha.it)('returns correct format if post was published yesterday', function () {\n      let _runFormatCheck3 = runFormatCheck(this.subject(), '2017-09-05T16:00:00Z', '2017-09-06T18:00:00Z', {\n        published: true\n      }),\n          expectedTime = _runFormatCheck3.expectedTime,\n          result = _runFormatCheck3.result;\n\n      (0, _chai.expect)(result).to.equal(\"\".concat(expectedTime, \" Yesterday\"));\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for tomorrow', function () {\n      let _runFormatCheck4 = runFormatCheck(this.subject(), '2017-09-07T18:00:00Z', '2017-09-06T16:00:00Z', {\n        scheduled: true\n      }),\n          expectedTime = _runFormatCheck4.expectedTime,\n          result = _runFormatCheck4.result;\n\n      (0, _chai.expect)(result).to.equal(\"at \".concat(expectedTime, \" Tomorrow\"));\n    });\n    (0, _mocha.it)('returns correct format if post was published prior to yesterday', function () {\n      let _runFormatCheck5 = runFormatCheck(this.subject(), '2017-09-02T16:00:00Z', '2017-09-06T18:00:00Z', {\n        published: true\n      }),\n          result = _runFormatCheck5.result;\n\n      (0, _chai.expect)(result).to.equal('02 Sep 2017');\n    });\n    (0, _mocha.it)('returns correct format if post is scheduled for later than tomorrow', function () {\n      let _runFormatCheck6 = runFormatCheck(this.subject(), '2017-09-10T18:00:00Z', '2017-09-06T16:00:00Z', {\n        scheduled: true\n      }),\n          expectedTime = _runFormatCheck6.expectedTime,\n          result = _runFormatCheck6.result;\n\n      (0, _chai.expect)(result).to.equal(\"at \".concat(expectedTime, \" on 10 Sep 2017\"));\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/gh-user-can-admin-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/gh-user-can-admin\"], function (_mocha, _chai, _ghUserCanAdmin) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: gh-user-can-admin', function () {\n    // Mock up roles and test for truthy\n    (0, _mocha.describe)('Owner or admin roles', function () {\n      let user = {\n        get(role) {\n          if (role === 'isOwnerOrAdmin') {\n            return true;\n          }\n        }\n\n      };\n      (0, _mocha.it)(' - can be Admin', function () {\n        let result = (0, _ghUserCanAdmin.ghUserCanAdmin)([user]);\n        (0, _chai.expect)(result).to.equal(true);\n      });\n    });\n    (0, _mocha.describe)('Editor, Author & Contributor roles', function () {\n      let user = {\n        get(role) {\n          if (role === 'isOwner') {\n            return false;\n          } else if (role === 'isAdmin') {\n            return false;\n          }\n        }\n\n      };\n      (0, _mocha.it)(' - cannot be Admin', function () {\n        let result = (0, _ghUserCanAdmin.ghUserCanAdmin)([user]);\n        (0, _chai.expect)(result).to.equal(false);\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/highlighted-text-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/highlighted-text\"], function (_mocha, _chai, _highlightedText) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: highlighted-text', function () {\n    (0, _mocha.it)('works', function () {\n      let result = (0, _highlightedText.highlightedText)(['Test', 'e']);\n      (0, _chai.expect)(result).to.be.an('object');\n      (0, _chai.expect)(result.string).to.equal('T<span class=\"highlight\">e</span>st');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/is-equal-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/is-equal\"], function (_mocha, _chai, _isEqual) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: is-equal', function () {\n    // Replace this with your real tests.\n    (0, _mocha.it)('works', function () {\n      let result = (0, _isEqual.isEqual)([42, 42]);\n      (0, _chai.expect)(result).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/helpers/is-not-test\", [\"mocha\", \"chai\", \"ghost-admin/helpers/is-not\"], function (_mocha, _chai, _isNot) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Helper: is-not', function () {\n    // Replace this with your real tests.\n    (0, _mocha.it)('works', function () {\n      let result = (0, _isNot.isNot)(false);\n      (0, _chai.expect)(result).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/mixins/validation-engine-test\", [\"mocha\"], function (_mocha) {\n  \"use strict\";\n\n  // import {expect} from 'chai';\n  // import EmberObject from 'ember-object';\n  // import ValidationEngineMixin from 'ghost-admin/mixins/validation-engine';\n  (0, _mocha.describe)('ValidationEngineMixin', function () {\n    // Replace this with your real tests.\n    // it('works', function () {\n    //     var ValidationEngineObject = EmberObject.extend(ValidationEngineMixin);\n    //     var subject = ValidationEngineObject.create();\n    //     expect(subject).to.be.ok;\n    // });\n    (0, _mocha.describe)('#validate', function () {\n      (0, _mocha.it)('loads the correct validator');\n      (0, _mocha.it)('rejects if the validator doesn\\'t exist');\n      (0, _mocha.it)('resolves with valid object');\n      (0, _mocha.it)('rejects with invalid object');\n      (0, _mocha.it)('clears all existing errors');\n      (0, _mocha.describe)('with a specified property', function () {\n        (0, _mocha.it)('resolves with valid property');\n        (0, _mocha.it)('rejects with invalid property');\n        (0, _mocha.it)('adds property to hasValidated array');\n        (0, _mocha.it)('clears existing error on specified property');\n      });\n      (0, _mocha.it)('handles a passed in model');\n      (0, _mocha.it)('uses this.model if available');\n    });\n    (0, _mocha.describe)('#save', function () {\n      (0, _mocha.it)('calls validate');\n      (0, _mocha.it)('rejects with validation errors');\n      (0, _mocha.it)('calls object\\'s #save if validation passes');\n      (0, _mocha.it)('skips validation if it\\'s a deletion');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/api-key-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: api-key', function () {\n    (0, _emberMocha.setupModelTest)('api-key', {\n      // Specify the other units that are required for this test.\n      needs: []\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let model = this.subject(); // var store = this.store();\n\n      (0, _chai.expect)(model).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/integration-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: integration', function () {\n    (0, _emberMocha.setupModelTest)('integration', {\n      // Specify the other units that are required for this test.\n      needs: []\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let model = this.subject(); // var store = this.store();\n\n      (0, _chai.expect)(model).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/invite-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Unit: Model: invite', function () {\n    (0, _emberMocha.setupModelTest)('invite', {\n      needs: ['model:role', 'serializer:application', 'serializer:invite', 'transform:moment-utc', 'service:ghost-paths', 'service:ajax', 'service:session', 'service:feature', 'service:tour']\n    });\n    (0, _mocha.describe)('with network', function () {\n      let server;\n      beforeEach(function () {\n        server = new _pretender.default();\n      });\n      afterEach(function () {\n        server.shutdown();\n      });\n      (0, _mocha.it)('resend hits correct endpoint', function () {\n        let model = this.subject();\n        let role;\n        server.post('/ghost/api/v2/admin/invites/', function () {\n          return [200, {}, '{}'];\n        });\n        Ember.run(() => {\n          role = this.store().push({\n            data: {\n              id: 1,\n              type: 'role',\n              attributes: {\n                name: 'Editor'\n              }\n            }\n          });\n          model.set('email', 'resend-test@example.com');\n          model.set('role', role);\n          model.resend();\n        });\n        (0, _chai.expect)(server.handledRequests.length, 'number of requests').to.equal(1);\n\n        let _server$handledReques = _slicedToArray(server.handledRequests, 1),\n            lastRequest = _server$handledReques[0];\n\n        let requestBody = JSON.parse(lastRequest.requestBody);\n\n        let _requestBody$invites = _slicedToArray(requestBody.invites, 1),\n            invite = _requestBody$invites[0];\n\n        (0, _chai.expect)(requestBody.invites.length, 'number of invites in request body').to.equal(1);\n        (0, _chai.expect)(invite.email).to.equal('resend-test@example.com'); // eslint-disable-next-line camelcase\n\n        (0, _chai.expect)(invite.role_id, 'role ID').to.equal('1');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/member-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: member', function () {\n    (0, _emberMocha.setupTest)(); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('member', {});\n      (0, _chai.expect)(model).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/navigation-item-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: navigation-item', function () {\n    (0, _emberMocha.setupTest)('model:navigation-item', {\n      // Specify the other units that are required for this test.\n      needs: []\n    });\n    (0, _mocha.it)('isComplete is true when label and url are filled', function () {\n      let model = this.subject();\n      model.set('label', 'test');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isComplete')).to.be.true;\n    });\n    (0, _mocha.it)('isComplete is false when label is blank', function () {\n      let model = this.subject();\n      model.set('label', '');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isComplete')).to.be.false;\n    });\n    (0, _mocha.it)('isComplete is false when url is blank', function () {\n      let model = this.subject();\n      model.set('label', 'test');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isComplete')).to.be.false;\n    });\n    (0, _mocha.it)('isBlank is true when label and url are blank', function () {\n      let model = this.subject();\n      model.set('label', '');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isBlank')).to.be.true;\n    });\n    (0, _mocha.it)('isBlank is false when label is present', function () {\n      let model = this.subject();\n      model.set('label', 'test');\n      model.set('url', '');\n      (0, _chai.expect)(model.get('isBlank')).to.be.false;\n    });\n    (0, _mocha.it)('isBlank is false when url is present', function () {\n      let model = this.subject();\n      model.set('label', '');\n      model.set('url', 'test');\n      (0, _chai.expect)(model.get('isBlank')).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/post-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: post', function () {\n    (0, _emberMocha.setupModelTest)('post', {\n      needs: ['model:user', 'model:tag', 'model:role', 'service:ajax', 'service:clock', 'service:config', 'service:feature', 'service:ghostPaths', 'service:lazyLoader', 'service:notifications', 'service:session', 'service:settings']\n    });\n    (0, _mocha.it)('has a validation type of \"post\"', function () {\n      let model = this.subject();\n      (0, _chai.expect)(model.validationType).to.equal('post');\n    });\n    (0, _mocha.it)('isPublished, isDraft and isScheduled are correct', function () {\n      let model = this.subject({\n        status: 'published'\n      });\n      (0, _chai.expect)(model.get('isPublished')).to.be.ok;\n      (0, _chai.expect)(model.get('isDraft')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isScheduled')).to.not.be.ok;\n      Ember.run(function () {\n        model.set('status', 'draft');\n        (0, _chai.expect)(model.get('isPublished')).to.not.be.ok;\n        (0, _chai.expect)(model.get('isDraft')).to.be.ok;\n        (0, _chai.expect)(model.get('isScheduled')).to.not.be.ok;\n      });\n      Ember.run(function () {\n        model.set('status', 'scheduled');\n        (0, _chai.expect)(model.get('isScheduled')).to.be.ok;\n        (0, _chai.expect)(model.get('isPublished')).to.not.be.ok;\n        (0, _chai.expect)(model.get('isDraft')).to.not.be.ok;\n      });\n    });\n    (0, _mocha.it)('isAuthoredByUser is correct', function () {\n      let user1 = this.store().createRecord('user', {\n        id: 'abcd1234'\n      });\n      let user2 = this.store().createRecord('user', {\n        id: 'wxyz9876'\n      });\n      let model = this.subject({\n        authors: [user1]\n      });\n      (0, _chai.expect)(model.isAuthoredByUser(user1)).to.be.ok;\n      Ember.run(function () {\n        model.set('authors', [user2]);\n        (0, _chai.expect)(model.isAuthoredByUser(user1)).to.not.be.ok;\n      });\n    });\n    (0, _mocha.it)('updateTags removes and deletes old tags', function () {\n      let model = this.subject();\n      Ember.run(this, function () {\n        let modelTags = model.get('tags');\n        let tag1 = this.store().createRecord('tag', {\n          id: '1'\n        });\n        let tag2 = this.store().createRecord('tag', {\n          id: '2'\n        });\n        let tag3 = this.store().createRecord('tag'); // During testing a record created without an explicit id will get\n        // an id of 'fixture-n' instead of null\n\n        tag3.set('id', null);\n        modelTags.pushObject(tag1);\n        modelTags.pushObject(tag2);\n        modelTags.pushObject(tag3);\n        (0, _chai.expect)(model.get('tags.length')).to.equal(3);\n        model.updateTags();\n        (0, _chai.expect)(model.get('tags.length')).to.equal(2);\n        (0, _chai.expect)(model.get('tags.firstObject.id')).to.equal('1');\n        (0, _chai.expect)(model.get('tags').objectAt(1).get('id')).to.equal('2');\n        (0, _chai.expect)(tag1.get('isDeleted')).to.not.be.ok;\n        (0, _chai.expect)(tag2.get('isDeleted')).to.not.be.ok;\n        (0, _chai.expect)(tag3.get('isDeleted')).to.be.ok;\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/role-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: role', function () {\n    (0, _emberMocha.setupModelTest)('role', {\n      needs: ['service:ajax']\n    });\n    (0, _mocha.it)('provides a lowercase version of the name', function () {\n      let model = this.subject({\n        name: 'Author'\n      });\n      (0, _chai.expect)(model.get('name')).to.equal('Author');\n      (0, _chai.expect)(model.get('lowerCaseName')).to.equal('author');\n      Ember.run(function () {\n        model.set('name', 'Editor');\n        (0, _chai.expect)(model.get('name')).to.equal('Editor');\n        (0, _chai.expect)(model.get('lowerCaseName')).to.equal('editor');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/setting-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: setting', function () {\n    (0, _emberMocha.setupModelTest)('setting');\n    (0, _mocha.it)('has a validation type of \"setting\"', function () {\n      let model = this.subject();\n      (0, _chai.expect)(model.get('validationType')).to.equal('setting');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/subscriber-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: subscriber', function () {\n    (0, _emberMocha.setupModelTest)('subscriber', {\n      // Specify the other units that are required for this test.\n      needs: ['model:post', 'service:session']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let model = this.subject(); // var store = this.store();\n\n      (0, _chai.expect)(model).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/tag-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: tag', function () {\n    (0, _emberMocha.setupModelTest)('tag', {\n      needs: ['service:feature']\n    });\n    (0, _mocha.it)('has a validation type of \"tag\"', function () {\n      let model = this.subject();\n      (0, _chai.expect)(model.get('validationType')).to.equal('tag');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: user', function () {\n    (0, _emberMocha.setupModelTest)('user', {\n      needs: ['model:role', 'serializer:application', 'serializer:user', 'service:ajax', 'service:config', 'service:ghostPaths', 'service:notifications', 'service:session']\n    });\n    (0, _mocha.it)('has a validation type of \"user\"', function () {\n      let model = this.subject();\n      (0, _chai.expect)(model.get('validationType')).to.equal('user');\n    });\n    (0, _mocha.it)('isActive/isSuspended properties are correct', function () {\n      let model = this.subject({\n        status: 'active'\n      });\n      (0, _chai.expect)(model.get('isActive')).to.be.ok;\n      (0, _chai.expect)(model.get('isSuspended')).to.not.be.ok;\n      ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n        Ember.run(() => {\n          model.set('status', status);\n        });\n        (0, _chai.expect)(model.get('isActive')).to.be.ok;\n        (0, _chai.expect)(model.get('isSuspended')).to.not.be.ok;\n      });\n      Ember.run(() => {\n        model.set('status', 'inactive');\n      });\n      (0, _chai.expect)(model.get('isSuspended')).to.be.ok;\n      (0, _chai.expect)(model.get('isActive')).to.not.be.ok;\n    });\n    (0, _mocha.it)('role property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Author'\n            }\n          }\n        });\n        model.get('roles').pushObject(role);\n      });\n      (0, _chai.expect)(model.get('role.name')).to.equal('Author');\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Editor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('role.name')).to.equal('Editor');\n    });\n    (0, _mocha.it)('isContributor property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Contributor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdmin')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwner')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isAuthor property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Author'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isAuthor')).to.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdmin')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwner')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isEditor property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Editor'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isEditor')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdmin')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwner')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isAdmin property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Administrator'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isAdmin')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isOwner')).to.not.be.ok;\n    });\n    (0, _mocha.it)('isOwner property is correct', function () {\n      let model = this.subject();\n      Ember.run(() => {\n        let role = this.store().push({\n          data: {\n            id: 1,\n            type: 'role',\n            attributes: {\n              name: 'Owner'\n            }\n          }\n        });\n        model.set('role', role);\n      });\n      (0, _chai.expect)(model.get('isOwner')).to.be.ok;\n      (0, _chai.expect)(model.get('isAuthor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAuthorOrContributor')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isAdmin')).to.not.be.ok;\n      (0, _chai.expect)(model.get('isEditor')).to.not.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/models/webhook-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Model: webhook', function () {\n    (0, _emberMocha.setupModelTest)('webhook', {\n      // Specify the other units that are required for this test.\n      needs: []\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let model = this.subject(); // var store = this.store();\n\n      (0, _chai.expect)(model).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/api-key-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: api-key', function () {\n    (0, _emberMocha.setupModelTest)('api-key', {\n      // Specify the other units that are required for this test.\n      needs: ['serializer:api-key', 'model:integration', 'transform:moment-utc']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/integration-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: integration', function () {\n    (0, _emberMocha.setupModelTest)('integration', {\n      // Specify the other units that are required for this test.\n      needs: ['serializer:integration', 'transform:moment-utc', 'model:api-key', 'model:webhook']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/notification-test\", [\"pretender\", \"mocha\", \"chai\", \"ember-mocha\"], function (_pretender, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: notification', function () {\n    (0, _emberMocha.setupModelTest)('notification', {\n      // Specify the other units that are required for this test.\n      needs: ['serializer:notification']\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('converts location->key when deserializing', function () {\n      server.get('/notifications', function () {\n        let response = {\n          notifications: [{\n            id: 1,\n            dismissible: false,\n            status: 'alert',\n            type: 'info',\n            location: 'test.foo',\n            message: 'This is a test'\n          }]\n        };\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify(response)];\n      });\n      return this.store().findAll('notification').then(notifications => {\n        (0, _chai.expect)(notifications.get('length')).to.equal(1);\n        (0, _chai.expect)(notifications.get('firstObject.key')).to.equal('test.foo');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/post-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: post', function () {\n    (0, _emberMocha.setupModelTest)('post', {\n      // Specify the other units that are required for this test.\n      needs: ['transform:moment-utc', 'transform:json-string', 'model:user', 'model:tag', 'service:ajax', 'service:clock', 'service:config', 'service:feature', 'service:ghostPaths', 'service:lazyLoader', 'service:notifications', 'service:session', 'service:settings']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/role-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit:Serializer: role', function () {\n    (0, _emberMocha.setupModelTest)('role', {\n      // Specify the other units that are required for this test.\n      needs: ['transform:moment-utc']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/setting-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit:Serializer: setting', function () {\n    (0, _emberMocha.setupModelTest)('setting', {\n      // Specify the other units that are required for this test.\n      needs: ['transform:moment-utc', 'transform:facebook-url-user', 'transform:twitter-url-user', 'transform:navigation-settings', 'transform:slack-settings', 'transform:unsplash-settings']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/subscriber-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit:Serializer: subscriber', function () {\n    (0, _emberMocha.setupModelTest)('subscriber', {\n      // Specify the other units that are required for this test.\n      needs: ['model:post', 'transform:moment-utc']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/tag-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: tag', function () {\n    (0, _emberMocha.setupModelTest)('tag', {\n      // Specify the other units that are required for this test.\n      needs: ['service:feature', 'transform:moment-utc', 'transform:raw']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: user', function () {\n    (0, _emberMocha.setupModelTest)('user', {\n      // Specify the other units that are required for this test.\n      needs: ['model:role', 'service:ajax', 'service:config', 'service:ghostPaths', 'service:notifications', 'service:session', 'transform:facebook-url-user', 'transform:json-string', 'transform:moment-utc', 'transform:raw', 'transform:twitter-url-user']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/serializers/webhook-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Serializer: webhook', function () {\n    (0, _emberMocha.setupModelTest)('webhook', {\n      // Specify the other units that are required for this test.\n      needs: ['transform:moment-utc', 'serializer:webhook', 'model:integration']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('serializes records', function () {\n      let record = this.subject();\n      let serializedRecord = record.serialize();\n      (0, _chai.expect)(serializedRecord).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/event-bus-test\", [\"sinon\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: event-bus', function () {\n    (0, _emberMocha.setupTest)('service:event-bus', {});\n    (0, _mocha.it)('works', function () {\n      let service = this.subject();\n\n      let eventHandler = _sinon.default.spy();\n\n      service.subscribe('test-event', eventHandler);\n      service.publish('test-event', 'test');\n      service.unsubscribe('test-event', eventHandler);\n      service.publish('test-event', 'test two');\n      (0, _chai.expect)(eventHandler.calledOnce, 'event handler only triggered once').to.be.true;\n      (0, _chai.expect)(eventHandler.calledWith('test'), 'event handler was passed correct arguments').to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/notifications-test\", [\"sinon\", \"ember-ajax/errors\", \"ghost-admin/services/ajax\", \"mocha\", \"chai\", \"ember-mocha\"], function (_sinon, _errors, _ajax, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  (0, _mocha.describe)('Unit: Service: notifications', function () {\n    (0, _emberMocha.setupTest)('service:notifications', {\n      needs: ['service:upgradeStatus']\n    });\n    beforeEach(function () {\n      this.subject().set('content', Ember.A());\n      this.subject().set('delayedNotifications', Ember.A());\n    });\n    (0, _mocha.it)('filters alerts/notifications', function () {\n      let notifications = this.subject(); // wrapped in run-loop to enure alerts/notifications CPs are updated\n\n      Ember.run(() => {\n        notifications.showAlert('Alert');\n        notifications.showNotification('Notification');\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Alert');\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.firstObject.message')).to.equal('Notification');\n    });\n    (0, _mocha.it)('#handleNotification deals with DS.Notification notifications', function () {\n      let notifications = this.subject();\n      let notification = Ember.Object.create({\n        message: '<h1>Test</h1>',\n        status: 'alert'\n      });\n\n      notification.toJSON = function () {};\n\n      notifications.handleNotification(notification);\n      notification = notifications.get('alerts')[0]; // alerts received from the server should be marked html safe\n\n      (0, _chai.expect)(notification.get('message')).to.have.property('toHTML');\n    });\n    (0, _mocha.it)('#handleNotification defaults to notification if no status supplied', function () {\n      let notifications = this.subject();\n      notifications.handleNotification({\n        message: 'Test'\n      }, false);\n      (0, _chai.expect)(notifications.get('content')).to.deep.include({\n        message: 'Test',\n        status: 'notification'\n      });\n    });\n    (0, _mocha.it)('#showAlert adds POJO alerts', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAlert('Test Alert', {\n          type: 'error'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts')).to.deep.include({\n        message: 'Test Alert',\n        status: 'alert',\n        type: 'error',\n        key: undefined\n      });\n    });\n    (0, _mocha.it)('#showAlert adds delayed notifications', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('Test Alert', {\n          type: 'error',\n          delayed: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({\n        message: 'Test Alert',\n        status: 'notification',\n        type: 'error',\n        key: undefined\n      });\n    }); // in order to cater for complex keys that are suitable for i18n\n    // we split on the second period and treat the resulting base as\n    // the key for duplicate checking\n\n    (0, _mocha.it)('#showAlert clears duplicates using keys', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAlert('Kept');\n        notifications.showAlert('Duplicate', {\n          key: 'duplicate.key.fail'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      Ember.run(() => {\n        notifications.showAlert('Duplicate with new message', {\n          key: 'duplicate.key.success'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      (0, _chai.expect)(notifications.get('alerts.lastObject.message')).to.equal('Duplicate with new message');\n    });\n    (0, _mocha.it)('#showAlert clears duplicates using message text', function () {\n      let notifications = this.subject();\n      notifications.showAlert('Not duplicate');\n      notifications.showAlert('Duplicate', {\n        key: 'duplicate'\n      });\n      notifications.showAlert('Duplicate');\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n      (0, _chai.expect)(notifications.get('alerts.lastObject.key')).to.not.exist;\n    });\n    (0, _mocha.it)('#showNotification adds POJO notifications', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('Test Notification', {\n          type: 'success'\n        });\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.deep.include({\n        message: 'Test Notification',\n        status: 'notification',\n        type: 'success',\n        key: undefined\n      });\n    });\n    (0, _mocha.it)('#showNotification adds delayed notifications', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('Test Notification', {\n          delayed: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('delayedNotifications')).to.deep.include({\n        message: 'Test Notification',\n        status: 'notification',\n        type: undefined,\n        key: undefined\n      });\n    });\n    (0, _mocha.it)('#showNotification clears existing notifications', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('First');\n        notifications.showNotification('Second');\n      });\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{\n        message: 'Second',\n        status: 'notification',\n        type: undefined,\n        key: undefined\n      }]);\n    });\n    (0, _mocha.it)('#showNotification keeps existing notifications if doNotCloseNotifications option passed', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('First');\n        notifications.showNotification('Second', {\n          doNotCloseNotifications: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(2);\n    });\n    (0, _mocha.it)('#showAPIError handles single json response error', function () {\n      let notifications = this.subject();\n      let error = new _errors.AjaxError({\n        errors: [{\n          message: 'Single error'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let alert = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(alert, 'message')).to.equal('Single error');\n      (0, _chai.expect)(Ember.get(alert, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(alert, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(alert, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError handles multiple json response errors', function () {\n      let notifications = this.subject();\n      let error = new _errors.AjaxError({\n        errors: [{\n          title: 'First error',\n          message: 'First error message'\n        }, {\n          title: 'Second error',\n          message: 'Second error message'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(2);\n\n      let _notifications$get = notifications.get('alerts'),\n          _notifications$get2 = _slicedToArray(_notifications$get, 2),\n          alert1 = _notifications$get2[0],\n          alert2 = _notifications$get2[1];\n\n      (0, _chai.expect)(alert1).to.deep.equal({\n        message: 'First error message',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error.first-error'\n      });\n      (0, _chai.expect)(alert2).to.deep.equal({\n        message: 'Second error message',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error.second-error'\n      });\n    });\n    (0, _mocha.it)('#showAPIError displays default error text if response has no error/message', function () {\n      let notifications = this.subject();\n      let resp = false;\n      Ember.run(() => {\n        notifications.showAPIError(resp);\n      });\n      (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{\n        message: 'There was a problem on the server, please try again.',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error'\n      }]);\n      notifications.set('content', Ember.A());\n      Ember.run(() => {\n        notifications.showAPIError(resp, {\n          defaultErrorText: 'Overridden default'\n        });\n      });\n      (0, _chai.expect)(notifications.get('content').toArray()).to.deep.equal([{\n        message: 'Overridden default',\n        status: 'alert',\n        type: 'error',\n        key: 'api-error'\n      }]);\n    });\n    (0, _mocha.it)('#showAPIError sets correct key when passed a base key', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAPIError('Test', {\n          key: 'test.alert'\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error.test.alert');\n    });\n    (0, _mocha.it)('#showAPIError sets correct key when not passed a key', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAPIError('Test');\n      });\n      (0, _chai.expect)(notifications.get('alerts.firstObject.key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError parses default ember-ajax errors correctly', function () {\n      let notifications = this.subject();\n      let error = new _errors.InvalidError();\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let notification = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(notification, 'message')).to.equal('Request was rejected because it was invalid');\n      (0, _chai.expect)(Ember.get(notification, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(notification, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(notification, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError parses custom ember-ajax errors correctly', function () {\n      let notifications = this.subject();\n      let error = new _ajax.ServerUnreachableError();\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let notification = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(notification, 'message')).to.equal('Server was unreachable');\n      (0, _chai.expect)(Ember.get(notification, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(notification, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(notification, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#showAPIError adds error context to message if available', function () {\n      let notifications = this.subject();\n      let error = new _errors.AjaxError({\n        errors: [{\n          message: 'Authorization Error.',\n          context: 'Please sign in.'\n        }]\n      });\n      Ember.run(() => {\n        notifications.showAPIError(error);\n      });\n      let alert = notifications.get('alerts.firstObject');\n      (0, _chai.expect)(Ember.get(alert, 'message')).to.equal('Authorization Error. Please sign in.');\n      (0, _chai.expect)(Ember.get(alert, 'status')).to.equal('alert');\n      (0, _chai.expect)(Ember.get(alert, 'type')).to.equal('error');\n      (0, _chai.expect)(Ember.get(alert, 'key')).to.equal('api-error');\n    });\n    (0, _mocha.it)('#displayDelayed moves delayed notifications into content', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showNotification('First', {\n          delayed: true\n        });\n        notifications.showNotification('Second', {\n          delayed: true\n        });\n        notifications.showNotification('Third', {\n          delayed: false\n        });\n        notifications.displayDelayed();\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.deep.equal([{\n        message: 'Third',\n        status: 'notification',\n        type: undefined,\n        key: undefined\n      }, {\n        message: 'First',\n        status: 'notification',\n        type: undefined,\n        key: undefined\n      }, {\n        message: 'Second',\n        status: 'notification',\n        type: undefined,\n        key: undefined\n      }]);\n    });\n    (0, _mocha.it)('#closeNotification removes POJO notifications', function () {\n      let notification = {\n        message: 'Close test',\n        status: 'notification'\n      };\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.handleNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.include(notification);\n      Ember.run(() => {\n        notifications.closeNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('notifications')).to.not.include(notification);\n    });\n    (0, _mocha.it)('#closeNotification removes and deletes DS.Notification records', function () {\n      let notification = Ember.Object.create({\n        message: 'Close test',\n        status: 'alert'\n      });\n      let notifications = this.subject();\n\n      notification.toJSON = function () {};\n\n      notification.deleteRecord = function () {};\n\n      _sinon.default.spy(notification, 'deleteRecord');\n\n      notification.save = function () {\n        return {\n          finally(callback) {\n            return callback(notification);\n          }\n\n        };\n      };\n\n      _sinon.default.spy(notification, 'save');\n\n      Ember.run(() => {\n        notifications.handleNotification(notification);\n      });\n      (0, _chai.expect)(notifications.get('alerts')).to.include(notification);\n      Ember.run(() => {\n        notifications.closeNotification(notification);\n      });\n      (0, _chai.expect)(notification.deleteRecord.calledOnce).to.be.true;\n      (0, _chai.expect)(notification.save.calledOnce).to.be.true;\n      (0, _chai.expect)(notifications.get('alerts')).to.not.include(notification);\n    });\n    (0, _mocha.it)('#closeNotifications only removes notifications', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAlert('First alert');\n        notifications.showNotification('First notification');\n        notifications.showNotification('Second notification', {\n          doNotCloseNotifications: true\n        });\n      });\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(2);\n      Ember.run(() => {\n        notifications.closeNotifications();\n      });\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(0);\n    });\n    (0, _mocha.it)('#closeNotifications only closes notifications with specified key', function () {\n      let notifications = this.subject();\n      Ember.run(() => {\n        notifications.showAlert('First alert'); // using handleNotification as showNotification will auto-prune\n        // duplicates and keys will be removed if doNotCloseNotifications\n        // is true\n\n        notifications.handleNotification({\n          message: 'First notification',\n          key: 'test.close',\n          status: 'notification'\n        });\n        notifications.handleNotification({\n          message: 'Second notification',\n          key: 'test.keep',\n          status: 'notification'\n        });\n        notifications.handleNotification({\n          message: 'Third notification',\n          key: 'test.close',\n          status: 'notification'\n        });\n      });\n      Ember.run(() => {\n        notifications.closeNotifications('test.close');\n      });\n      (0, _chai.expect)(notifications.get('notifications.length'), 'notifications count').to.equal(1);\n      (0, _chai.expect)(notifications.get('notifications.firstObject.message'), 'notification message').to.equal('Second notification');\n      (0, _chai.expect)(notifications.get('alerts.length'), 'alerts count').to.equal(1);\n    });\n    (0, _mocha.it)('#clearAll removes everything without deletion', function () {\n      let notifications = this.subject();\n      let notificationModel = Ember.Object.create({\n        message: 'model'\n      });\n\n      notificationModel.toJSON = function () {};\n\n      notificationModel.deleteRecord = function () {};\n\n      _sinon.default.spy(notificationModel, 'deleteRecord');\n\n      notificationModel.save = function () {\n        return {\n          finally(callback) {\n            return callback(notificationModel);\n          }\n\n        };\n      };\n\n      _sinon.default.spy(notificationModel, 'save');\n\n      notifications.handleNotification(notificationModel);\n      notifications.handleNotification({\n        message: 'pojo'\n      });\n      notifications.clearAll();\n      (0, _chai.expect)(notifications.get('content')).to.be.empty;\n      (0, _chai.expect)(notificationModel.deleteRecord.called).to.be.false;\n      (0, _chai.expect)(notificationModel.save.called).to.be.false;\n    });\n    (0, _mocha.it)('#closeAlerts only removes alerts', function () {\n      let notifications = this.subject();\n      notifications.showNotification('First notification');\n      notifications.showAlert('First alert');\n      notifications.showAlert('Second alert');\n      Ember.run(() => {\n        notifications.closeAlerts();\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(0);\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n    });\n    (0, _mocha.it)('#closeAlerts closes only alerts with specified key', function () {\n      let notifications = this.subject();\n      notifications.showNotification('First notification');\n      notifications.showAlert('First alert', {\n        key: 'test.close'\n      });\n      notifications.showAlert('Second alert', {\n        key: 'test.keep'\n      });\n      notifications.showAlert('Third alert', {\n        key: 'test.close'\n      });\n      Ember.run(() => {\n        notifications.closeAlerts('test.close');\n      });\n      (0, _chai.expect)(notifications.get('alerts.length')).to.equal(1);\n      (0, _chai.expect)(notifications.get('alerts.firstObject.message')).to.equal('Second alert');\n      (0, _chai.expect)(notifications.get('notifications.length')).to.equal(1);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/resize-detector-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: resize-detector', function () {\n    (0, _emberMocha.setupTest)('service:resize-detector', {// Specify the other units that are required for this test.\n      // needs: ['service:foo']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let service = this.subject();\n      (0, _chai.expect)(service).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/ui-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: ui', function () {\n    (0, _emberMocha.setupTest)('service:ui', {\n      needs: ['service:dropdown', 'service:mediaQueries']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let service = this.subject();\n      (0, _chai.expect)(service).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/unsplash-test\", [\"pretender\", \"ember-test-helpers/wait\", \"mocha\", \"ghost-admin/tests/helpers/adapter-error\", \"chai\", \"ember-mocha\"], function (_pretender, _wait, _mocha, _adapterError, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: unsplash', function () {\n    (0, _emberMocha.setupTest)('service:unsplash', {\n      needs: ['service:ajax', 'service:config', 'service:ghostPaths', 'service:settings']\n    });\n    let server;\n    beforeEach(function () {\n      server = new _pretender.default();\n    });\n    afterEach(function () {\n      server.shutdown();\n    });\n    (0, _mocha.it)('can load new');\n    (0, _mocha.it)('can load next page');\n    (0, _mocha.describe)('search', function () {\n      (0, _mocha.it)('sends search request');\n      (0, _mocha.it)('debounces query updates');\n      (0, _mocha.it)('can load next page of search results');\n      (0, _mocha.it)('clears photos when starting new search');\n      (0, _mocha.it)('loads new when query is cleared');\n    });\n    (0, _mocha.describe)('columns', function () {\n      (0, _mocha.it)('sorts photos into columns based on column height');\n      (0, _mocha.it)('can change column count');\n    });\n    (0, _mocha.describe)('error handling', function () {\n      (0, _mocha.it)('handles rate limit exceeded', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [403, {\n            'x-ratelimit-remaining': '0'\n          }, 'Rate Limit Exceeded'];\n        });\n        let service = this.subject();\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _wait.default)();\n        (0, _adapterError.errorOverride)();\n        (0, _chai.expect)(service.get('error')).to.have.string('Unsplash API rate limit reached');\n        (0, _adapterError.errorReset)();\n      });\n      (0, _mocha.it)('handles json errors', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [500, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({\n            errors: ['Unsplash API Error']\n          })];\n        });\n        let service = this.subject();\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _wait.default)();\n        (0, _adapterError.errorOverride)();\n        (0, _chai.expect)(service.get('error')).to.equal('Unsplash API Error');\n        (0, _adapterError.errorReset)();\n      });\n      (0, _mocha.it)('handles text errors', async function () {\n        server.get('https://api.unsplash.com/photos', function () {\n          return [500, {\n            'Content-Type': 'text/xml'\n          }, 'Unsplash text error'];\n        });\n        let service = this.subject();\n        Ember.run(() => {\n          service.loadNextPage();\n        });\n        await (0, _wait.default)();\n        (0, _adapterError.errorOverride)();\n        (0, _chai.expect)(service.get('error')).to.equal('Unsplash text error');\n        (0, _adapterError.errorReset)();\n      });\n    });\n    (0, _mocha.describe)('isLoading', function () {\n      (0, _mocha.it)('is false by default');\n      (0, _mocha.it)('is true when loading new');\n      (0, _mocha.it)('is true when loading next page');\n      (0, _mocha.it)('is true when searching');\n      (0, _mocha.it)('returns to false when finished');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/services/upgrade-status-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Service: upgrade-status', function () {\n    (0, _emberMocha.setupTest)('service:upgrade-status', {\n      // Specify the other units that are required for this test.\n      // needs: ['service:foo']\n      needs: ['service:notifications']\n    }); // Replace this with your real tests.\n\n    (0, _mocha.it)('exists', function () {\n      let service = this.subject();\n      (0, _chai.expect)(service).to.be.ok;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/facebook-url-user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: facebook-url-user', function () {\n    (0, _emberMocha.setupTest)('transform:facebook-url-user', {});\n    (0, _mocha.it)('deserializes facebook url', function () {\n      let transform = this.subject();\n      let serialized = 'testuser';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result).to.equal('https://www.facebook.com/testuser');\n    });\n    (0, _mocha.it)('serializes url to facebook username', function () {\n      let transform = this.subject();\n      let deserialized = 'https://www.facebook.com/testuser';\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('testuser');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/json-string-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: json-string', function () {\n    (0, _emberMocha.setupTest)('transform:json-string', {});\n    (0, _mocha.it)('serialises an Object to a JSON String', function () {\n      let transform = this.subject();\n      let obj = {\n        one: 'one',\n        two: 'two'\n      };\n      (0, _chai.expect)(transform.serialize(obj)).to.equal(JSON.stringify(obj));\n    });\n    (0, _mocha.it)('deserialises a JSON String to an Object', function () {\n      let transform = this.subject();\n      let obj = {\n        one: 'one',\n        two: 'two'\n      };\n      (0, _chai.expect)(transform.deserialize(JSON.stringify(obj))).to.deep.equal(obj);\n    });\n    (0, _mocha.it)('handles deserializing a blank string', function () {\n      let transform = this.subject();\n      (0, _chai.expect)(transform.deserialize('')).to.equal(null);\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/navigation-settings-test\", [\"ghost-admin/models/navigation-item\", \"mocha\", \"chai\", \"ember-mocha\"], function (_navigationItem, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: navigation-settings', function () {\n    (0, _emberMocha.setupTest)('transform:navigation-settings', {});\n    (0, _mocha.it)('deserializes navigation json', function () {\n      let transform = this.subject();\n      let serialized = '[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(2);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_navigationItem.default);\n      (0, _chai.expect)(result[0].get('label')).to.equal('One');\n      (0, _chai.expect)(result[0].get('url')).to.equal('/one');\n      (0, _chai.expect)(result[1]).to.be.instanceof(_navigationItem.default);\n      (0, _chai.expect)(result[1].get('label')).to.equal('Two');\n      (0, _chai.expect)(result[1].get('url')).to.equal('/two');\n    });\n    (0, _mocha.it)('serializes array of NavigationItems', function () {\n      let transform = this.subject();\n      let deserialized = Ember.A([_navigationItem.default.create({\n        label: 'One',\n        url: '/one'\n      }), _navigationItem.default.create({\n        label: 'Two',\n        url: '/two'\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[{\"label\":\"One\",\"url\":\"/one\"},{\"label\":\"Two\",\"url\":\"/two\"}]');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/slack-settings-test\", [\"ghost-admin/models/slack-integration\", \"mocha\", \"chai\", \"ember-mocha\"], function (_slackIntegration, _mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: slack-settings', function () {\n    (0, _emberMocha.setupTest)('transform:slack-settings', {});\n    (0, _mocha.it)('deserializes settings json', function () {\n      let transform = this.subject();\n      let serialized = '[{\"url\":\"http://myblog.com/blogpost1\",\"username\":\"SlackBot\"}]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(1);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_slackIntegration.default);\n      (0, _chai.expect)(result[0].get('url')).to.equal('http://myblog.com/blogpost1');\n      (0, _chai.expect)(result[0].get('username')).to.equal('SlackBot');\n    });\n    (0, _mocha.it)('deserializes empty array', function () {\n      let transform = this.subject();\n      let serialized = '[]';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result.length).to.equal(1);\n      (0, _chai.expect)(result[0]).to.be.instanceof(_slackIntegration.default);\n      (0, _chai.expect)(result[0].get('url')).to.equal('');\n      (0, _chai.expect)(result[0].get('username')).to.equal('');\n    });\n    (0, _mocha.it)('serializes array of Slack settings', function () {\n      let transform = this.subject();\n      let deserialized = Ember.A([_slackIntegration.default.create({\n        url: 'http://myblog.com/blogpost1',\n        username: 'SlackBot'\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[{\"url\":\"http://myblog.com/blogpost1\",\"username\":\"SlackBot\"}]');\n    });\n    (0, _mocha.it)('serializes empty SlackIntegration objects', function () {\n      let transform = this.subject();\n      let deserialized = Ember.A([_slackIntegration.default.create({\n        url: ''\n      })]);\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('[]');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/twitter-url-user-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: twitter-url-user', function () {\n    (0, _emberMocha.setupTest)('transform:twitter-url-user', {});\n    (0, _mocha.it)('deserializes twitter url', function () {\n      let transform = this.subject();\n      let serialized = '@testuser';\n      let result = transform.deserialize(serialized);\n      (0, _chai.expect)(result).to.equal('https://twitter.com/testuser');\n    });\n    (0, _mocha.it)('serializes url to twitter username', function () {\n      let transform = this.subject();\n      let deserialized = 'https://twitter.com/testuser';\n      let result = transform.serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('@testuser');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/transforms/unsplash-settings-test\", [\"mocha\", \"chai\", \"ember-mocha\"], function (_mocha, _chai, _emberMocha) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Transform: unsplash-settings', function () {\n    (0, _emberMocha.setupTest)('transform:unsplash-settings', {// Specify the other units that are required for this test.\n      // needs: ['transform:foo']\n    });\n    (0, _mocha.it)('deserializes to default value when null', function () {\n      let serialized = null;\n      let result = this.subject().deserialize(serialized);\n      (0, _chai.expect)(result.isActive).to.be.true;\n    });\n    (0, _mocha.it)('deserializes to default value when blank string', function () {\n      let serialized = '';\n      let result = this.subject().deserialize(serialized);\n      (0, _chai.expect)(result.isActive).to.be.true;\n    });\n    (0, _mocha.it)('deserializes to default value when invalid JSON', function () {\n      let serialized = 'not JSON';\n      let result = this.subject().deserialize(serialized);\n      (0, _chai.expect)(result.isActive).to.be.true;\n    });\n    (0, _mocha.it)('deserializes valid JSON object', function () {\n      let serialized = '{\"isActive\":false}';\n      let result = this.subject().deserialize(serialized);\n      (0, _chai.expect)(result.isActive).to.be.false;\n    });\n    (0, _mocha.it)('serializes to JSON string', function () {\n      let deserialized = {\n        isActive: false\n      };\n      let result = this.subject().serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('{\"isActive\":false}');\n    });\n    (0, _mocha.it)('serializes to default value when blank', function () {\n      let deserialized = '';\n      let result = this.subject().serialize(deserialized);\n      (0, _chai.expect)(result).to.equal('{\"isActive\":true}');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/utils/ghost-paths-test\", [\"ghost-admin/utils/ghost-paths\", \"mocha\", \"chai\"], function (_ghostPaths, _mocha, _chai) {\n  \"use strict\";\n\n  (0, _mocha.describe)('Unit: Util: ghost-paths', function () {\n    (0, _mocha.describe)('join', function () {\n      let join = (0, _ghostPaths.default)().url.join;\n      (0, _mocha.it)('should join two or more paths, normalizing slashes', function () {\n        let path;\n        path = join('/one/', '/two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one', '/two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one/', 'two/');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('/one/', 'two/', '/three/');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n        path = join('/one/', 'two', 'three/');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n      });\n      (0, _mocha.it)('should not change the slash at the beginning', function () {\n        let path;\n        path = join('one/');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one/', 'two');\n        (0, _chai.expect)(path).to.equal('one/two/');\n        path = join('/one/', 'two');\n        (0, _chai.expect)(path).to.equal('/one/two/');\n        path = join('one/', 'two', 'three');\n        (0, _chai.expect)(path).to.equal('one/two/three/');\n        path = join('/one/', 'two', 'three');\n        (0, _chai.expect)(path).to.equal('/one/two/three/');\n      });\n      (0, _mocha.it)('should always return a slash at the end', function () {\n        let path;\n        path = join();\n        (0, _chai.expect)(path).to.equal('/');\n        path = join('');\n        (0, _chai.expect)(path).to.equal('/');\n        path = join('one');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one/');\n        (0, _chai.expect)(path).to.equal('one/');\n        path = join('one', 'two');\n        (0, _chai.expect)(path).to.equal('one/two/');\n        path = join('one', 'two/');\n        (0, _chai.expect)(path).to.equal('one/two/');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/nav-item-test\", [\"ghost-admin/models/navigation-item\", \"ghost-admin/validators/nav-item\", \"mocha\", \"chai\"], function (_navigationItem, _navItem, _mocha, _chai) {\n  \"use strict\";\n\n  const testInvalidUrl = function testInvalidUrl(url) {\n    let navItem = _navigationItem.default.create({\n      url\n    });\n\n    _navItem.default.check(navItem, 'url');\n\n    (0, _chai.expect)(_navItem.default.get('passed'), \"\\\"\".concat(url, \"\\\" passed\")).to.be.false;\n    (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n      attribute: 'url',\n      message: 'You must specify a valid URL or relative path'\n    }]);\n    (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n  };\n\n  const testValidUrl = function testValidUrl(url) {\n    let navItem = _navigationItem.default.create({\n      url\n    });\n\n    _navItem.default.check(navItem, 'url');\n\n    (0, _chai.expect)(_navItem.default.get('passed'), \"\\\"\".concat(url, \"\\\" failed\")).to.be.true;\n    (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n  };\n\n  (0, _mocha.describe)('Unit: Validator: nav-item', function () {\n    (0, _mocha.it)('requires label presence', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem, 'label');\n\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('label').toArray()).to.deep.equal([{\n        attribute: 'label',\n        message: 'You must specify a label'\n      }]);\n      (0, _chai.expect)(navItem.get('hasValidated')).to.include('label');\n    });\n    (0, _mocha.it)('requires url presence', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem, 'url');\n\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n        attribute: 'url',\n        message: 'You must specify a URL or relative path'\n      }]);\n      (0, _chai.expect)(navItem.get('hasValidated')).to.include('url');\n    });\n    (0, _mocha.it)('fails on invalid url values', function () {\n      let invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n      invalidUrls.forEach(function (url) {\n        testInvalidUrl(url);\n      });\n    });\n    (0, _mocha.it)('passes on valid url values', function () {\n      let validUrls = ['http://localhost:2368', 'http://localhost:2368/some-path', 'https://localhost:2368/some-path', '//localhost:2368/some-path', 'http://localhost:2368/#test', 'http://localhost:2368/?query=test&another=example', 'http://localhost:2368/?query=test&another=example#test', 'tel:01234-567890', 'mailto:test@example.com', 'http://some:user@example.com:1234', '/relative/path'];\n      validUrls.forEach(function (url) {\n        testValidUrl(url);\n      });\n    });\n    (0, _mocha.it)('validates url and label by default', function () {\n      let navItem = _navigationItem.default.create();\n\n      _navItem.default.check(navItem);\n\n      (0, _chai.expect)(navItem.get('errors').errorsFor('label')).to.not.be.empty;\n      (0, _chai.expect)(navItem.get('errors').errorsFor('url')).to.not.be.empty;\n      (0, _chai.expect)(_navItem.default.get('passed')).to.be.false;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/post-test\", [\"ghost-admin/mixins/validation-engine\", \"mocha\", \"chai\"], function (_validationEngine, _mocha, _chai) {\n  \"use strict\";\n\n  const Post = Ember.Object.extend(_validationEngine.default, {\n    validationType: 'post',\n    email: null\n  });\n  (0, _mocha.describe)('Unit: Validator: post', function () {\n    (0, _mocha.describe)('canonicalUrl', function () {\n      (0, _mocha.it)('can be blank', async function () {\n        let post = Post.create({\n          canonicalUrl: ''\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('can be an absolute URL', async function () {\n        let post = Post.create({\n          canonicalUrl: 'http://example.com'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('can be a relative URL', async function () {\n        let post = Post.create({\n          canonicalUrl: '/my-other-post'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.true;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n      });\n      (0, _mocha.it)('cannot be a random string', async function () {\n        let post = Post.create({\n          canonicalUrl: 'asdfghjk'\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.false;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n        let error = post.errors.errorsFor('canonicalUrl').get(0);\n        (0, _chai.expect)(error.attribute).to.equal('canonicalUrl');\n        (0, _chai.expect)(error.message).to.equal('Please enter a valid URL');\n      });\n      (0, _mocha.it)('cannot be too long', async function () {\n        let post = Post.create({\n          canonicalUrl: \"http://example.com/\".concat(new Array(1983).join('x'))\n        });\n        let passed = await post.validate({\n          property: 'canonicalUrl'\n        }).then(() => true);\n        (0, _chai.expect)(passed, 'passed').to.be.false;\n        (0, _chai.expect)(post.hasValidated).to.include('canonicalUrl');\n        let error = post.errors.errorsFor('canonicalUrl').get(0);\n        (0, _chai.expect)(error.attribute).to.equal('canonicalUrl');\n        (0, _chai.expect)(error.message).to.equal('Please enter a valid URL');\n      });\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/slack-integration-test\", [\"ghost-admin/models/slack-integration\", \"ghost-admin/validators/slack-integration\", \"mocha\", \"chai\"], function (_slackIntegration, _slackIntegration2, _mocha, _chai) {\n  \"use strict\";\n\n  const testInvalidUrl = function testInvalidUrl(url) {\n    let slackObject = _slackIntegration.default.create({\n      url\n    });\n\n    _slackIntegration2.default.check(slackObject, 'url');\n\n    (0, _chai.expect)(_slackIntegration2.default.get('passed'), \"\\\"\".concat(url, \"\\\" passed\")).to.be.false;\n    (0, _chai.expect)(slackObject.get('errors').errorsFor('url').toArray()).to.deep.equal([{\n      attribute: 'url',\n      message: 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>'\n    }]);\n    (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n  };\n\n  const testValidUrl = function testValidUrl(url) {\n    let slackObject = _slackIntegration.default.create({\n      url\n    });\n\n    _slackIntegration2.default.check(slackObject, 'url');\n\n    (0, _chai.expect)(_slackIntegration2.default.get('passed'), \"\\\"\".concat(url, \"\\\" failed\")).to.be.true;\n    (0, _chai.expect)(slackObject.get('hasValidated')).to.include('url');\n  };\n\n  (0, _mocha.describe)('Unit: Validator: slack-integration', function () {\n    (0, _mocha.it)('fails on invalid url values', function () {\n      let invalidUrls = ['test@example.com', '/has spaces', 'no-leading-slash', 'http://example.com/with spaces'];\n      invalidUrls.forEach(function (url) {\n        testInvalidUrl(url);\n      });\n    });\n    (0, _mocha.it)('passes on valid url values', function () {\n      let validUrls = ['https://hooks.slack.com/services/;alskdjf', 'https://hooks.slack.com/services/123445678', 'https://hooks.slack.com/services/some_webhook', 'https://discordapp.com/api/webhooks/380692408364433418/mGLHSRyEoUaTvY91Te16WOT8Obn-BrJoiTNoxeUqhb6klKERb9xaZkUBYC5AeduwYCCy/slack'];\n      validUrls.forEach(function (url) {\n        testValidUrl(url);\n      });\n    });\n    (0, _mocha.it)('validates url by default', function () {\n      let slackObject = _slackIntegration.default.create();\n\n      _slackIntegration2.default.check(slackObject);\n\n      (0, _chai.expect)(slackObject.get('errors').errorsFor('url')).to.be.empty;\n      (0, _chai.expect)(_slackIntegration2.default.get('passed')).to.be.true;\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/subscriber-test\", [\"ghost-admin/mixins/validation-engine\", \"mocha\", \"chai\"], function (_validationEngine, _mocha, _chai) {\n  \"use strict\";\n\n  const Subscriber = Ember.Object.extend(_validationEngine.default, {\n    validationType: 'subscriber',\n    email: null\n  });\n  (0, _mocha.describe)('Unit: Validator: subscriber', function () {\n    (0, _mocha.it)('validates email by default', function () {\n      let subscriber = Subscriber.create({});\n      let properties = subscriber.get('validators.subscriber.properties');\n      (0, _chai.expect)(properties, 'properties').to.include('email');\n    });\n    (0, _mocha.it)('passes with a valid email', function () {\n      let subscriber = Subscriber.create({\n        email: 'test@example.com'\n      });\n      let passed = false;\n      Ember.run(() => {\n        subscriber.validate({\n          property: 'email'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n    });\n    (0, _mocha.it)('validates email presence', function () {\n      let subscriber = Subscriber.create({});\n      let passed = false;\n      Ember.run(() => {\n        subscriber.validate({\n          property: 'email'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      let emailErrors = subscriber.get('errors').errorsFor('email').get(0);\n      (0, _chai.expect)(emailErrors.attribute, 'errors.email.attribute').to.equal('email');\n      (0, _chai.expect)(emailErrors.message, 'errors.email.message').to.equal('Please enter an email.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n    });\n    (0, _mocha.it)('validates email', function () {\n      let subscriber = Subscriber.create({\n        email: 'foo'\n      });\n      let passed = false;\n      Ember.run(() => {\n        subscriber.validate({\n          property: 'email'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      let emailErrors = subscriber.get('errors').errorsFor('email').get(0);\n      (0, _chai.expect)(emailErrors.attribute, 'errors.email.attribute').to.equal('email');\n      (0, _chai.expect)(emailErrors.message, 'errors.email.message').to.equal('Invalid email.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(subscriber.get('hasValidated'), 'hasValidated').to.include('email');\n    });\n  });\n});","define(\"ghost-admin/tests/unit/validators/tag-settings-test\", [\"ghost-admin/mixins/validation-engine\", \"mocha\", \"chai\"], function (_validationEngine, _mocha, _chai) {\n  \"use strict\";\n\n  const Tag = Ember.Object.extend(_validationEngine.default, {\n    validationType: 'tag',\n    name: null,\n    description: null,\n    metaTitle: null,\n    metaDescription: null\n  }); // TODO: These tests have way too much duplication, consider creating test\n  // helpers for validations\n  // TODO: Move testing of validation-engine behaviour into validation-engine-test\n  // and replace these tests with specific validator tests\n\n  (0, _mocha.describe)('Unit: Validator: tag-settings', function () {\n    (0, _mocha.it)('validates all fields by default', function () {\n      let tag = Tag.create({});\n      let properties = tag.get('validators.tag.properties'); // TODO: This is checking implementation details rather than expected\n      // behaviour. Replace once we have consistent behaviour (see below)\n\n      (0, _chai.expect)(properties, 'properties').to.include('name');\n      (0, _chai.expect)(properties, 'properties').to.include('slug');\n      (0, _chai.expect)(properties, 'properties').to.include('description');\n      (0, _chai.expect)(properties, 'properties').to.include('metaTitle');\n      (0, _chai.expect)(properties, 'properties').to.include('metaDescription'); // TODO: .validate (and  by extension .save) doesn't currently affect\n      // .hasValidated - it would be good to make this consistent.\n      // The following tests currently fail:\n      //\n      // run(() => {\n      //     tag.validate();\n      // });\n      //\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('name');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('description');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n      // expect(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n    (0, _mocha.it)('passes with valid name', function () {\n      // longest valid name\n      let tag = Tag.create({\n        name: new Array(192).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(191);\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates name presence', function () {\n      let tag = Tag.create();\n      let passed = false;\n      let nameErrors; // TODO: validator is currently a singleton meaning state leaks\n      // between all objects that use it. Each object should either\n      // get it's own validator instance or validator objects should not\n      // contain state. The following currently fails:\n      //\n      // let validator = tag.get('validators.tag')\n      // expect(validator.get('passed'), 'passed').to.be.false;\n\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name').get(0);\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('You must specify a name for the tag.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates names starting with a comma', function () {\n      let tag = Tag.create({\n        name: ',test'\n      });\n      let passed = false;\n      let nameErrors;\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name').get(0);\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names can\\'t start with commas.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('validates name length', function () {\n      // shortest invalid name\n      let tag = Tag.create({\n        name: new Array(193).join('x')\n      });\n      let passed = false;\n      let nameErrors;\n      (0, _chai.expect)(tag.get('name').length, 'name length').to.equal(192);\n      Ember.run(() => {\n        tag.validate({\n          property: 'name'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      nameErrors = tag.get('errors').errorsFor('name')[0];\n      (0, _chai.expect)(nameErrors.attribute, 'errors.name.attribute').to.equal('name');\n      (0, _chai.expect)(nameErrors.message, 'errors.name.message').to.equal('Tag names cannot be longer than 191 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('name');\n    });\n    (0, _mocha.it)('passes with valid slug', function () {\n      // longest valid slug\n      let tag = Tag.create({\n        slug: new Array(192).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(191);\n      Ember.run(() => {\n        tag.validate({\n          property: 'slug'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n    });\n    (0, _mocha.it)('validates slug length', function () {\n      // shortest invalid slug\n      let tag = Tag.create({\n        slug: new Array(193).join('x')\n      });\n      let passed = false;\n      let slugErrors;\n      (0, _chai.expect)(tag.get('slug').length, 'slug length').to.equal(192);\n      Ember.run(() => {\n        tag.validate({\n          property: 'slug'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      slugErrors = tag.get('errors').errorsFor('slug')[0];\n      (0, _chai.expect)(slugErrors.attribute, 'errors.slug.attribute').to.equal('slug');\n      (0, _chai.expect)(slugErrors.message, 'errors.slug.message').to.equal('URL cannot be longer than 191 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('slug');\n    });\n    (0, _mocha.it)('passes with a valid description', function () {\n      // longest valid description\n      let tag = Tag.create({\n        description: new Array(501).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(500);\n      Ember.run(() => {\n        tag.validate({\n          property: 'description'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n    });\n    (0, _mocha.it)('validates description length', function () {\n      // shortest invalid description\n      let tag = Tag.create({\n        description: new Array(502).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('description').length, 'description length').to.equal(501);\n      Ember.run(() => {\n        tag.validate({\n          property: 'description'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('description')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.description.attribute').to.equal('description');\n      (0, _chai.expect)(errors.message, 'errors.description.message').to.equal('Description cannot be longer than 500 characters.'); // TODO: tag.errors appears to be a singleton and previous errors are\n      // not cleared despite creating a new tag object\n      //\n      // console.log(JSON.stringify(tag.get('errors')));\n      // expect(tag.get('errors.length')).to.equal(1);\n\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('description');\n    }); // TODO: we have both metaTitle and metaTitle property names on the\n    // model/validator respectively - this should be standardised\n\n    (0, _mocha.it)('passes with a valid metaTitle', function () {\n      // longest valid metaTitle\n      let tag = Tag.create({\n        metaTitle: new Array(301).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(300);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaTitle'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n    });\n    (0, _mocha.it)('validates metaTitle length', function () {\n      // shortest invalid metaTitle\n      let tag = Tag.create({\n        metaTitle: new Array(302).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('metaTitle').length, 'metaTitle length').to.equal(301);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaTitle'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('metaTitle')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.metaTitle.attribute').to.equal('metaTitle');\n      (0, _chai.expect)(errors.message, 'errors.metaTitle.message').to.equal('Meta Title cannot be longer than 300 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaTitle');\n    }); // TODO: we have both metaDescription and metaDescription property names on\n    // the model/validator respectively - this should be standardised\n\n    (0, _mocha.it)('passes with a valid metaDescription', function () {\n      // longest valid description\n      let tag = Tag.create({\n        metaDescription: new Array(501).join('x')\n      });\n      let passed = false;\n      (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(500);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaDescription'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      (0, _chai.expect)(passed, 'passed').to.be.true;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n    (0, _mocha.it)('validates metaDescription length', function () {\n      // shortest invalid metaDescription\n      let tag = Tag.create({\n        metaDescription: new Array(502).join('x')\n      });\n      let passed = false;\n      let errors;\n      (0, _chai.expect)(tag.get('metaDescription').length, 'metaDescription length').to.equal(501);\n      Ember.run(() => {\n        tag.validate({\n          property: 'metaDescription'\n        }).then(() => {\n          passed = true;\n        });\n      });\n      errors = tag.get('errors').errorsFor('metaDescription')[0];\n      (0, _chai.expect)(errors.attribute, 'errors.metaDescription.attribute').to.equal('metaDescription');\n      (0, _chai.expect)(errors.message, 'errors.metaDescription.message').to.equal('Meta Description cannot be longer than 500 characters.');\n      (0, _chai.expect)(passed, 'passed').to.be.false;\n      (0, _chai.expect)(tag.get('hasValidated'), 'hasValidated').to.include('metaDescription');\n    });\n  });\n});","define('ghost-admin/config/environment', [], function() {\n  var prefix = 'ghost-admin';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ghost-admin/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfrtzncxztjrihMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnccA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnzXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlpjtxaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtpplQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjprKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}