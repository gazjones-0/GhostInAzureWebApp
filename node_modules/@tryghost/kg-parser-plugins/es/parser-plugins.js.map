{"version":3,"file":"parser-plugins.js","sources":["../lib/parser-plugins.js"],"sourcesContent":["/* global DOMParser, window */\n\n/**\n * Copied from:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/options/parser-plugins.js\n * Which makes use of:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/helpers/clean-basic-html.js\n *\n * These functions are used to proces nodes during parsing from DOM -> mobiledoc\n */\n\nimport cleanBasicHtml from '@tryghost/kg-clean-basic-html';\n\nexport function createParserPlugins(_options = {}) {\n    const defaults = {};\n    const options = Object.assign({}, defaults, _options);\n\n    if (!options.createDocument) {\n        const Parser = (typeof DOMParser !== 'undefined' && DOMParser) || (typeof window !== 'undefined' && window.DOMParser);\n\n        if (!Parser) {\n            throw new Error('createParserPlugins() must be passed a `createDocument` function as an option when used in a non-browser environment');\n        }\n\n        options.createDocument = function (html) {\n            const parser = new Parser();\n            return parser.parseFromString(html, 'text/html');\n        };\n    }\n\n    // PLUGINS -----------------------------------------------------------------\n\n    // https://github.com/TryGhost/Koenig/issues/1\n    // allows arbitrary HTML blocks wrapped in our card comments to be extracted\n    // into a HTML card rather than being put through the normal parse+plugins\n    function kgHtmlCardToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 8 || node.nodeValue !== 'kg-card-begin: html') {\n            return;\n        }\n\n        let html = [];\n\n        function isHtmlEndComment(node) {\n            return node && node.nodeType === 8 && node.nodeValue === 'kg-card-end: html';\n        }\n\n        let nextNode = node.nextSibling;\n        while (nextNode && !isHtmlEndComment(nextNode)) {\n            let currentNode = nextNode;\n            html.push(currentNode.outerHTML);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        let payload = {html: html.join('\\n').trim()};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // mobiledoc by default ignores <BR> tags but we have a custom SoftReturn atom\n    function brToSoftBreakAtom(node, builder, {addMarkerable, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'BR') {\n            return;\n        }\n\n        let softReturn = builder.createAtom('soft-return');\n        addMarkerable(softReturn);\n\n        nodeFinished();\n    }\n\n    // leading newlines in text nodes will add a space to the beginning of the text\n    // which doesn't render correctly if we're replacing <br> with SoftReturn atoms\n    // after parsing text as markdown to html\n    function removeLeadingNewline(node) {\n        if (node.nodeType !== 3 || node.nodeName !== '#text') {\n            return;\n        }\n\n        node.nodeValue = node.nodeValue.replace(/^\\n/, '');\n    }\n\n    function figureToImageCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let img = node.querySelector('img');\n        let figcaption = node.querySelector('figcaption');\n        let kgClass = node.className.match(/kg-width-(wide|full)/);\n        let grafClass = node.className.match(/graf--layout(FillWidth|OutsetCenter)/);\n\n        if (!img) {\n            return;\n        }\n\n        let payload = {\n            src: img.src,\n            alt: img.alt,\n            title: img.title\n        };\n\n        if (kgClass) {\n            payload.cardWidth = kgClass[1];\n        } else if (grafClass) {\n            payload.cardWidth = grafClass[1] === 'FillWidth' ? 'full' : 'wide';\n        }\n\n        if (figcaption) {\n            let cleanHtml = cleanBasicHtml(figcaption.innerHTML, options);\n            payload.caption = cleanHtml;\n        }\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function imgToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'IMG') {\n            return;\n        }\n\n        let payload = {\n            src: node.src,\n            alt: node.alt,\n            title: node.title\n        };\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function hrToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'HR') {\n            return;\n        }\n\n        let cardSection = builder.createCardSection('hr');\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToCodeCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let pre = node.querySelector('pre');\n        let code = pre.querySelector('code');\n        let figcaption = node.querySelector('figcaption');\n\n        // if there's no caption the preCodeToCard plugin will pick it up instead\n        if (!code || !figcaption) {\n            return;\n        }\n\n        let payload = {\n            code: code.textContent,\n            caption: cleanBasicHtml(figcaption.innerHTML, options)\n        };\n\n        let preClass = pre.getAttribute('class') || '';\n        let codeClass = code.getAttribute('class') || '';\n        let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n        let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n        if (languageMatches) {\n            payload.language = languageMatches[1].toLowerCase();\n        }\n\n        let cardSection = builder.createCardSection('code', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function preCodeToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'PRE') {\n            return;\n        }\n\n        let [codeElement] = node.children;\n\n        if (codeElement && codeElement.tagName === 'CODE') {\n            let payload = {code: codeElement.textContent};\n\n            let preClass = node.getAttribute('class') || '';\n            let codeClass = codeElement.getAttribute('class') || '';\n            let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n            let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n            if (languageMatches) {\n                payload.language = languageMatches[1].toLowerCase();\n            }\n\n            let cardSection = builder.createCardSection('code', payload);\n            addSection(cardSection);\n            nodeFinished();\n        }\n    }\n\n    return [\n        kgHtmlCardToCard,\n        brToSoftBreakAtom,\n        removeLeadingNewline,\n        figureToImageCard,\n        imgToCard,\n        hrToCard,\n        figureToCodeCard,\n        preCodeToCard\n    ];\n}\n"],"names":["createParserPlugins","_options","defaults","options","Object","assign","createDocument","Parser","DOMParser","window","Error","html","parser","parseFromString","kgHtmlCardToCard","node","builder","addSection","nodeFinished","nodeType","nodeValue","isHtmlEndComment","nextNode","nextSibling","currentNode","push","outerHTML","remove","payload","join","trim","cardSection","createCardSection","brToSoftBreakAtom","addMarkerable","tagName","softReturn","createAtom","removeLeadingNewline","nodeName","replace","figureToImageCard","img","querySelector","figcaption","kgClass","className","match","grafClass","src","alt","title","cardWidth","cleanHtml","cleanBasicHtml","innerHTML","caption","imgToCard","hrToCard","figureToCodeCard","pre","code","textContent","preClass","getAttribute","codeClass","langRegex","languageMatches","language","toLowerCase","preCodeToCard","codeElement","children"],"mappings":"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"}